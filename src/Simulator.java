/*
*   Authors: Boomika, Sumanth, Waad, Kamal
*   Project Title: CISC Computer Simulator
*   Project Description: Small classical CISC computer
*   Project Team #1
*/

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class Simulator extends javax.swing.JFrame {

    private short R0;    //Stores GPR0 value
    private short R1;    //Stores GPR1 value
    private short R2;    //Stores GPR2 value
    private short R3;    //Stores GPR3 value
    private short FR0;    //Stores FR0 value
    private short FR1;    //Stores FR1 value
    private short X1;    //Stores IXR1 value
    private short X2;    //Stores IXR2 value
    private short X3;    //Stores IXR3 value
    private short PC;    //Stores PC value
    private short MAR;   //Stores MAR value
    private short MBR;   //Stores MBR value
    private short IR;    //Stores IR value
    private short MFR;   //Stores MFR value
    private short CC0;    //Stores CC0-OverFlow value
    private short CC1;    //Stores CC1-UnderFlow value
    private short CC2;    //Stores CC2-DivZero value
    private short CC3;    //Stores CC3-EqualOrNot value
    public short InputSignal; //Stores Input Signal status
    public short InputVal; //Stores Input Value
    public static Cache[] cache=new Cache[16];
    Queue<Short> FIFO = new LinkedList<>();

    /**
     * Creates new form Simulator
     */
    public Simulator() {
        initComponents();
        R0 = 0;
        R1 = 0;
        R2 = 0;
        R3 = 0;
        FR0 = 0;
        FR1 = 0;
        X1 = 0;
        X2 = 0;
        X3 = 0;
        PC = 0;
        MAR = 0;
        MBR = 0;
        IR = 0;
        MFR = 0;
        CC0 = 0;
        CC1 = 0;
        CC2 = 0;
        CC3 = 0;
        InputSignal = 0;
        InputVal = 0;
    }

    public static short[] memory=new short[2048];
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel_R0 = new javax.swing.JLabel();
        R0_15 = new javax.swing.JPanel();
        R0_14 = new javax.swing.JPanel();
        R0_13 = new javax.swing.JPanel();
        R0_12 = new javax.swing.JPanel();
        R0_11 = new javax.swing.JPanel();
        R0_10 = new javax.swing.JPanel();
        R0_9 = new javax.swing.JPanel();
        R0_8 = new javax.swing.JPanel();
        R0_7 = new javax.swing.JPanel();
        R0_6 = new javax.swing.JPanel();
        R0_5 = new javax.swing.JPanel();
        R0_3 = new javax.swing.JPanel();
        R0_4 = new javax.swing.JPanel();
        R0_2 = new javax.swing.JPanel();
        R0_1 = new javax.swing.JPanel();
        R0_0 = new javax.swing.JPanel();
        Load_R0 = new javax.swing.JButton();
        jLabel_PC = new javax.swing.JLabel();
        PC_11 = new javax.swing.JPanel();
        PC_10 = new javax.swing.JPanel();
        PC_9 = new javax.swing.JPanel();
        PC_8 = new javax.swing.JPanel();
        PC_7 = new javax.swing.JPanel();
        PC_6 = new javax.swing.JPanel();
        PC_5 = new javax.swing.JPanel();
        PC_4 = new javax.swing.JPanel();
        PC_3 = new javax.swing.JPanel();
        PC_2 = new javax.swing.JPanel();
        PC_1 = new javax.swing.JPanel();
        PC_0 = new javax.swing.JPanel();
        Load_PC = new javax.swing.JButton();
        jLabel_R1 = new javax.swing.JLabel();
        R1_15 = new javax.swing.JPanel();
        R1_14 = new javax.swing.JPanel();
        R1_13 = new javax.swing.JPanel();
        R1_12 = new javax.swing.JPanel();
        R1_11 = new javax.swing.JPanel();
        R1_10 = new javax.swing.JPanel();
        R1_9 = new javax.swing.JPanel();
        R1_8 = new javax.swing.JPanel();
        R1_7 = new javax.swing.JPanel();
        R1_6 = new javax.swing.JPanel();
        R1_5 = new javax.swing.JPanel();
        R1_4 = new javax.swing.JPanel();
        R1_3 = new javax.swing.JPanel();
        R1_2 = new javax.swing.JPanel();
        R1_1 = new javax.swing.JPanel();
        R1_0 = new javax.swing.JPanel();
        Load_R1 = new javax.swing.JButton();
        jLabel_MAR = new javax.swing.JLabel();
        MAR_11 = new javax.swing.JPanel();
        MAR_10 = new javax.swing.JPanel();
        MAR_9 = new javax.swing.JPanel();
        MAR_8 = new javax.swing.JPanel();
        MAR_7 = new javax.swing.JPanel();
        MAR_6 = new javax.swing.JPanel();
        MAR_5 = new javax.swing.JPanel();
        MAR_4 = new javax.swing.JPanel();
        MAR_3 = new javax.swing.JPanel();
        MAR_2 = new javax.swing.JPanel();
        MAR_1 = new javax.swing.JPanel();
        MAR_0 = new javax.swing.JPanel();
        Load_MAR = new javax.swing.JButton();
        jLabel_R2 = new javax.swing.JLabel();
        R2_15 = new javax.swing.JPanel();
        R2_14 = new javax.swing.JPanel();
        R2_13 = new javax.swing.JPanel();
        R2_12 = new javax.swing.JPanel();
        R2_11 = new javax.swing.JPanel();
        R2_10 = new javax.swing.JPanel();
        R2_9 = new javax.swing.JPanel();
        R2_8 = new javax.swing.JPanel();
        R2_7 = new javax.swing.JPanel();
        R2_6 = new javax.swing.JPanel();
        R2_5 = new javax.swing.JPanel();
        R2_4 = new javax.swing.JPanel();
        R2_3 = new javax.swing.JPanel();
        R2_2 = new javax.swing.JPanel();
        R2_1 = new javax.swing.JPanel();
        R2_0 = new javax.swing.JPanel();
        Load_R2 = new javax.swing.JButton();
        jLabel_MBR = new javax.swing.JLabel();
        MBR_15 = new javax.swing.JPanel();
        MBR_14 = new javax.swing.JPanel();
        MBR_13 = new javax.swing.JPanel();
        MBR_12 = new javax.swing.JPanel();
        MBR_11 = new javax.swing.JPanel();
        MBR_10 = new javax.swing.JPanel();
        MBR_9 = new javax.swing.JPanel();
        MBR_8 = new javax.swing.JPanel();
        MBR_7 = new javax.swing.JPanel();
        MBR_6 = new javax.swing.JPanel();
        MBR_5 = new javax.swing.JPanel();
        MBR_4 = new javax.swing.JPanel();
        MBR_3 = new javax.swing.JPanel();
        MBR_2 = new javax.swing.JPanel();
        MBR_1 = new javax.swing.JPanel();
        MBR_0 = new javax.swing.JPanel();
        Load_MBR = new javax.swing.JButton();
        jLabel_R3 = new javax.swing.JLabel();
        R3_15 = new javax.swing.JPanel();
        R3_14 = new javax.swing.JPanel();
        R3_13 = new javax.swing.JPanel();
        R3_12 = new javax.swing.JPanel();
        R3_11 = new javax.swing.JPanel();
        R3_9 = new javax.swing.JPanel();
        R3_10 = new javax.swing.JPanel();
        R3_8 = new javax.swing.JPanel();
        R3_7 = new javax.swing.JPanel();
        R3_6 = new javax.swing.JPanel();
        R3_5 = new javax.swing.JPanel();
        R3_4 = new javax.swing.JPanel();
        R3_3 = new javax.swing.JPanel();
        R3_2 = new javax.swing.JPanel();
        R3_1 = new javax.swing.JPanel();
        R3_0 = new javax.swing.JPanel();
        Load_R3 = new javax.swing.JButton();
        Store = new javax.swing.JButton();
        Store_plus = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        IPL = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        OP_15 = new javax.swing.JToggleButton();
        OP_14 = new javax.swing.JToggleButton();
        OP_13 = new javax.swing.JToggleButton();
        OP_12 = new javax.swing.JToggleButton();
        OP_11 = new javax.swing.JToggleButton();
        OP_10 = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        GPR_9 = new javax.swing.JToggleButton();
        GPR_8 = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        IXR_7 = new javax.swing.JToggleButton();
        IXR_6 = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        I_5 = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        ADDRESS_4 = new javax.swing.JToggleButton();
        ADDRESS_3 = new javax.swing.JToggleButton();
        ADDRESS_2 = new javax.swing.JToggleButton();
        ADDRESS_1 = new javax.swing.JToggleButton();
        ADDRESS_0 = new javax.swing.JToggleButton();
        jLabel_Operation = new javax.swing.JLabel();
        jLabel_GPR = new javax.swing.JLabel();
        jLabel_IXR = new javax.swing.JLabel();
        jLabel_I = new javax.swing.JLabel();
        jLabel_Address = new javax.swing.JLabel();
        jLabel_Halt = new javax.swing.JLabel();
        jLabel_Run = new javax.swing.JLabel();
        SS = new javax.swing.JButton();
        Run = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel_IR = new javax.swing.JLabel();
        IR_15 = new javax.swing.JPanel();
        IR_14 = new javax.swing.JPanel();
        IR_13 = new javax.swing.JPanel();
        IR_12 = new javax.swing.JPanel();
        IR_11 = new javax.swing.JPanel();
        IR_10 = new javax.swing.JPanel();
        IR_9 = new javax.swing.JPanel();
        IR_8 = new javax.swing.JPanel();
        IR_7 = new javax.swing.JPanel();
        IR_6 = new javax.swing.JPanel();
        IR_5 = new javax.swing.JPanel();
        IR_4 = new javax.swing.JPanel();
        IR_3 = new javax.swing.JPanel();
        IR_2 = new javax.swing.JPanel();
        IR_1 = new javax.swing.JPanel();
        IR_0 = new javax.swing.JPanel();
        Load_IR = new javax.swing.JButton();
        jLabel_MFR = new javax.swing.JLabel();
        MFR_3 = new javax.swing.JPanel();
        MFR_2 = new javax.swing.JPanel();
        MFR_1 = new javax.swing.JPanel();
        MFR_0 = new javax.swing.JPanel();
        jLabel_CC = new javax.swing.JLabel();
        CC_3 = new javax.swing.JPanel();
        CC_2 = new javax.swing.JPanel();
        CC_1 = new javax.swing.JPanel();
        CC_0 = new javax.swing.JPanel();
        jLabel_R4 = new javax.swing.JLabel();
        FR0_15 = new javax.swing.JPanel();
        FR0_14 = new javax.swing.JPanel();
        FR0_13 = new javax.swing.JPanel();
        FR0_12 = new javax.swing.JPanel();
        FR0_11 = new javax.swing.JPanel();
        FR0_10 = new javax.swing.JPanel();
        FR0_9 = new javax.swing.JPanel();
        FR0_8 = new javax.swing.JPanel();
        FR0_7 = new javax.swing.JPanel();
        FR0_6 = new javax.swing.JPanel();
        FR0_5 = new javax.swing.JPanel();
        FR0_4 = new javax.swing.JPanel();
        FR0_3 = new javax.swing.JPanel();
        FR0_2 = new javax.swing.JPanel();
        FR0_1 = new javax.swing.JPanel();
        FR0_0 = new javax.swing.JPanel();
        Load_FR0 = new javax.swing.JButton();
        jLabel_R5 = new javax.swing.JLabel();
        FR1_15 = new javax.swing.JPanel();
        FR1_14 = new javax.swing.JPanel();
        FR1_13 = new javax.swing.JPanel();
        FR1_12 = new javax.swing.JPanel();
        FR1_11 = new javax.swing.JPanel();
        FR1_10 = new javax.swing.JPanel();
        FR1_9 = new javax.swing.JPanel();
        FR1_8 = new javax.swing.JPanel();
        FR1_7 = new javax.swing.JPanel();
        FR1_6 = new javax.swing.JPanel();
        FR1_5 = new javax.swing.JPanel();
        FR1_4 = new javax.swing.JPanel();
        FR1_3 = new javax.swing.JPanel();
        FR1_2 = new javax.swing.JPanel();
        FR1_1 = new javax.swing.JPanel();
        FR1_0 = new javax.swing.JPanel();
        Load_FR1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        X1_15 = new javax.swing.JPanel();
        X1_14 = new javax.swing.JPanel();
        X1_13 = new javax.swing.JPanel();
        X1_12 = new javax.swing.JPanel();
        X1_11 = new javax.swing.JPanel();
        X1_10 = new javax.swing.JPanel();
        X1_9 = new javax.swing.JPanel();
        X1_8 = new javax.swing.JPanel();
        X1_7 = new javax.swing.JPanel();
        X1_6 = new javax.swing.JPanel();
        X1_5 = new javax.swing.JPanel();
        X1_4 = new javax.swing.JPanel();
        X1_3 = new javax.swing.JPanel();
        X1_2 = new javax.swing.JPanel();
        X1_1 = new javax.swing.JPanel();
        X1_0 = new javax.swing.JPanel();
        Load_X1 = new javax.swing.JButton();
        X2_12 = new javax.swing.JPanel();
        X2_3 = new javax.swing.JPanel();
        X2_2 = new javax.swing.JPanel();
        X2_15 = new javax.swing.JPanel();
        X2_5 = new javax.swing.JPanel();
        Load_X2 = new javax.swing.JButton();
        X2_7 = new javax.swing.JPanel();
        X2_14 = new javax.swing.JPanel();
        X2_6 = new javax.swing.JPanel();
        X2_8 = new javax.swing.JPanel();
        X2_4 = new javax.swing.JPanel();
        X2_1 = new javax.swing.JPanel();
        X2_10 = new javax.swing.JPanel();
        X2_13 = new javax.swing.JPanel();
        X2_11 = new javax.swing.JPanel();
        X2_9 = new javax.swing.JPanel();
        X3_12 = new javax.swing.JPanel();
        X3_3 = new javax.swing.JPanel();
        X3_2 = new javax.swing.JPanel();
        X3_15 = new javax.swing.JPanel();
        X3_5 = new javax.swing.JPanel();
        Load_X3 = new javax.swing.JButton();
        X3_7 = new javax.swing.JPanel();
        X3_14 = new javax.swing.JPanel();
        X3_6 = new javax.swing.JPanel();
        X3_8 = new javax.swing.JPanel();
        X3_4 = new javax.swing.JPanel();
        X3_1 = new javax.swing.JPanel();
        X3_10 = new javax.swing.JPanel();
        X3_13 = new javax.swing.JPanel();
        X3_11 = new javax.swing.JPanel();
        X3_9 = new javax.swing.JPanel();
        X2_0 = new javax.swing.JPanel();
        X3_0 = new javax.swing.JPanel();
        jLabel_X1 = new javax.swing.JLabel();
        jLabel_X2 = new javax.swing.JLabel();
        jLabel_X3 = new javax.swing.JLabel();
        Run_Display = new javax.swing.JPanel();
        Halt_Display = new javax.swing.JPanel();
        Clear_LEDs = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Phase2 = new javax.swing.JPanel();
        JLabel_Keyboard = new javax.swing.JLabel();
        JLabel_Printer = new javax.swing.JLabel();
        jLabel_Cache = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        KeyBoard = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        Printer = new javax.swing.JTextArea();
        CacheArea = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel_Tag0 = new javax.swing.JLabel();
        Tag_0 = new javax.swing.JTextField();
        Value_0 = new javax.swing.JTextField();
        jLabel_Tag8 = new javax.swing.JLabel();
        Tag_8 = new javax.swing.JTextField();
        Value_8 = new javax.swing.JTextField();
        jLabel_Tag1 = new javax.swing.JLabel();
        Tag_1 = new javax.swing.JTextField();
        Value_1 = new javax.swing.JTextField();
        jLabel_Tag9 = new javax.swing.JLabel();
        Tag_9 = new javax.swing.JTextField();
        Value_9 = new javax.swing.JTextField();
        jLabel_Tag2 = new javax.swing.JLabel();
        Tag_2 = new javax.swing.JTextField();
        Value_2 = new javax.swing.JTextField();
        jLabel_Tag10 = new javax.swing.JLabel();
        Tag_10 = new javax.swing.JTextField();
        Value_10 = new javax.swing.JTextField();
        jLabel_Tag3 = new javax.swing.JLabel();
        Tag_3 = new javax.swing.JTextField();
        Value_3 = new javax.swing.JTextField();
        jLabel_Tag11 = new javax.swing.JLabel();
        Tag_11 = new javax.swing.JTextField();
        Value_11 = new javax.swing.JTextField();
        jLabel_Tag4 = new javax.swing.JLabel();
        Tag_4 = new javax.swing.JTextField();
        Value_4 = new javax.swing.JTextField();
        jLabel_Tag12 = new javax.swing.JLabel();
        Tag_12 = new javax.swing.JTextField();
        Value_12 = new javax.swing.JTextField();
        jLabel_Tag5 = new javax.swing.JLabel();
        Tag_5 = new javax.swing.JTextField();
        Value_5 = new javax.swing.JTextField();
        jLabel_Tag13 = new javax.swing.JLabel();
        Tag_13 = new javax.swing.JTextField();
        Value_13 = new javax.swing.JTextField();
        jLabel_Tag6 = new javax.swing.JLabel();
        Tag_6 = new javax.swing.JTextField();
        Value_6 = new javax.swing.JTextField();
        jLabel_Tag14 = new javax.swing.JLabel();
        Tag_14 = new javax.swing.JTextField();
        Value_14 = new javax.swing.JTextField();
        jLabel_Tag7 = new javax.swing.JLabel();
        Tag_7 = new javax.swing.JTextField();
        Value_7 = new javax.swing.JTextField();
        jLabel_Tag15 = new javax.swing.JLabel();
        Tag_15 = new javax.swing.JTextField();
        Value_15 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ConsoleLog = new javax.swing.JTextArea();
        Run_Program_1 = new javax.swing.JButton();
        Input = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Run_Program_2 = new javax.swing.JButton();
        Run_Vector_Program = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setAutoscrolls(true);
        jPanel1.setEnabled(false);

        jLabel_R0.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_R0.setText("R0");

        javax.swing.GroupLayout R0_15Layout = new javax.swing.GroupLayout(R0_15);
        R0_15.setLayout(R0_15Layout);
        R0_15Layout.setHorizontalGroup(
            R0_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_15Layout.setVerticalGroup(
            R0_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_14Layout = new javax.swing.GroupLayout(R0_14);
        R0_14.setLayout(R0_14Layout);
        R0_14Layout.setHorizontalGroup(
            R0_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_14Layout.setVerticalGroup(
            R0_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_13Layout = new javax.swing.GroupLayout(R0_13);
        R0_13.setLayout(R0_13Layout);
        R0_13Layout.setHorizontalGroup(
            R0_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_13Layout.setVerticalGroup(
            R0_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_12Layout = new javax.swing.GroupLayout(R0_12);
        R0_12.setLayout(R0_12Layout);
        R0_12Layout.setHorizontalGroup(
            R0_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_12Layout.setVerticalGroup(
            R0_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_11Layout = new javax.swing.GroupLayout(R0_11);
        R0_11.setLayout(R0_11Layout);
        R0_11Layout.setHorizontalGroup(
            R0_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_11Layout.setVerticalGroup(
            R0_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_10Layout = new javax.swing.GroupLayout(R0_10);
        R0_10.setLayout(R0_10Layout);
        R0_10Layout.setHorizontalGroup(
            R0_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_10Layout.setVerticalGroup(
            R0_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_9Layout = new javax.swing.GroupLayout(R0_9);
        R0_9.setLayout(R0_9Layout);
        R0_9Layout.setHorizontalGroup(
            R0_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_9Layout.setVerticalGroup(
            R0_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_8Layout = new javax.swing.GroupLayout(R0_8);
        R0_8.setLayout(R0_8Layout);
        R0_8Layout.setHorizontalGroup(
            R0_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_8Layout.setVerticalGroup(
            R0_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_7Layout = new javax.swing.GroupLayout(R0_7);
        R0_7.setLayout(R0_7Layout);
        R0_7Layout.setHorizontalGroup(
            R0_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_7Layout.setVerticalGroup(
            R0_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_6Layout = new javax.swing.GroupLayout(R0_6);
        R0_6.setLayout(R0_6Layout);
        R0_6Layout.setHorizontalGroup(
            R0_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_6Layout.setVerticalGroup(
            R0_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_5Layout = new javax.swing.GroupLayout(R0_5);
        R0_5.setLayout(R0_5Layout);
        R0_5Layout.setHorizontalGroup(
            R0_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_5Layout.setVerticalGroup(
            R0_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_3Layout = new javax.swing.GroupLayout(R0_3);
        R0_3.setLayout(R0_3Layout);
        R0_3Layout.setHorizontalGroup(
            R0_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_3Layout.setVerticalGroup(
            R0_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_4Layout = new javax.swing.GroupLayout(R0_4);
        R0_4.setLayout(R0_4Layout);
        R0_4Layout.setHorizontalGroup(
            R0_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_4Layout.setVerticalGroup(
            R0_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_2Layout = new javax.swing.GroupLayout(R0_2);
        R0_2.setLayout(R0_2Layout);
        R0_2Layout.setHorizontalGroup(
            R0_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_2Layout.setVerticalGroup(
            R0_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_1Layout = new javax.swing.GroupLayout(R0_1);
        R0_1.setLayout(R0_1Layout);
        R0_1Layout.setHorizontalGroup(
            R0_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_1Layout.setVerticalGroup(
            R0_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R0_0Layout = new javax.swing.GroupLayout(R0_0);
        R0_0.setLayout(R0_0Layout);
        R0_0Layout.setHorizontalGroup(
            R0_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R0_0Layout.setVerticalGroup(
            R0_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_R0.setText("LD");
        Load_R0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_R0ActionPerformed(evt);
            }
        });

        jLabel_PC.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_PC.setText("PC");

        javax.swing.GroupLayout PC_11Layout = new javax.swing.GroupLayout(PC_11);
        PC_11.setLayout(PC_11Layout);
        PC_11Layout.setHorizontalGroup(
            PC_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_11Layout.setVerticalGroup(
            PC_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_10Layout = new javax.swing.GroupLayout(PC_10);
        PC_10.setLayout(PC_10Layout);
        PC_10Layout.setHorizontalGroup(
            PC_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_10Layout.setVerticalGroup(
            PC_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_9Layout = new javax.swing.GroupLayout(PC_9);
        PC_9.setLayout(PC_9Layout);
        PC_9Layout.setHorizontalGroup(
            PC_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_9Layout.setVerticalGroup(
            PC_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_8Layout = new javax.swing.GroupLayout(PC_8);
        PC_8.setLayout(PC_8Layout);
        PC_8Layout.setHorizontalGroup(
            PC_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_8Layout.setVerticalGroup(
            PC_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_7Layout = new javax.swing.GroupLayout(PC_7);
        PC_7.setLayout(PC_7Layout);
        PC_7Layout.setHorizontalGroup(
            PC_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_7Layout.setVerticalGroup(
            PC_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_6Layout = new javax.swing.GroupLayout(PC_6);
        PC_6.setLayout(PC_6Layout);
        PC_6Layout.setHorizontalGroup(
            PC_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_6Layout.setVerticalGroup(
            PC_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_5Layout = new javax.swing.GroupLayout(PC_5);
        PC_5.setLayout(PC_5Layout);
        PC_5Layout.setHorizontalGroup(
            PC_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_5Layout.setVerticalGroup(
            PC_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_4Layout = new javax.swing.GroupLayout(PC_4);
        PC_4.setLayout(PC_4Layout);
        PC_4Layout.setHorizontalGroup(
            PC_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_4Layout.setVerticalGroup(
            PC_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_3Layout = new javax.swing.GroupLayout(PC_3);
        PC_3.setLayout(PC_3Layout);
        PC_3Layout.setHorizontalGroup(
            PC_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_3Layout.setVerticalGroup(
            PC_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_2Layout = new javax.swing.GroupLayout(PC_2);
        PC_2.setLayout(PC_2Layout);
        PC_2Layout.setHorizontalGroup(
            PC_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_2Layout.setVerticalGroup(
            PC_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_1Layout = new javax.swing.GroupLayout(PC_1);
        PC_1.setLayout(PC_1Layout);
        PC_1Layout.setHorizontalGroup(
            PC_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_1Layout.setVerticalGroup(
            PC_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PC_0Layout = new javax.swing.GroupLayout(PC_0);
        PC_0.setLayout(PC_0Layout);
        PC_0Layout.setHorizontalGroup(
            PC_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PC_0Layout.setVerticalGroup(
            PC_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_PC.setText("LD");
        Load_PC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_PCActionPerformed(evt);
            }
        });

        jLabel_R1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_R1.setText("R1");

        javax.swing.GroupLayout R1_15Layout = new javax.swing.GroupLayout(R1_15);
        R1_15.setLayout(R1_15Layout);
        R1_15Layout.setHorizontalGroup(
            R1_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_15Layout.setVerticalGroup(
            R1_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_14Layout = new javax.swing.GroupLayout(R1_14);
        R1_14.setLayout(R1_14Layout);
        R1_14Layout.setHorizontalGroup(
            R1_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_14Layout.setVerticalGroup(
            R1_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_13Layout = new javax.swing.GroupLayout(R1_13);
        R1_13.setLayout(R1_13Layout);
        R1_13Layout.setHorizontalGroup(
            R1_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_13Layout.setVerticalGroup(
            R1_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_12Layout = new javax.swing.GroupLayout(R1_12);
        R1_12.setLayout(R1_12Layout);
        R1_12Layout.setHorizontalGroup(
            R1_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_12Layout.setVerticalGroup(
            R1_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_11Layout = new javax.swing.GroupLayout(R1_11);
        R1_11.setLayout(R1_11Layout);
        R1_11Layout.setHorizontalGroup(
            R1_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_11Layout.setVerticalGroup(
            R1_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_10Layout = new javax.swing.GroupLayout(R1_10);
        R1_10.setLayout(R1_10Layout);
        R1_10Layout.setHorizontalGroup(
            R1_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_10Layout.setVerticalGroup(
            R1_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_9Layout = new javax.swing.GroupLayout(R1_9);
        R1_9.setLayout(R1_9Layout);
        R1_9Layout.setHorizontalGroup(
            R1_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_9Layout.setVerticalGroup(
            R1_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_8Layout = new javax.swing.GroupLayout(R1_8);
        R1_8.setLayout(R1_8Layout);
        R1_8Layout.setHorizontalGroup(
            R1_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_8Layout.setVerticalGroup(
            R1_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_7Layout = new javax.swing.GroupLayout(R1_7);
        R1_7.setLayout(R1_7Layout);
        R1_7Layout.setHorizontalGroup(
            R1_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_7Layout.setVerticalGroup(
            R1_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_6Layout = new javax.swing.GroupLayout(R1_6);
        R1_6.setLayout(R1_6Layout);
        R1_6Layout.setHorizontalGroup(
            R1_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_6Layout.setVerticalGroup(
            R1_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_5Layout = new javax.swing.GroupLayout(R1_5);
        R1_5.setLayout(R1_5Layout);
        R1_5Layout.setHorizontalGroup(
            R1_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_5Layout.setVerticalGroup(
            R1_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_4Layout = new javax.swing.GroupLayout(R1_4);
        R1_4.setLayout(R1_4Layout);
        R1_4Layout.setHorizontalGroup(
            R1_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_4Layout.setVerticalGroup(
            R1_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_3Layout = new javax.swing.GroupLayout(R1_3);
        R1_3.setLayout(R1_3Layout);
        R1_3Layout.setHorizontalGroup(
            R1_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_3Layout.setVerticalGroup(
            R1_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_2Layout = new javax.swing.GroupLayout(R1_2);
        R1_2.setLayout(R1_2Layout);
        R1_2Layout.setHorizontalGroup(
            R1_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_2Layout.setVerticalGroup(
            R1_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_1Layout = new javax.swing.GroupLayout(R1_1);
        R1_1.setLayout(R1_1Layout);
        R1_1Layout.setHorizontalGroup(
            R1_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_1Layout.setVerticalGroup(
            R1_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R1_0Layout = new javax.swing.GroupLayout(R1_0);
        R1_0.setLayout(R1_0Layout);
        R1_0Layout.setHorizontalGroup(
            R1_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R1_0Layout.setVerticalGroup(
            R1_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_R1.setText("LD");
        Load_R1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_R1ActionPerformed(evt);
            }
        });

        jLabel_MAR.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_MAR.setText("MAR");

        javax.swing.GroupLayout MAR_11Layout = new javax.swing.GroupLayout(MAR_11);
        MAR_11.setLayout(MAR_11Layout);
        MAR_11Layout.setHorizontalGroup(
            MAR_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_11Layout.setVerticalGroup(
            MAR_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_10Layout = new javax.swing.GroupLayout(MAR_10);
        MAR_10.setLayout(MAR_10Layout);
        MAR_10Layout.setHorizontalGroup(
            MAR_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_10Layout.setVerticalGroup(
            MAR_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_9Layout = new javax.swing.GroupLayout(MAR_9);
        MAR_9.setLayout(MAR_9Layout);
        MAR_9Layout.setHorizontalGroup(
            MAR_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_9Layout.setVerticalGroup(
            MAR_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_8Layout = new javax.swing.GroupLayout(MAR_8);
        MAR_8.setLayout(MAR_8Layout);
        MAR_8Layout.setHorizontalGroup(
            MAR_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_8Layout.setVerticalGroup(
            MAR_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_7Layout = new javax.swing.GroupLayout(MAR_7);
        MAR_7.setLayout(MAR_7Layout);
        MAR_7Layout.setHorizontalGroup(
            MAR_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_7Layout.setVerticalGroup(
            MAR_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_6Layout = new javax.swing.GroupLayout(MAR_6);
        MAR_6.setLayout(MAR_6Layout);
        MAR_6Layout.setHorizontalGroup(
            MAR_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_6Layout.setVerticalGroup(
            MAR_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_5Layout = new javax.swing.GroupLayout(MAR_5);
        MAR_5.setLayout(MAR_5Layout);
        MAR_5Layout.setHorizontalGroup(
            MAR_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_5Layout.setVerticalGroup(
            MAR_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_4Layout = new javax.swing.GroupLayout(MAR_4);
        MAR_4.setLayout(MAR_4Layout);
        MAR_4Layout.setHorizontalGroup(
            MAR_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_4Layout.setVerticalGroup(
            MAR_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_3Layout = new javax.swing.GroupLayout(MAR_3);
        MAR_3.setLayout(MAR_3Layout);
        MAR_3Layout.setHorizontalGroup(
            MAR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_3Layout.setVerticalGroup(
            MAR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_2Layout = new javax.swing.GroupLayout(MAR_2);
        MAR_2.setLayout(MAR_2Layout);
        MAR_2Layout.setHorizontalGroup(
            MAR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_2Layout.setVerticalGroup(
            MAR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_1Layout = new javax.swing.GroupLayout(MAR_1);
        MAR_1.setLayout(MAR_1Layout);
        MAR_1Layout.setHorizontalGroup(
            MAR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_1Layout.setVerticalGroup(
            MAR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MAR_0Layout = new javax.swing.GroupLayout(MAR_0);
        MAR_0.setLayout(MAR_0Layout);
        MAR_0Layout.setHorizontalGroup(
            MAR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MAR_0Layout.setVerticalGroup(
            MAR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_MAR.setText("LD");
        Load_MAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_MARActionPerformed(evt);
            }
        });

        jLabel_R2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_R2.setText("R2");

        R2_15.setPreferredSize(new java.awt.Dimension(15, 21));

        javax.swing.GroupLayout R2_15Layout = new javax.swing.GroupLayout(R2_15);
        R2_15.setLayout(R2_15Layout);
        R2_15Layout.setHorizontalGroup(
            R2_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_15Layout.setVerticalGroup(
            R2_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_14Layout = new javax.swing.GroupLayout(R2_14);
        R2_14.setLayout(R2_14Layout);
        R2_14Layout.setHorizontalGroup(
            R2_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_14Layout.setVerticalGroup(
            R2_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_13Layout = new javax.swing.GroupLayout(R2_13);
        R2_13.setLayout(R2_13Layout);
        R2_13Layout.setHorizontalGroup(
            R2_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_13Layout.setVerticalGroup(
            R2_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_12Layout = new javax.swing.GroupLayout(R2_12);
        R2_12.setLayout(R2_12Layout);
        R2_12Layout.setHorizontalGroup(
            R2_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_12Layout.setVerticalGroup(
            R2_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_11Layout = new javax.swing.GroupLayout(R2_11);
        R2_11.setLayout(R2_11Layout);
        R2_11Layout.setHorizontalGroup(
            R2_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_11Layout.setVerticalGroup(
            R2_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_10Layout = new javax.swing.GroupLayout(R2_10);
        R2_10.setLayout(R2_10Layout);
        R2_10Layout.setHorizontalGroup(
            R2_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_10Layout.setVerticalGroup(
            R2_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_9Layout = new javax.swing.GroupLayout(R2_9);
        R2_9.setLayout(R2_9Layout);
        R2_9Layout.setHorizontalGroup(
            R2_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_9Layout.setVerticalGroup(
            R2_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_8Layout = new javax.swing.GroupLayout(R2_8);
        R2_8.setLayout(R2_8Layout);
        R2_8Layout.setHorizontalGroup(
            R2_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_8Layout.setVerticalGroup(
            R2_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_7Layout = new javax.swing.GroupLayout(R2_7);
        R2_7.setLayout(R2_7Layout);
        R2_7Layout.setHorizontalGroup(
            R2_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_7Layout.setVerticalGroup(
            R2_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_6Layout = new javax.swing.GroupLayout(R2_6);
        R2_6.setLayout(R2_6Layout);
        R2_6Layout.setHorizontalGroup(
            R2_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_6Layout.setVerticalGroup(
            R2_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_5Layout = new javax.swing.GroupLayout(R2_5);
        R2_5.setLayout(R2_5Layout);
        R2_5Layout.setHorizontalGroup(
            R2_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_5Layout.setVerticalGroup(
            R2_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_4Layout = new javax.swing.GroupLayout(R2_4);
        R2_4.setLayout(R2_4Layout);
        R2_4Layout.setHorizontalGroup(
            R2_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_4Layout.setVerticalGroup(
            R2_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_3Layout = new javax.swing.GroupLayout(R2_3);
        R2_3.setLayout(R2_3Layout);
        R2_3Layout.setHorizontalGroup(
            R2_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_3Layout.setVerticalGroup(
            R2_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_2Layout = new javax.swing.GroupLayout(R2_2);
        R2_2.setLayout(R2_2Layout);
        R2_2Layout.setHorizontalGroup(
            R2_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_2Layout.setVerticalGroup(
            R2_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_1Layout = new javax.swing.GroupLayout(R2_1);
        R2_1.setLayout(R2_1Layout);
        R2_1Layout.setHorizontalGroup(
            R2_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_1Layout.setVerticalGroup(
            R2_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R2_0Layout = new javax.swing.GroupLayout(R2_0);
        R2_0.setLayout(R2_0Layout);
        R2_0Layout.setHorizontalGroup(
            R2_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R2_0Layout.setVerticalGroup(
            R2_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_R2.setText("LD");
        Load_R2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_R2ActionPerformed(evt);
            }
        });

        jLabel_MBR.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_MBR.setText("MBR");

        javax.swing.GroupLayout MBR_15Layout = new javax.swing.GroupLayout(MBR_15);
        MBR_15.setLayout(MBR_15Layout);
        MBR_15Layout.setHorizontalGroup(
            MBR_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_15Layout.setVerticalGroup(
            MBR_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_14Layout = new javax.swing.GroupLayout(MBR_14);
        MBR_14.setLayout(MBR_14Layout);
        MBR_14Layout.setHorizontalGroup(
            MBR_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_14Layout.setVerticalGroup(
            MBR_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_13Layout = new javax.swing.GroupLayout(MBR_13);
        MBR_13.setLayout(MBR_13Layout);
        MBR_13Layout.setHorizontalGroup(
            MBR_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_13Layout.setVerticalGroup(
            MBR_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_12Layout = new javax.swing.GroupLayout(MBR_12);
        MBR_12.setLayout(MBR_12Layout);
        MBR_12Layout.setHorizontalGroup(
            MBR_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_12Layout.setVerticalGroup(
            MBR_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_11Layout = new javax.swing.GroupLayout(MBR_11);
        MBR_11.setLayout(MBR_11Layout);
        MBR_11Layout.setHorizontalGroup(
            MBR_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_11Layout.setVerticalGroup(
            MBR_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_10Layout = new javax.swing.GroupLayout(MBR_10);
        MBR_10.setLayout(MBR_10Layout);
        MBR_10Layout.setHorizontalGroup(
            MBR_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_10Layout.setVerticalGroup(
            MBR_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_9Layout = new javax.swing.GroupLayout(MBR_9);
        MBR_9.setLayout(MBR_9Layout);
        MBR_9Layout.setHorizontalGroup(
            MBR_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_9Layout.setVerticalGroup(
            MBR_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_8Layout = new javax.swing.GroupLayout(MBR_8);
        MBR_8.setLayout(MBR_8Layout);
        MBR_8Layout.setHorizontalGroup(
            MBR_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_8Layout.setVerticalGroup(
            MBR_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_7Layout = new javax.swing.GroupLayout(MBR_7);
        MBR_7.setLayout(MBR_7Layout);
        MBR_7Layout.setHorizontalGroup(
            MBR_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_7Layout.setVerticalGroup(
            MBR_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_6Layout = new javax.swing.GroupLayout(MBR_6);
        MBR_6.setLayout(MBR_6Layout);
        MBR_6Layout.setHorizontalGroup(
            MBR_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_6Layout.setVerticalGroup(
            MBR_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_5Layout = new javax.swing.GroupLayout(MBR_5);
        MBR_5.setLayout(MBR_5Layout);
        MBR_5Layout.setHorizontalGroup(
            MBR_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_5Layout.setVerticalGroup(
            MBR_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_4Layout = new javax.swing.GroupLayout(MBR_4);
        MBR_4.setLayout(MBR_4Layout);
        MBR_4Layout.setHorizontalGroup(
            MBR_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_4Layout.setVerticalGroup(
            MBR_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_3Layout = new javax.swing.GroupLayout(MBR_3);
        MBR_3.setLayout(MBR_3Layout);
        MBR_3Layout.setHorizontalGroup(
            MBR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_3Layout.setVerticalGroup(
            MBR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_2Layout = new javax.swing.GroupLayout(MBR_2);
        MBR_2.setLayout(MBR_2Layout);
        MBR_2Layout.setHorizontalGroup(
            MBR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_2Layout.setVerticalGroup(
            MBR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_1Layout = new javax.swing.GroupLayout(MBR_1);
        MBR_1.setLayout(MBR_1Layout);
        MBR_1Layout.setHorizontalGroup(
            MBR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_1Layout.setVerticalGroup(
            MBR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MBR_0Layout = new javax.swing.GroupLayout(MBR_0);
        MBR_0.setLayout(MBR_0Layout);
        MBR_0Layout.setHorizontalGroup(
            MBR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MBR_0Layout.setVerticalGroup(
            MBR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_MBR.setText("LD");
        Load_MBR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_MBRActionPerformed(evt);
            }
        });

        jLabel_R3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_R3.setText("R3");

        javax.swing.GroupLayout R3_15Layout = new javax.swing.GroupLayout(R3_15);
        R3_15.setLayout(R3_15Layout);
        R3_15Layout.setHorizontalGroup(
            R3_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_15Layout.setVerticalGroup(
            R3_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_14Layout = new javax.swing.GroupLayout(R3_14);
        R3_14.setLayout(R3_14Layout);
        R3_14Layout.setHorizontalGroup(
            R3_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_14Layout.setVerticalGroup(
            R3_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_13Layout = new javax.swing.GroupLayout(R3_13);
        R3_13.setLayout(R3_13Layout);
        R3_13Layout.setHorizontalGroup(
            R3_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_13Layout.setVerticalGroup(
            R3_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_12Layout = new javax.swing.GroupLayout(R3_12);
        R3_12.setLayout(R3_12Layout);
        R3_12Layout.setHorizontalGroup(
            R3_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_12Layout.setVerticalGroup(
            R3_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_11Layout = new javax.swing.GroupLayout(R3_11);
        R3_11.setLayout(R3_11Layout);
        R3_11Layout.setHorizontalGroup(
            R3_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_11Layout.setVerticalGroup(
            R3_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_9Layout = new javax.swing.GroupLayout(R3_9);
        R3_9.setLayout(R3_9Layout);
        R3_9Layout.setHorizontalGroup(
            R3_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_9Layout.setVerticalGroup(
            R3_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_10Layout = new javax.swing.GroupLayout(R3_10);
        R3_10.setLayout(R3_10Layout);
        R3_10Layout.setHorizontalGroup(
            R3_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_10Layout.setVerticalGroup(
            R3_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_8Layout = new javax.swing.GroupLayout(R3_8);
        R3_8.setLayout(R3_8Layout);
        R3_8Layout.setHorizontalGroup(
            R3_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_8Layout.setVerticalGroup(
            R3_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_7Layout = new javax.swing.GroupLayout(R3_7);
        R3_7.setLayout(R3_7Layout);
        R3_7Layout.setHorizontalGroup(
            R3_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_7Layout.setVerticalGroup(
            R3_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_6Layout = new javax.swing.GroupLayout(R3_6);
        R3_6.setLayout(R3_6Layout);
        R3_6Layout.setHorizontalGroup(
            R3_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_6Layout.setVerticalGroup(
            R3_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_5Layout = new javax.swing.GroupLayout(R3_5);
        R3_5.setLayout(R3_5Layout);
        R3_5Layout.setHorizontalGroup(
            R3_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_5Layout.setVerticalGroup(
            R3_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_4Layout = new javax.swing.GroupLayout(R3_4);
        R3_4.setLayout(R3_4Layout);
        R3_4Layout.setHorizontalGroup(
            R3_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_4Layout.setVerticalGroup(
            R3_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_3Layout = new javax.swing.GroupLayout(R3_3);
        R3_3.setLayout(R3_3Layout);
        R3_3Layout.setHorizontalGroup(
            R3_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_3Layout.setVerticalGroup(
            R3_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_2Layout = new javax.swing.GroupLayout(R3_2);
        R3_2.setLayout(R3_2Layout);
        R3_2Layout.setHorizontalGroup(
            R3_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_2Layout.setVerticalGroup(
            R3_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_1Layout = new javax.swing.GroupLayout(R3_1);
        R3_1.setLayout(R3_1Layout);
        R3_1Layout.setHorizontalGroup(
            R3_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_1Layout.setVerticalGroup(
            R3_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout R3_0Layout = new javax.swing.GroupLayout(R3_0);
        R3_0.setLayout(R3_0Layout);
        R3_0Layout.setHorizontalGroup(
            R3_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        R3_0Layout.setVerticalGroup(
            R3_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_R3.setText("LD");
        Load_R3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_R3ActionPerformed(evt);
            }
        });

        Store.setText("Store");
        Store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StoreActionPerformed(evt);
            }
        });

        Store_plus.setText("St+");
        Store_plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Store_plusActionPerformed(evt);
            }
        });

        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        IPL.setBackground(new java.awt.Color(255, 153, 0));
        IPL.setText("IPL");
        IPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPLActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        OP_15.setText("15");
        OP_15.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        OP_15.setIconTextGap(2);
        OP_15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OP_15ActionPerformed(evt);
            }
        });

        OP_14.setText("14");
        OP_14.setIconTextGap(2);
        OP_14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OP_14ActionPerformed(evt);
            }
        });

        OP_13.setText("13");
        OP_13.setIconTextGap(2);
        OP_13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OP_13ActionPerformed(evt);
            }
        });

        OP_12.setText("12");
        OP_12.setIconTextGap(2);
        OP_12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OP_12ActionPerformed(evt);
            }
        });

        OP_11.setText("11");
        OP_11.setIconTextGap(2);
        OP_11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OP_11ActionPerformed(evt);
            }
        });

        OP_10.setText("10");
        OP_10.setIconTextGap(2);
        OP_10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OP_10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OP_15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OP_14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OP_13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OP_12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OP_11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OP_10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OP_15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OP_14, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OP_13, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OP_12, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OP_11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OP_10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        GPR_9.setText(" 9 ");
        GPR_9.setIconTextGap(2);
        GPR_9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GPR_9ActionPerformed(evt);
            }
        });

        GPR_8.setText(" 8 ");
        GPR_8.setIconTextGap(2);
        GPR_8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GPR_8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GPR_9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GPR_8)
                .addGap(43, 43, 43))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GPR_9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GPR_8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        IXR_7.setText(" 7 ");
        IXR_7.setIconTextGap(2);
        IXR_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IXR_7ActionPerformed(evt);
            }
        });

        IXR_6.setText(" 6 ");
        IXR_6.setIconTextGap(2);
        IXR_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IXR_6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IXR_7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IXR_6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IXR_7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IXR_6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        I_5.setText(" 5 ");
        I_5.setIconTextGap(2);
        I_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                I_5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(I_5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(I_5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));

        ADDRESS_4.setText(" 4 ");
        ADDRESS_4.setIconTextGap(2);
        ADDRESS_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESS_4ActionPerformed(evt);
            }
        });

        ADDRESS_3.setText(" 3 ");
        ADDRESS_3.setIconTextGap(2);
        ADDRESS_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESS_3ActionPerformed(evt);
            }
        });

        ADDRESS_2.setText(" 2 ");
        ADDRESS_2.setIconTextGap(2);
        ADDRESS_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESS_2ActionPerformed(evt);
            }
        });

        ADDRESS_1.setText(" 1 ");
        ADDRESS_1.setIconTextGap(2);
        ADDRESS_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESS_1ActionPerformed(evt);
            }
        });

        ADDRESS_0.setText(" 0 ");
        ADDRESS_0.setIconTextGap(2);
        ADDRESS_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDRESS_0ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ADDRESS_4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ADDRESS_3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ADDRESS_2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ADDRESS_1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ADDRESS_0)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ADDRESS_4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADDRESS_3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADDRESS_2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADDRESS_1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADDRESS_0, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel_Operation.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Operation.setText("OPERATION");

        jLabel_GPR.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_GPR.setText("GPR");

        jLabel_IXR.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_IXR.setText("IXR");

        jLabel_I.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_I.setText("I");

        jLabel_Address.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Address.setText("ADDRESS");

        jLabel_Halt.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Halt.setText("HALT");

        jLabel_Run.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Run.setText("RUN");

        SS.setText("SS");
        SS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSActionPerformed(evt);
            }
        });

        Run.setText("RUN");
        Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunActionPerformed(evt);
            }
        });

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));
        jPanel7.setOpaque(false);

        jLabel_IR.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_IR.setText("IR");

        javax.swing.GroupLayout IR_15Layout = new javax.swing.GroupLayout(IR_15);
        IR_15.setLayout(IR_15Layout);
        IR_15Layout.setHorizontalGroup(
            IR_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_15Layout.setVerticalGroup(
            IR_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_14Layout = new javax.swing.GroupLayout(IR_14);
        IR_14.setLayout(IR_14Layout);
        IR_14Layout.setHorizontalGroup(
            IR_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_14Layout.setVerticalGroup(
            IR_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_13Layout = new javax.swing.GroupLayout(IR_13);
        IR_13.setLayout(IR_13Layout);
        IR_13Layout.setHorizontalGroup(
            IR_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_13Layout.setVerticalGroup(
            IR_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_12Layout = new javax.swing.GroupLayout(IR_12);
        IR_12.setLayout(IR_12Layout);
        IR_12Layout.setHorizontalGroup(
            IR_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_12Layout.setVerticalGroup(
            IR_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_11Layout = new javax.swing.GroupLayout(IR_11);
        IR_11.setLayout(IR_11Layout);
        IR_11Layout.setHorizontalGroup(
            IR_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_11Layout.setVerticalGroup(
            IR_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_10Layout = new javax.swing.GroupLayout(IR_10);
        IR_10.setLayout(IR_10Layout);
        IR_10Layout.setHorizontalGroup(
            IR_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_10Layout.setVerticalGroup(
            IR_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_9Layout = new javax.swing.GroupLayout(IR_9);
        IR_9.setLayout(IR_9Layout);
        IR_9Layout.setHorizontalGroup(
            IR_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_9Layout.setVerticalGroup(
            IR_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_8Layout = new javax.swing.GroupLayout(IR_8);
        IR_8.setLayout(IR_8Layout);
        IR_8Layout.setHorizontalGroup(
            IR_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_8Layout.setVerticalGroup(
            IR_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_7Layout = new javax.swing.GroupLayout(IR_7);
        IR_7.setLayout(IR_7Layout);
        IR_7Layout.setHorizontalGroup(
            IR_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_7Layout.setVerticalGroup(
            IR_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_6Layout = new javax.swing.GroupLayout(IR_6);
        IR_6.setLayout(IR_6Layout);
        IR_6Layout.setHorizontalGroup(
            IR_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_6Layout.setVerticalGroup(
            IR_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_5Layout = new javax.swing.GroupLayout(IR_5);
        IR_5.setLayout(IR_5Layout);
        IR_5Layout.setHorizontalGroup(
            IR_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_5Layout.setVerticalGroup(
            IR_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_4Layout = new javax.swing.GroupLayout(IR_4);
        IR_4.setLayout(IR_4Layout);
        IR_4Layout.setHorizontalGroup(
            IR_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_4Layout.setVerticalGroup(
            IR_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_3Layout = new javax.swing.GroupLayout(IR_3);
        IR_3.setLayout(IR_3Layout);
        IR_3Layout.setHorizontalGroup(
            IR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_3Layout.setVerticalGroup(
            IR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_2Layout = new javax.swing.GroupLayout(IR_2);
        IR_2.setLayout(IR_2Layout);
        IR_2Layout.setHorizontalGroup(
            IR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_2Layout.setVerticalGroup(
            IR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_1Layout = new javax.swing.GroupLayout(IR_1);
        IR_1.setLayout(IR_1Layout);
        IR_1Layout.setHorizontalGroup(
            IR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_1Layout.setVerticalGroup(
            IR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout IR_0Layout = new javax.swing.GroupLayout(IR_0);
        IR_0.setLayout(IR_0Layout);
        IR_0Layout.setHorizontalGroup(
            IR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        IR_0Layout.setVerticalGroup(
            IR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_IR.setText("LD");
        Load_IR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_IRActionPerformed(evt);
            }
        });

        jLabel_MFR.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_MFR.setText("MFR");

        javax.swing.GroupLayout MFR_3Layout = new javax.swing.GroupLayout(MFR_3);
        MFR_3.setLayout(MFR_3Layout);
        MFR_3Layout.setHorizontalGroup(
            MFR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MFR_3Layout.setVerticalGroup(
            MFR_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MFR_2Layout = new javax.swing.GroupLayout(MFR_2);
        MFR_2.setLayout(MFR_2Layout);
        MFR_2Layout.setHorizontalGroup(
            MFR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MFR_2Layout.setVerticalGroup(
            MFR_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MFR_1Layout = new javax.swing.GroupLayout(MFR_1);
        MFR_1.setLayout(MFR_1Layout);
        MFR_1Layout.setHorizontalGroup(
            MFR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MFR_1Layout.setVerticalGroup(
            MFR_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MFR_0Layout = new javax.swing.GroupLayout(MFR_0);
        MFR_0.setLayout(MFR_0Layout);
        MFR_0Layout.setHorizontalGroup(
            MFR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        MFR_0Layout.setVerticalGroup(
            MFR_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jLabel_CC.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_CC.setText("CC");

        javax.swing.GroupLayout CC_3Layout = new javax.swing.GroupLayout(CC_3);
        CC_3.setLayout(CC_3Layout);
        CC_3Layout.setHorizontalGroup(
            CC_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        CC_3Layout.setVerticalGroup(
            CC_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CC_2Layout = new javax.swing.GroupLayout(CC_2);
        CC_2.setLayout(CC_2Layout);
        CC_2Layout.setHorizontalGroup(
            CC_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        CC_2Layout.setVerticalGroup(
            CC_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CC_1Layout = new javax.swing.GroupLayout(CC_1);
        CC_1.setLayout(CC_1Layout);
        CC_1Layout.setHorizontalGroup(
            CC_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        CC_1Layout.setVerticalGroup(
            CC_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CC_0Layout = new javax.swing.GroupLayout(CC_0);
        CC_0.setLayout(CC_0Layout);
        CC_0Layout.setHorizontalGroup(
            CC_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        CC_0Layout.setVerticalGroup(
            CC_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );

        jLabel_R4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_R4.setText("FR0");

        javax.swing.GroupLayout FR0_15Layout = new javax.swing.GroupLayout(FR0_15);
        FR0_15.setLayout(FR0_15Layout);
        FR0_15Layout.setHorizontalGroup(
            FR0_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_15Layout.setVerticalGroup(
            FR0_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_14Layout = new javax.swing.GroupLayout(FR0_14);
        FR0_14.setLayout(FR0_14Layout);
        FR0_14Layout.setHorizontalGroup(
            FR0_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_14Layout.setVerticalGroup(
            FR0_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_13Layout = new javax.swing.GroupLayout(FR0_13);
        FR0_13.setLayout(FR0_13Layout);
        FR0_13Layout.setHorizontalGroup(
            FR0_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_13Layout.setVerticalGroup(
            FR0_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_12Layout = new javax.swing.GroupLayout(FR0_12);
        FR0_12.setLayout(FR0_12Layout);
        FR0_12Layout.setHorizontalGroup(
            FR0_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_12Layout.setVerticalGroup(
            FR0_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_11Layout = new javax.swing.GroupLayout(FR0_11);
        FR0_11.setLayout(FR0_11Layout);
        FR0_11Layout.setHorizontalGroup(
            FR0_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_11Layout.setVerticalGroup(
            FR0_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_10Layout = new javax.swing.GroupLayout(FR0_10);
        FR0_10.setLayout(FR0_10Layout);
        FR0_10Layout.setHorizontalGroup(
            FR0_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_10Layout.setVerticalGroup(
            FR0_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_9Layout = new javax.swing.GroupLayout(FR0_9);
        FR0_9.setLayout(FR0_9Layout);
        FR0_9Layout.setHorizontalGroup(
            FR0_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_9Layout.setVerticalGroup(
            FR0_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_8Layout = new javax.swing.GroupLayout(FR0_8);
        FR0_8.setLayout(FR0_8Layout);
        FR0_8Layout.setHorizontalGroup(
            FR0_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_8Layout.setVerticalGroup(
            FR0_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_7Layout = new javax.swing.GroupLayout(FR0_7);
        FR0_7.setLayout(FR0_7Layout);
        FR0_7Layout.setHorizontalGroup(
            FR0_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_7Layout.setVerticalGroup(
            FR0_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_6Layout = new javax.swing.GroupLayout(FR0_6);
        FR0_6.setLayout(FR0_6Layout);
        FR0_6Layout.setHorizontalGroup(
            FR0_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_6Layout.setVerticalGroup(
            FR0_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_5Layout = new javax.swing.GroupLayout(FR0_5);
        FR0_5.setLayout(FR0_5Layout);
        FR0_5Layout.setHorizontalGroup(
            FR0_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_5Layout.setVerticalGroup(
            FR0_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_4Layout = new javax.swing.GroupLayout(FR0_4);
        FR0_4.setLayout(FR0_4Layout);
        FR0_4Layout.setHorizontalGroup(
            FR0_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_4Layout.setVerticalGroup(
            FR0_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_3Layout = new javax.swing.GroupLayout(FR0_3);
        FR0_3.setLayout(FR0_3Layout);
        FR0_3Layout.setHorizontalGroup(
            FR0_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_3Layout.setVerticalGroup(
            FR0_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_2Layout = new javax.swing.GroupLayout(FR0_2);
        FR0_2.setLayout(FR0_2Layout);
        FR0_2Layout.setHorizontalGroup(
            FR0_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_2Layout.setVerticalGroup(
            FR0_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_1Layout = new javax.swing.GroupLayout(FR0_1);
        FR0_1.setLayout(FR0_1Layout);
        FR0_1Layout.setHorizontalGroup(
            FR0_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_1Layout.setVerticalGroup(
            FR0_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR0_0Layout = new javax.swing.GroupLayout(FR0_0);
        FR0_0.setLayout(FR0_0Layout);
        FR0_0Layout.setHorizontalGroup(
            FR0_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR0_0Layout.setVerticalGroup(
            FR0_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_FR0.setText("LD");
        Load_FR0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_FR0ActionPerformed(evt);
            }
        });

        jLabel_R5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_R5.setText("FR1");

        javax.swing.GroupLayout FR1_15Layout = new javax.swing.GroupLayout(FR1_15);
        FR1_15.setLayout(FR1_15Layout);
        FR1_15Layout.setHorizontalGroup(
            FR1_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_15Layout.setVerticalGroup(
            FR1_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_14Layout = new javax.swing.GroupLayout(FR1_14);
        FR1_14.setLayout(FR1_14Layout);
        FR1_14Layout.setHorizontalGroup(
            FR1_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_14Layout.setVerticalGroup(
            FR1_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_13Layout = new javax.swing.GroupLayout(FR1_13);
        FR1_13.setLayout(FR1_13Layout);
        FR1_13Layout.setHorizontalGroup(
            FR1_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_13Layout.setVerticalGroup(
            FR1_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_12Layout = new javax.swing.GroupLayout(FR1_12);
        FR1_12.setLayout(FR1_12Layout);
        FR1_12Layout.setHorizontalGroup(
            FR1_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_12Layout.setVerticalGroup(
            FR1_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_11Layout = new javax.swing.GroupLayout(FR1_11);
        FR1_11.setLayout(FR1_11Layout);
        FR1_11Layout.setHorizontalGroup(
            FR1_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_11Layout.setVerticalGroup(
            FR1_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_10Layout = new javax.swing.GroupLayout(FR1_10);
        FR1_10.setLayout(FR1_10Layout);
        FR1_10Layout.setHorizontalGroup(
            FR1_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_10Layout.setVerticalGroup(
            FR1_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_9Layout = new javax.swing.GroupLayout(FR1_9);
        FR1_9.setLayout(FR1_9Layout);
        FR1_9Layout.setHorizontalGroup(
            FR1_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_9Layout.setVerticalGroup(
            FR1_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_8Layout = new javax.swing.GroupLayout(FR1_8);
        FR1_8.setLayout(FR1_8Layout);
        FR1_8Layout.setHorizontalGroup(
            FR1_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_8Layout.setVerticalGroup(
            FR1_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_7Layout = new javax.swing.GroupLayout(FR1_7);
        FR1_7.setLayout(FR1_7Layout);
        FR1_7Layout.setHorizontalGroup(
            FR1_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_7Layout.setVerticalGroup(
            FR1_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_6Layout = new javax.swing.GroupLayout(FR1_6);
        FR1_6.setLayout(FR1_6Layout);
        FR1_6Layout.setHorizontalGroup(
            FR1_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_6Layout.setVerticalGroup(
            FR1_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_5Layout = new javax.swing.GroupLayout(FR1_5);
        FR1_5.setLayout(FR1_5Layout);
        FR1_5Layout.setHorizontalGroup(
            FR1_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_5Layout.setVerticalGroup(
            FR1_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_4Layout = new javax.swing.GroupLayout(FR1_4);
        FR1_4.setLayout(FR1_4Layout);
        FR1_4Layout.setHorizontalGroup(
            FR1_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_4Layout.setVerticalGroup(
            FR1_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_3Layout = new javax.swing.GroupLayout(FR1_3);
        FR1_3.setLayout(FR1_3Layout);
        FR1_3Layout.setHorizontalGroup(
            FR1_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_3Layout.setVerticalGroup(
            FR1_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_2Layout = new javax.swing.GroupLayout(FR1_2);
        FR1_2.setLayout(FR1_2Layout);
        FR1_2Layout.setHorizontalGroup(
            FR1_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_2Layout.setVerticalGroup(
            FR1_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_1Layout = new javax.swing.GroupLayout(FR1_1);
        FR1_1.setLayout(FR1_1Layout);
        FR1_1Layout.setHorizontalGroup(
            FR1_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_1Layout.setVerticalGroup(
            FR1_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout FR1_0Layout = new javax.swing.GroupLayout(FR1_0);
        FR1_0.setLayout(FR1_0Layout);
        FR1_0Layout.setHorizontalGroup(
            FR1_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        FR1_0Layout.setVerticalGroup(
            FR1_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_FR1.setText("LD");
        Load_FR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_FR1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel_IR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(IR_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IR_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Load_IR, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel_MFR)
                                .addGap(18, 18, 18)
                                .addComponent(MFR_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MFR_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MFR_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MFR_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel_CC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CC_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CC_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CC_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CC_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(66, 66, 66))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel_R5)
                                .addGap(26, 26, 26)
                                .addComponent(FR1_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR1_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel_R4)
                                .addGap(26, 26, 26)
                                .addComponent(FR0_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FR0_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Load_FR1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Load_FR0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_IR)
                    .addComponent(IR_15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IR_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Load_IR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MFR_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel_MFR))
                    .addComponent(MFR_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MFR_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MFR_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CC_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_CC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CC_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CC_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CC_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_R4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Load_FR0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR0_0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_R5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Load_FR1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FR1_0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout X1_15Layout = new javax.swing.GroupLayout(X1_15);
        X1_15.setLayout(X1_15Layout);
        X1_15Layout.setHorizontalGroup(
            X1_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_15Layout.setVerticalGroup(
            X1_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_14Layout = new javax.swing.GroupLayout(X1_14);
        X1_14.setLayout(X1_14Layout);
        X1_14Layout.setHorizontalGroup(
            X1_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_14Layout.setVerticalGroup(
            X1_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_13Layout = new javax.swing.GroupLayout(X1_13);
        X1_13.setLayout(X1_13Layout);
        X1_13Layout.setHorizontalGroup(
            X1_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_13Layout.setVerticalGroup(
            X1_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_12Layout = new javax.swing.GroupLayout(X1_12);
        X1_12.setLayout(X1_12Layout);
        X1_12Layout.setHorizontalGroup(
            X1_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_12Layout.setVerticalGroup(
            X1_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_11Layout = new javax.swing.GroupLayout(X1_11);
        X1_11.setLayout(X1_11Layout);
        X1_11Layout.setHorizontalGroup(
            X1_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_11Layout.setVerticalGroup(
            X1_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_10Layout = new javax.swing.GroupLayout(X1_10);
        X1_10.setLayout(X1_10Layout);
        X1_10Layout.setHorizontalGroup(
            X1_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_10Layout.setVerticalGroup(
            X1_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_9Layout = new javax.swing.GroupLayout(X1_9);
        X1_9.setLayout(X1_9Layout);
        X1_9Layout.setHorizontalGroup(
            X1_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_9Layout.setVerticalGroup(
            X1_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_8Layout = new javax.swing.GroupLayout(X1_8);
        X1_8.setLayout(X1_8Layout);
        X1_8Layout.setHorizontalGroup(
            X1_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_8Layout.setVerticalGroup(
            X1_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_7Layout = new javax.swing.GroupLayout(X1_7);
        X1_7.setLayout(X1_7Layout);
        X1_7Layout.setHorizontalGroup(
            X1_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_7Layout.setVerticalGroup(
            X1_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_6Layout = new javax.swing.GroupLayout(X1_6);
        X1_6.setLayout(X1_6Layout);
        X1_6Layout.setHorizontalGroup(
            X1_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_6Layout.setVerticalGroup(
            X1_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_5Layout = new javax.swing.GroupLayout(X1_5);
        X1_5.setLayout(X1_5Layout);
        X1_5Layout.setHorizontalGroup(
            X1_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_5Layout.setVerticalGroup(
            X1_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_4Layout = new javax.swing.GroupLayout(X1_4);
        X1_4.setLayout(X1_4Layout);
        X1_4Layout.setHorizontalGroup(
            X1_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_4Layout.setVerticalGroup(
            X1_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_3Layout = new javax.swing.GroupLayout(X1_3);
        X1_3.setLayout(X1_3Layout);
        X1_3Layout.setHorizontalGroup(
            X1_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_3Layout.setVerticalGroup(
            X1_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_2Layout = new javax.swing.GroupLayout(X1_2);
        X1_2.setLayout(X1_2Layout);
        X1_2Layout.setHorizontalGroup(
            X1_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_2Layout.setVerticalGroup(
            X1_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_1Layout = new javax.swing.GroupLayout(X1_1);
        X1_1.setLayout(X1_1Layout);
        X1_1Layout.setHorizontalGroup(
            X1_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_1Layout.setVerticalGroup(
            X1_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X1_0Layout = new javax.swing.GroupLayout(X1_0);
        X1_0.setLayout(X1_0Layout);
        X1_0Layout.setHorizontalGroup(
            X1_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X1_0Layout.setVerticalGroup(
            X1_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_X1.setText("LD");
        Load_X1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_X1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout X2_12Layout = new javax.swing.GroupLayout(X2_12);
        X2_12.setLayout(X2_12Layout);
        X2_12Layout.setHorizontalGroup(
            X2_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_12Layout.setVerticalGroup(
            X2_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_3Layout = new javax.swing.GroupLayout(X2_3);
        X2_3.setLayout(X2_3Layout);
        X2_3Layout.setHorizontalGroup(
            X2_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_3Layout.setVerticalGroup(
            X2_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_2Layout = new javax.swing.GroupLayout(X2_2);
        X2_2.setLayout(X2_2Layout);
        X2_2Layout.setHorizontalGroup(
            X2_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_2Layout.setVerticalGroup(
            X2_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_15Layout = new javax.swing.GroupLayout(X2_15);
        X2_15.setLayout(X2_15Layout);
        X2_15Layout.setHorizontalGroup(
            X2_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_15Layout.setVerticalGroup(
            X2_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_5Layout = new javax.swing.GroupLayout(X2_5);
        X2_5.setLayout(X2_5Layout);
        X2_5Layout.setHorizontalGroup(
            X2_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_5Layout.setVerticalGroup(
            X2_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_X2.setText("LD");
        Load_X2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_X2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout X2_7Layout = new javax.swing.GroupLayout(X2_7);
        X2_7.setLayout(X2_7Layout);
        X2_7Layout.setHorizontalGroup(
            X2_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_7Layout.setVerticalGroup(
            X2_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_14Layout = new javax.swing.GroupLayout(X2_14);
        X2_14.setLayout(X2_14Layout);
        X2_14Layout.setHorizontalGroup(
            X2_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_14Layout.setVerticalGroup(
            X2_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_6Layout = new javax.swing.GroupLayout(X2_6);
        X2_6.setLayout(X2_6Layout);
        X2_6Layout.setHorizontalGroup(
            X2_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_6Layout.setVerticalGroup(
            X2_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_8Layout = new javax.swing.GroupLayout(X2_8);
        X2_8.setLayout(X2_8Layout);
        X2_8Layout.setHorizontalGroup(
            X2_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_8Layout.setVerticalGroup(
            X2_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_4Layout = new javax.swing.GroupLayout(X2_4);
        X2_4.setLayout(X2_4Layout);
        X2_4Layout.setHorizontalGroup(
            X2_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_4Layout.setVerticalGroup(
            X2_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_1Layout = new javax.swing.GroupLayout(X2_1);
        X2_1.setLayout(X2_1Layout);
        X2_1Layout.setHorizontalGroup(
            X2_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_1Layout.setVerticalGroup(
            X2_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_10Layout = new javax.swing.GroupLayout(X2_10);
        X2_10.setLayout(X2_10Layout);
        X2_10Layout.setHorizontalGroup(
            X2_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_10Layout.setVerticalGroup(
            X2_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_13Layout = new javax.swing.GroupLayout(X2_13);
        X2_13.setLayout(X2_13Layout);
        X2_13Layout.setHorizontalGroup(
            X2_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_13Layout.setVerticalGroup(
            X2_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_11Layout = new javax.swing.GroupLayout(X2_11);
        X2_11.setLayout(X2_11Layout);
        X2_11Layout.setHorizontalGroup(
            X2_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_11Layout.setVerticalGroup(
            X2_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_9Layout = new javax.swing.GroupLayout(X2_9);
        X2_9.setLayout(X2_9Layout);
        X2_9Layout.setHorizontalGroup(
            X2_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_9Layout.setVerticalGroup(
            X2_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_12Layout = new javax.swing.GroupLayout(X3_12);
        X3_12.setLayout(X3_12Layout);
        X3_12Layout.setHorizontalGroup(
            X3_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_12Layout.setVerticalGroup(
            X3_12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_3Layout = new javax.swing.GroupLayout(X3_3);
        X3_3.setLayout(X3_3Layout);
        X3_3Layout.setHorizontalGroup(
            X3_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_3Layout.setVerticalGroup(
            X3_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_2Layout = new javax.swing.GroupLayout(X3_2);
        X3_2.setLayout(X3_2Layout);
        X3_2Layout.setHorizontalGroup(
            X3_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_2Layout.setVerticalGroup(
            X3_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_15Layout = new javax.swing.GroupLayout(X3_15);
        X3_15.setLayout(X3_15Layout);
        X3_15Layout.setHorizontalGroup(
            X3_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_15Layout.setVerticalGroup(
            X3_15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_5Layout = new javax.swing.GroupLayout(X3_5);
        X3_5.setLayout(X3_5Layout);
        X3_5Layout.setHorizontalGroup(
            X3_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_5Layout.setVerticalGroup(
            X3_5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Load_X3.setText("LD");
        Load_X3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_X3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout X3_7Layout = new javax.swing.GroupLayout(X3_7);
        X3_7.setLayout(X3_7Layout);
        X3_7Layout.setHorizontalGroup(
            X3_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_7Layout.setVerticalGroup(
            X3_7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_14Layout = new javax.swing.GroupLayout(X3_14);
        X3_14.setLayout(X3_14Layout);
        X3_14Layout.setHorizontalGroup(
            X3_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_14Layout.setVerticalGroup(
            X3_14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_6Layout = new javax.swing.GroupLayout(X3_6);
        X3_6.setLayout(X3_6Layout);
        X3_6Layout.setHorizontalGroup(
            X3_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_6Layout.setVerticalGroup(
            X3_6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_8Layout = new javax.swing.GroupLayout(X3_8);
        X3_8.setLayout(X3_8Layout);
        X3_8Layout.setHorizontalGroup(
            X3_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_8Layout.setVerticalGroup(
            X3_8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_4Layout = new javax.swing.GroupLayout(X3_4);
        X3_4.setLayout(X3_4Layout);
        X3_4Layout.setHorizontalGroup(
            X3_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_4Layout.setVerticalGroup(
            X3_4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_1Layout = new javax.swing.GroupLayout(X3_1);
        X3_1.setLayout(X3_1Layout);
        X3_1Layout.setHorizontalGroup(
            X3_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_1Layout.setVerticalGroup(
            X3_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_10Layout = new javax.swing.GroupLayout(X3_10);
        X3_10.setLayout(X3_10Layout);
        X3_10Layout.setHorizontalGroup(
            X3_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_10Layout.setVerticalGroup(
            X3_10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_13Layout = new javax.swing.GroupLayout(X3_13);
        X3_13.setLayout(X3_13Layout);
        X3_13Layout.setHorizontalGroup(
            X3_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_13Layout.setVerticalGroup(
            X3_13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_11Layout = new javax.swing.GroupLayout(X3_11);
        X3_11.setLayout(X3_11Layout);
        X3_11Layout.setHorizontalGroup(
            X3_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_11Layout.setVerticalGroup(
            X3_11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_9Layout = new javax.swing.GroupLayout(X3_9);
        X3_9.setLayout(X3_9Layout);
        X3_9Layout.setHorizontalGroup(
            X3_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_9Layout.setVerticalGroup(
            X3_9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X2_0Layout = new javax.swing.GroupLayout(X2_0);
        X2_0.setLayout(X2_0Layout);
        X2_0Layout.setHorizontalGroup(
            X2_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X2_0Layout.setVerticalGroup(
            X2_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout X3_0Layout = new javax.swing.GroupLayout(X3_0);
        X3_0.setLayout(X3_0Layout);
        X3_0Layout.setHorizontalGroup(
            X3_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        X3_0Layout.setVerticalGroup(
            X3_0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addComponent(X2_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X2_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(Load_X2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addComponent(X1_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(X1_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(Load_X1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(X3_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(X3_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Load_X3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Load_X1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X1_0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Load_X2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X2_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Load_X3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(X3_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel_X1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel_X1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_X1.setText("X1");

        jLabel_X2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel_X2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_X2.setText("X2");

        jLabel_X3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel_X3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_X3.setText("X3");

        javax.swing.GroupLayout Run_DisplayLayout = new javax.swing.GroupLayout(Run_Display);
        Run_Display.setLayout(Run_DisplayLayout);
        Run_DisplayLayout.setHorizontalGroup(
            Run_DisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        Run_DisplayLayout.setVerticalGroup(
            Run_DisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout Halt_DisplayLayout = new javax.swing.GroupLayout(Halt_Display);
        Halt_Display.setLayout(Halt_DisplayLayout);
        Halt_DisplayLayout.setHorizontalGroup(
            Halt_DisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );
        Halt_DisplayLayout.setVerticalGroup(
            Halt_DisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        Clear_LEDs.setText("Clear LEDs");
        Clear_LEDs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_LEDsActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 204, 0));
        jButton1.setText("Custom IPL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Phase2.setBackground(new java.awt.Color(0, 0, 0));

        JLabel_Keyboard.setForeground(new java.awt.Color(255, 255, 255));
        JLabel_Keyboard.setText("Keyboard");

        JLabel_Printer.setForeground(new java.awt.Color(255, 255, 255));
        JLabel_Printer.setText("Printer");

        jLabel_Cache.setForeground(new java.awt.Color(255, 255, 255));
        jLabel_Cache.setText("Cache");

        KeyBoard.setColumns(20);
        KeyBoard.setRows(5);
        KeyBoard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                KeyBoardKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                KeyBoardKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(KeyBoard);

        Printer.setColumns(20);
        Printer.setLineWrap(true);
        Printer.setRows(5);
        Printer.setEnabled(false);
        jScrollPane2.setViewportView(Printer);

        CacheArea.setBackground(new java.awt.Color(153, 153, 153));
        CacheArea.setToolTipText("");

        jLabel1.setText("Line#");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tag");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Value");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Tag");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Value");

        jLabel_Tag0.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag0.setText("0");

        Tag_0.setText("------------");

        Value_0.setText("----------------");

        jLabel_Tag8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag8.setText("8");

        Tag_8.setText("------------");

        Value_8.setText("----------------");

        jLabel_Tag1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag1.setText("1");

        Tag_1.setText("------------");

        Value_1.setText("----------------");

        jLabel_Tag9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag9.setText("9");

        Tag_9.setText("------------");

        Value_9.setText("----------------");

        jLabel_Tag2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag2.setText("2");

        Tag_2.setText("------------");

        Value_2.setText("----------------");

        jLabel_Tag10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag10.setText("10");

        Tag_10.setText("------------");

        Value_10.setText("----------------");

        jLabel_Tag3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag3.setText("3");

        Tag_3.setText("------------");

        Value_3.setText("----------------");

        jLabel_Tag11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag11.setText("11");

        Tag_11.setText("------------");

        Value_11.setText("----------------");

        jLabel_Tag4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag4.setText("4");

        Tag_4.setText("------------");

        Value_4.setText("----------------");

        jLabel_Tag12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag12.setText("12");

        Tag_12.setText("------------");

        Value_12.setText("----------------");

        jLabel_Tag5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag5.setText("5");

        Tag_5.setText("------------");

        Value_5.setText("----------------");

        jLabel_Tag13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag13.setText("13");

        Tag_13.setText("------------");

        Value_13.setText("----------------");

        jLabel_Tag6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag6.setText("6");

        Tag_6.setText("------------");

        Value_6.setText("----------------");

        jLabel_Tag14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag14.setText("14");

        Tag_14.setText("------------");

        Value_14.setText("----------------");

        jLabel_Tag7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag7.setText("7");

        Tag_7.setText("------------");

        Value_7.setText("----------------");

        jLabel_Tag15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_Tag15.setText("15");

        Tag_15.setText("------------");

        Value_15.setText("----------------");

        jLabel7.setText("Line#");

        javax.swing.GroupLayout CacheAreaLayout = new javax.swing.GroupLayout(CacheArea);
        CacheArea.setLayout(CacheAreaLayout);
        CacheAreaLayout.setHorizontalGroup(
            CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CacheAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_7))
                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_6))
                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_14, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_13, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_15, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(CacheAreaLayout.createSequentialGroup()
                                        .addComponent(jLabel_Tag2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Tag_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Value_2))
                                    .addGroup(CacheAreaLayout.createSequentialGroup()
                                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel_Tag0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                                    .addComponent(Tag_0, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                                .addComponent(jLabel_Tag1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Tag_1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(Value_0, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                            .addComponent(Value_1))))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_4)
                                .addGap(23, 23, 23))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel_Tag3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tag_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Value_3)
                                .addGap(24, 24, 24)))
                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CacheAreaLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(CacheAreaLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel_Tag8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel_Tag9, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel_Tag10, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel_Tag11, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(CacheAreaLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel_Tag12)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(CacheAreaLayout.createSequentialGroup()
                                        .addComponent(Tag_8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Value_8, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                                        .addComponent(Tag_9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Value_9, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(CacheAreaLayout.createSequentialGroup()
                                        .addComponent(Tag_10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Value_10, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CacheAreaLayout.createSequentialGroup()
                                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Tag_12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Tag_11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Value_12, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Value_11, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addContainerGap())
        );
        CacheAreaLayout.setVerticalGroup(
            CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CacheAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag0)
                    .addComponent(Tag_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag8)
                    .addComponent(Tag_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag1)
                    .addComponent(Tag_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag9)
                    .addComponent(Tag_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag2)
                    .addComponent(Tag_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag10)
                    .addComponent(Tag_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Value_3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel_Tag3)
                        .addComponent(Tag_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel_Tag11)
                        .addComponent(Tag_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Value_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag4)
                    .addComponent(Tag_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag12)
                    .addComponent(Tag_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag5)
                    .addComponent(Tag_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag13)
                    .addComponent(Tag_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag6)
                    .addComponent(Tag_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag14)
                    .addComponent(Tag_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CacheAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Tag7)
                    .addComponent(Tag_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Tag15)
                    .addComponent(Tag_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Value_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Console Log");

        ConsoleLog.setEditable(false);
        ConsoleLog.setColumns(20);
        ConsoleLog.setRows(5);
        jScrollPane3.setViewportView(ConsoleLog);

        javax.swing.GroupLayout Phase2Layout = new javax.swing.GroupLayout(Phase2);
        Phase2.setLayout(Phase2Layout);
        Phase2Layout.setHorizontalGroup(
            Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Phase2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JLabel_Keyboard)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JLabel_Printer)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_Cache)
                    .addComponent(CacheArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        Phase2Layout.setVerticalGroup(
            Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Phase2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLabel_Keyboard)
                    .addComponent(JLabel_Printer)
                    .addComponent(jLabel_Cache))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Phase2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CacheArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(Phase2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3))
                    .addComponent(jScrollPane2))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        Run_Program_1.setBackground(new java.awt.Color(0, 204, 255));
        Run_Program_1.setText("Load Program 1");
        Run_Program_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Run_Program_1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InputLayout = new javax.swing.GroupLayout(Input);
        Input.setLayout(InputLayout);
        InputLayout.setHorizontalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 24, Short.MAX_VALUE)
        );
        InputLayout.setVerticalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("INPUT");

        Run_Program_2.setBackground(new java.awt.Color(0, 204, 255));
        Run_Program_2.setText("Load Program 2");
        Run_Program_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Run_Program_2ActionPerformed(evt);
            }
        });

        Run_Vector_Program.setBackground(new java.awt.Color(0, 204, 255));
        Run_Vector_Program.setText("Load Vector Program");
        Run_Vector_Program.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Run_Vector_ProgramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Phase2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jLabel_Operation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_GPR)
                        .addGap(101, 101, 101)
                        .addComponent(jLabel_IXR)
                        .addGap(42, 42, 42)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel_I)
                        .addGap(136, 136, 136)
                        .addComponent(jLabel_Address))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(189, 189, 189)
                                .addComponent(SS, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Run, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_R1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_R0, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_R2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_R3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_X1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_X2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_X3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(R2_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(R3_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(R2_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R2_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(R3_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(R3_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(R2_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Load_R2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(R3_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(Load_R3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(130, 130, 130)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel_MBR)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MBR_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MBR_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Load_MBR, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(R1_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R1_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Load_R1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel_MAR))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(R0_15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R0_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Load_R0, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(245, 245, 245)
                                        .addComponent(jLabel_PC)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PC_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PC_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(MAR_11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MAR_10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PC_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PC_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(MAR_9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MAR_8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PC_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PC_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(MAR_7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MAR_6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PC_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PC_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(MAR_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MAR_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PC_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PC_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(MAR_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MAR_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(PC_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(PC_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(MAR_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(MAR_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Load_PC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Load_MAR, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Clear_LEDs, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Store)
                                .addGap(37, 37, 37)
                                .addComponent(Store_plus)))
                        .addGap(41, 41, 41)
                        .addComponent(Load)
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(IPL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Run_Program_1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(82, 82, 82)
                                .addComponent(Run_Program_2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Run_Vector_Program, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(233, 233, 233)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel_Run)
                                .addGap(23, 23, 23)
                                .addComponent(Run_Display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel_Halt)
                                .addGap(18, 18, 18)
                                .addComponent(Halt_Display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(R0_15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel_R0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Load_PC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PC_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Load_R0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_PC))
                    .addComponent(R0_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R0_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_R1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Load_MAR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MAR_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Load_R1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_MAR))
                    .addComponent(R1_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(R1_15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(R2_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Load_R2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel_MBR))
                        .addComponent(R2_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MBR_0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Load_MBR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(R2_15, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                    .addComponent(jLabel_R2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel_R3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Load_R3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(R3_0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel_X1)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel_X2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel_X3)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Operation)
                    .addComponent(jLabel_GPR)
                    .addComponent(jLabel_IXR)
                    .addComponent(jLabel_I)
                    .addComponent(jLabel_Address))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_Halt)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Store)
                                .addComponent(Store_plus)
                                .addComponent(Load)
                                .addComponent(IPL)
                                .addComponent(SS, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Run, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Run_Program_1)
                                .addComponent(Run_Vector_Program)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_Run)
                                    .addComponent(Run_Display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Run_Program_2)
                                    .addComponent(jButton1)))))
                    .addComponent(Halt_Display, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 6, Short.MAX_VALUE)
                .addComponent(Clear_LEDs)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Phase2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void Reset_Toggle_Instruction(){    //Reset Input Instruction Toggle Buttons to Initial value
        OP_15.setSelected(false);
        OP_14.setSelected(false);
        OP_13.setSelected(false);
        OP_12.setSelected(false);
        OP_11.setSelected(false);
        OP_10.setSelected(false);
        GPR_9.setSelected(false);
        GPR_8.setSelected(false);
        IXR_7.setSelected(false);
        IXR_6.setSelected(false);
        I_5.setSelected(false);
        ADDRESS_4.setSelected(false);
        ADDRESS_3.setSelected(false);
        ADDRESS_2.setSelected(false);
        ADDRESS_1.setSelected(false);
        ADDRESS_0.setSelected(false);
        OP_15.setBackground(Color.white);	
        OP_14.setBackground(Color.white);	
        OP_13.setBackground(Color.white);	
        I_5.setBackground(Color.white);	
        OP_12.setBackground(Color.white);	
        OP_11.setBackground(Color.white);	
        OP_10.setBackground(Color.white);	
        GPR_9.setBackground(Color.white);	
        GPR_8.setBackground(Color.white);	
        IXR_7.setBackground(Color.white);	
        IXR_6.setBackground(Color.white);	
        ADDRESS_4.setBackground(Color.white);	
        ADDRESS_3.setBackground(Color.white);	
        ADDRESS_2.setBackground(Color.white);	
        ADDRESS_1.setBackground(Color.white);	
        ADDRESS_0.setBackground(Color.white);
    }
    
    private void Clear(){    //Clear LEDs
        PC_0.setBackground(Color.decode("#F2F2F2"));
        PC_1.setBackground(Color.decode("#F2F2F2"));
        PC_2.setBackground(Color.decode("#F2F2F2"));
        PC_3.setBackground(Color.decode("#F2F2F2"));
        PC_4.setBackground(Color.decode("#F2F2F2"));
        PC_5.setBackground(Color.decode("#F2F2F2"));
        PC_6.setBackground(Color.decode("#F2F2F2"));
        PC_7.setBackground(Color.decode("#F2F2F2"));
        PC_8.setBackground(Color.decode("#F2F2F2"));
        PC_9.setBackground(Color.decode("#F2F2F2"));
        PC_10.setBackground(Color.decode("#F2F2F2"));
        PC_11.setBackground(Color.decode("#F2F2F2"));
        MAR_0.setBackground(Color.decode("#F2F2F2"));
        MAR_1.setBackground(Color.decode("#F2F2F2"));
        MAR_2.setBackground(Color.decode("#F2F2F2"));
        MAR_3.setBackground(Color.decode("#F2F2F2"));
        MAR_4.setBackground(Color.decode("#F2F2F2"));
        MAR_5.setBackground(Color.decode("#F2F2F2"));
        MAR_6.setBackground(Color.decode("#F2F2F2"));
        MAR_7.setBackground(Color.decode("#F2F2F2"));
        MAR_8.setBackground(Color.decode("#F2F2F2"));
        MAR_9.setBackground(Color.decode("#F2F2F2"));
        MAR_10.setBackground(Color.decode("#F2F2F2"));
        MAR_11.setBackground(Color.decode("#F2F2F2"));
        MBR_0.setBackground(Color.decode("#F2F2F2"));
        MBR_1.setBackground(Color.decode("#F2F2F2"));
        MBR_2.setBackground(Color.decode("#F2F2F2"));
        MBR_3.setBackground(Color.decode("#F2F2F2"));
        MBR_4.setBackground(Color.decode("#F2F2F2"));
        MBR_5.setBackground(Color.decode("#F2F2F2"));
        MBR_6.setBackground(Color.decode("#F2F2F2"));
        MBR_7.setBackground(Color.decode("#F2F2F2"));
        MBR_8.setBackground(Color.decode("#F2F2F2"));
        MBR_9.setBackground(Color.decode("#F2F2F2"));
        MBR_10.setBackground(Color.decode("#F2F2F2"));
        MBR_11.setBackground(Color.decode("#F2F2F2"));
        MBR_12.setBackground(Color.decode("#F2F2F2"));
        MBR_13.setBackground(Color.decode("#F2F2F2"));
        MBR_14.setBackground(Color.decode("#F2F2F2"));
        MBR_15.setBackground(Color.decode("#F2F2F2"));
        IR_0.setBackground(Color.decode("#F2F2F2"));
        IR_1.setBackground(Color.decode("#F2F2F2"));
        IR_2.setBackground(Color.decode("#F2F2F2"));
        IR_3.setBackground(Color.decode("#F2F2F2"));
        IR_4.setBackground(Color.decode("#F2F2F2"));
        IR_5.setBackground(Color.decode("#F2F2F2"));
        IR_6.setBackground(Color.decode("#F2F2F2"));
        IR_7.setBackground(Color.decode("#F2F2F2"));
        IR_8.setBackground(Color.decode("#F2F2F2"));
        IR_9.setBackground(Color.decode("#F2F2F2"));
        IR_10.setBackground(Color.decode("#F2F2F2"));
        IR_11.setBackground(Color.decode("#F2F2F2"));
        IR_12.setBackground(Color.decode("#F2F2F2"));
        IR_13.setBackground(Color.decode("#F2F2F2"));
        IR_14.setBackground(Color.decode("#F2F2F2"));
        Reset_Toggle_Instruction();
        Halt_Display.setBackground(Color.decode("#F2F2F2"));
    }
    
    private boolean IsSignBitSet(short value){
        return value<0;
    }
    
    
    
    private short getExponent(short value){
        String value_binary = Integer.toBinaryString(value);
        String exponent_binary="";
        short sign = 1;
        if(value_binary.length()==16){
            if(value_binary.charAt(1)=='1'){
                sign = -1;
            }
            exponent_binary+=value_binary.substring(2,8);
        }
        else if(value_binary.length()==15){
            if(value_binary.charAt(0)=='1'){
                sign = -1;
            }
            exponent_binary+=value_binary.substring(1,7);
        }        
        else if(value_binary.length()==14){
            exponent_binary+=value_binary.substring(0,6);
        }        
        else if(value_binary.length()==13){
            exponent_binary+=value_binary.substring(0,5);
        }
        else if(value_binary.length()==12){
            exponent_binary+=value_binary.substring(0,4);
        }
        else if(value_binary.length()==11){
            exponent_binary+=value_binary.substring(0,3);
        }
        else if(value_binary.length()==10){
            exponent_binary+=value_binary.substring(0,2);
        }
        else if(value_binary.length()==9){
            exponent_binary+=value_binary.substring(0,1);
        }        
        else{
            exponent_binary="0";
        }
        System.out.println("getExponent of "+value_binary+" :"+(sign*Integer.parseInt(exponent_binary,2)));
        return (short) (sign*Integer.parseInt(exponent_binary,2));
    }
    
    public double convertToFloat(int content) {
        double number;

        String bits = String.format("%16S", Integer.toBinaryString(content).replace(' ', '0'));
        bits = bits.replace(' ', '0');

        int S_Bit = Integer.parseInt(bits.substring(0, 1), 2);
        int Exponent = Integer.parseInt(bits.substring(1, 8), 2) - 63;
        int Mantissa = Integer.parseInt(bits.substring(8), 2);

        number = Mantissa * Math.pow(10, Exponent);

        if (S_Bit == 0)
        {
            number = 0 - number;
        }

//        System.out.println(convertToFloat("33538"));   // Sting 1100001100000010

        return number;
    }
    
    private short getMantissa(short value){
        String value_binary = Integer.toBinaryString(value);
        String exponent_binary="";
        if(value_binary.length()>=8){
            exponent_binary+=value_binary.substring(value_binary.length()-8,value_binary.length());
        }
        else if(value_binary.length()>=7){
            exponent_binary+=value_binary.substring(value_binary.length()-7,value_binary.length());
        }        
        else if(value_binary.length()>=6){
            exponent_binary+=value_binary.substring(value_binary.length()-6,value_binary.length());
        }        
        else if(value_binary.length()>=5){
            exponent_binary+=value_binary.substring(value_binary.length()-5,value_binary.length());
        }
        else if(value_binary.length()>=4){
            exponent_binary+=value_binary.substring(value_binary.length()-4,value_binary.length());
        }
        else if(value_binary.length()>=3){
            exponent_binary+=value_binary.substring(value_binary.length()-3,value_binary.length());
        }
        else if(value_binary.length()>=2){
            exponent_binary+=value_binary.substring(value_binary.length()-2,value_binary.length());
        }
        else if(value_binary.length()>=1){
            exponent_binary+=value_binary.substring(value_binary.length()-1,value_binary.length());
        }
        else{
            exponent_binary+='0';
        }
        System.out.println("getMantissa of "+value_binary+" :"+Integer.parseInt(exponent_binary,2));
        return (short) (Integer.parseInt(exponent_binary,2));
    }
    
    private float getFloatVal(short value){
        float floatingVal = (float) ((float) Math.pow(getMantissa(value),getExponent(value)));
        if(IsSignBitSet(value)){
            return -1*floatingVal;
        }
        else{
            return floatingVal;
        }
    }
    
    public static double toDouble(String str)
    {
        double mantissa=0;
        double exp=0;
        for(int x=0; x<str.indexOf(" "); x++)
        {
            if(str.substring(x,x+1).equals("1") && x==0)
                mantissa-=1;
            else if(str.substring(x,x+1).equals("1"))
                mantissa+=Math.pow(2,-x);
        }
        str=str.substring(str.indexOf(" ")+1);
        for(int x=0; x<str.length(); x++)
        {
            if(str.substring(x,x+1).equals("1") && x==0)
                exp+= -Math.pow(2,str.length()-1);
            else if(str.substring(x,x+1).equals("1"))
                exp+=Math.pow(2,str.length()-1-x);
        }
        return mantissa*Math.pow(2,exp);
    }
    
    public static String toDecimalBinary(String num)
    {
        String ans="";
        int temp=Integer.parseInt(num);
        int count=(int)Math.pow(2, -num.length());
        Stack<Integer> s=new Stack<Integer>();
        for(int x=count; x>=0; x-=Math.pow(2, -x))
        {
            if(temp-Math.pow(2, -x)>=0)
            {
                temp-=Math.pow(2, -x);
                s.push(1);
            }
            else
                s.push(0);
        }
        while(s.size()>0)
            ans+=s.pop();
        return ans;
    }
    
    public static String toMatissaExponent(double val, int m, int e)
    {
       String ans=""+val;
       String exp="";
       int expNum=0;
       if(val>0)
       {
           expNum=Integer.toBinaryString(Integer.parseInt(ans.substring(0,ans.indexOf(".")))).length();
           //if(Integer.parseInt(ans.substring(ans.indexOf(".")+1)) != 0)
               ans=Integer.toBinaryString(Integer.parseInt(ans.substring(0,ans.indexOf("."))))+toDecimalBinary(ans.substring(ans.indexOf(".")+1));
           /*else
               ans=Integer.toBinaryString(Integer.parseInt(ans.substring(0,ans.indexOf("."))));*/
           ans="0"+ans;
           if(ans.length()>m)
               return "np";
           while(ans.length()<m)
               ans="0"+ans;
           exp=Integer.toBinaryString(expNum);
           if(exp.length()>e)
               return "np";
           while(exp.length()<e)
               exp="0"+exp;
       }
       else if(val<0)
       {
           ans=""+Math.abs(val);
           expNum=Integer.toBinaryString(Integer.parseInt(ans.substring(0,ans.indexOf(".")))).length();
           ans=Integer.toBinaryString(Integer.parseInt(ans.substring(0,ans.indexOf("."))))+toDecimalBinary(ans.substring(ans.indexOf(".")+1));
           ans="0"+ans;
           String temp="";
           for(int x=0; x<ans.length(); x++)
           {
               if(ans.substring(x,x+1).equals("1"))
                   temp+="0";
               else
                   temp+="1";
           }
           ans=Integer.toBinaryString((int)toDouble(temp)+1);
           if(ans.length()>m)
               return "np";
           while(ans.length()<m)
               ans="0"+ans;
           exp=Integer.toBinaryString(expNum);
           if(exp.length()>e)
               return "np";
           while(exp.length()<e)
               exp="0"+exp;
       }
       else if(val==0)
       {
           for(int x=0; x<m; x++)
               ans+="0";
           for(int x=0; x<e; x++)
               exp+="0";
       }
       System.out.println("toMatissaExponent : "+exp + ans);
       return exp + ans;
    }
    
    private short convertToShort1(float number){
        if(number<0){
            String val = "0"+toMatissaExponent(number,8,7);
            return (short) Integer.parseInt(val, 2);
        }
        else{
            String val = "1"+toMatissaExponent(number,8,7);
            return (short) Integer.parseInt(val, 2);
        }
    }
    
    public int getIntValofFloat(double number)
    {
        String s = String.valueOf(number);
        int n = s.length();

        StringBuilder num_string = new StringBuilder();
        int i, j, exponent, c;

        for (i = 0; s.charAt(i) == '0' || s.charAt(i) == '.'; i++)
            ;
        for (j = n - 1; s.charAt(j) == '0' || s.charAt(j) == '.'; j--)
            ;

        c = s.indexOf('.');

        if (c == -1) {
            c = n;
        }

        num_string.append(s.charAt(i));

        if (i != j) {
            num_string.append('.');
        }

        for (int k = i + 1; k <= j; k++) {
            if (s.charAt(k) != '.') {
                num_string.append(s.charAt(k));
            }
        }

        if (i < c) {
            exponent = c - i - 1;
        }
        else {
            exponent = c - i;
        }

        i = 0;
        StringBuilder new_num_string = new StringBuilder();


        while (true)
        {

            if (num_string.charAt(i) != '.')
            {
                new_num_string.append(num_string.charAt(i));
            }

            if (new_num_string.length() == 3)
            {
                break;
            }

            i++;
        }

        exponent = exponent - 2;


        int mantissa = Integer.parseInt(new_num_string.toString());

        if (mantissa > 255)
        {
            mantissa = Integer.parseInt(String.valueOf(mantissa).substring(0, 2));
            exponent++;
        }





        String Final_Num_Bin = "";

        if (number < 0)
        {
            Final_Num_Bin = Final_Num_Bin + "0";
        }
        else
        {
            Final_Num_Bin = Final_Num_Bin + "1";
        }


        if (exponent == 0)
        {
            Final_Num_Bin = Final_Num_Bin + "0000000";
        } else if (exponent > 0) {
            Final_Num_Bin = Final_Num_Bin + String.format("%7S", Integer.toBinaryString(64 + exponent).replace(' ', '0'));
        } else if (exponent < 0) {
            Final_Num_Bin = Final_Num_Bin + "0";
            Final_Num_Bin = Final_Num_Bin + String.format("%6S", Integer.toBinaryString(64 - Math.abs(exponent)).replace(' ', '0'));
        }


        Final_Num_Bin = Final_Num_Bin + String.format("%8S", Integer.toBinaryString(mantissa).replace(' ', '0'));
        Final_Num_Bin = Final_Num_Bin.substring(Final_Num_Bin.length()-16);

        return Integer.parseInt(Final_Num_Bin, 2);
    }
    
    @SuppressWarnings("empty-statement")
    private short convertToShort12(float number){
        String s = String.valueOf(number);
        System.out.println("String.valueOf(number) "+s);
        int n = s.length();
        System.out.println("n "+n);

        StringBuilder num_string = new StringBuilder();
        int i, j, exponent, c;

        for (i = 0; s.charAt(i) == '0' || s.charAt(i) == '.'; i++)
            System.out.println("i loop ");
        for (j = n - 1; s.charAt(j) == '0' || s.charAt(j) == '.'; j--)
            System.out.println("j loop ");

        c = s.indexOf('.');
        System.out.println("c "+c);

        if (c == -1) {
            c = n;
            System.out.println("c == -1 "+c);
        }

        num_string.append(s.charAt(i));
        System.out.println("num_string 1 "+num_string);
        System.out.println("i "+i);
        System.out.println("j "+j);

        if (i != j) {
            num_string.append('.');
            System.out.println("num_string 2 "+num_string);
        }

        for (int k = i + 1; k <= j; k++) {
            if (s.charAt(k) != '.') {
                num_string.append(s.charAt(k));
                System.out.println("num_string 3 "+num_string);
            }
        }

        if (i < c) {
            exponent = c - i - 1;
                System.out.println("exponent1 "+exponent);
        }
        else {
            exponent = c - i;
                System.out.println("exponent2 "+exponent);
        }

        i = 0;
        StringBuilder new_num_string = new StringBuilder();

        while (true)
        {
            System.out.println("i "+i);
            System.out.println("new_num_string "+new_num_string);
            if(i==num_string.length())
                break;
            if (num_string.charAt(i) != '.')
            {
                new_num_string.append(num_string.charAt(i));
            }

            if (new_num_string.length() == 3)
            {
                break;
            }

            i++;
        }

        exponent = exponent - 2;
        System.out.println("exponent "+exponent);

        int mantissa = Integer.parseInt(new_num_string.toString());
        System.out.println("mantissa "+mantissa);

        if (mantissa > 255)
        {
            mantissa = Integer.parseInt(String.valueOf(mantissa).substring(0, 2));
            exponent++;
            System.out.println("mantissa 1 "+mantissa);
            System.out.println("exponent 1 "+exponent);
        }

        String Final_Num_Bin = "";

        if (number < 0)
        {
            Final_Num_Bin = Final_Num_Bin + "0";
            
            System.out.println("Final_Num_Bin 1 "+Final_Num_Bin);
        }
        else
        {
            Final_Num_Bin = Final_Num_Bin + "1";
            System.out.println("Final_Num_Bin 2 "+Final_Num_Bin);
        }

        if (exponent == 0)
        {
            Final_Num_Bin = Final_Num_Bin + "0000000";
            System.out.println("Final_Num_Bin 3 "+Final_Num_Bin);
        } else if (exponent > 0) {
            Final_Num_Bin = Final_Num_Bin + String.format("%7S", Integer.toBinaryString(64 + exponent).replace(' ', '0'));
            System.out.println("Final_Num_Bin 4 "+Final_Num_Bin);
        } else if (exponent < 0) {
            Final_Num_Bin = Final_Num_Bin + "0";
            System.out.println("Final_Num_Bin 5 "+Final_Num_Bin);
            Final_Num_Bin = Final_Num_Bin + String.format("%6S", Integer.toBinaryString(64 - Math.abs(exponent)).replace(' ', '0'));
            System.out.println("Final_Num_Bin 6 "+Final_Num_Bin);
        }

        Final_Num_Bin = Final_Num_Bin + String.format("%8S", Integer.toBinaryString(mantissa).replace(' ', '0'));
        System.out.println("Final_Num_Bin 7 "+Final_Num_Bin);
        System.out.println("getShort of "+number+" :"+Integer.parseInt(Final_Num_Bin,2));
        return (short) Integer.parseInt(Final_Num_Bin, 2);
    }
    
    private void Store_plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Store_plusActionPerformed
        memory[MAR] = MBR;
        
        MAR++;
        Clear();
        
        String MAR_binary = Integer.toBinaryString(MAR);
        
        if (MAR_binary.length()>=1 && MAR_binary.charAt(MAR_binary.length()-1)=='1'){
            MAR_0.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=2 && MAR_binary.charAt(MAR_binary.length()-2)=='1'){
            MAR_1.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=3 && MAR_binary.charAt(MAR_binary.length()-3)=='1'){
            MAR_2.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=4 && MAR_binary.charAt(MAR_binary.length()-4)=='1'){
            MAR_3.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=5 && MAR_binary.charAt(MAR_binary.length()-5)=='1'){
            MAR_4.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=6 && MAR_binary.charAt(MAR_binary.length()-6)=='1'){
            MAR_5.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=7 && MAR_binary.charAt(MAR_binary.length()-7)=='1'){
            MAR_6.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=8 && MAR_binary.charAt(MAR_binary.length()-8)=='1'){
            MAR_7.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=9 && MAR_binary.charAt(MAR_binary.length()-9)=='1'){
            MAR_8.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=10 && MAR_binary.charAt(MAR_binary.length()-10)=='1'){
            MAR_9.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=11 && MAR_binary.charAt(MAR_binary.length()-11)=='1'){
            MAR_10.setBackground(Color.yellow);
        }
        if (MAR_binary.length()>=12 && MAR_binary.charAt(MAR_binary.length()-12)=='1'){
            MAR_11.setBackground(Color.yellow);
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Store_plusActionPerformed

    private void StoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StoreActionPerformed
        memory[MAR] = MBR;
        Clear();
    }//GEN-LAST:event_StoreActionPerformed

    private void Load_MARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_MARActionPerformed
        MAR = 0;
        if (ADDRESS_0.isSelected()){
            MAR+=Math.pow(2,0);
            MAR_0.setBackground(Color.yellow);
        }
        else {
            MAR_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            MAR+=Math.pow(2,1);
            MAR_1.setBackground(Color.yellow);
        }
        else {
            MAR_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            MAR+=Math.pow(2,2);
            MAR_2.setBackground(Color.yellow);
        }
        else {
            MAR_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            MAR+=Math.pow(2,3);
            MAR_3.setBackground(Color.yellow);
        }
        else {
            MAR_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            MAR+=Math.pow(2,4);
            MAR_4.setBackground(Color.yellow);
        }
        else {
            MAR_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            MAR+=Math.pow(2,5);
            MAR_5.setBackground(Color.yellow);
        }
        else {
            MAR_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            MAR+=Math.pow(2,6);
            MAR_6.setBackground(Color.yellow);
        }
        else {
            MAR_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            MAR+=Math.pow(2,7);
            MAR_7.setBackground(Color.yellow);
        }
        else {
            MAR_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            MAR+=Math.pow(2,8);
            MAR_8.setBackground(Color.yellow);
        }
        else {
            MAR_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            MAR+=Math.pow(2,9);
            MAR_9.setBackground(Color.yellow);
        }
        else {
            MAR_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            MAR+=Math.pow(2,10);
            MAR_10.setBackground(Color.yellow);
        }
        else {
            MAR_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            MAR+=Math.pow(2,11);
            MAR_11.setBackground(Color.yellow);
        }
        else {
            MAR_11.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_MARActionPerformed

    private void Load_PCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_PCActionPerformed
        PC = 0;
        if (ADDRESS_0.isSelected()){
            PC+=Math.pow(2,0);
            PC_0.setBackground(Color.yellow);
        }
        else {
            PC_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            PC+=Math.pow(2,1);
            PC_1.setBackground(Color.yellow);
        }
        else {
            PC_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            PC+=Math.pow(2,2);
            PC_2.setBackground(Color.yellow);
        }
        else {
            PC_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            PC+=Math.pow(2,3);
            PC_3.setBackground(Color.yellow);
        }
        else {
            PC_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            PC+=Math.pow(2,4);
            PC_4.setBackground(Color.yellow);
        }
        else {
            PC_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            PC+=Math.pow(2,5);
            PC_5.setBackground(Color.yellow);
        }
        else {
            PC_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            PC+=Math.pow(2,6);
            PC_6.setBackground(Color.yellow);
        }
        else {
            PC_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            PC+=Math.pow(2,7);
            PC_7.setBackground(Color.yellow);
        }
        else {
            PC_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            PC+=Math.pow(2,8);
            PC_8.setBackground(Color.yellow);
        }
        else {
            PC_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            PC+=Math.pow(2,9);
            PC_9.setBackground(Color.yellow);
        }
        else {
            PC_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            PC+=Math.pow(2,10);
            PC_10.setBackground(Color.yellow);
        }
        else {
            PC_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            PC+=Math.pow(2,11);
            PC_11.setBackground(Color.yellow);
        }
        else {
            PC_11.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_PCActionPerformed

    private void Load_MBRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_MBRActionPerformed
        MBR = 0;
        if (ADDRESS_0.isSelected()){
            MBR+=Math.pow(2,0);
            MBR_0.setBackground(Color.yellow);
        }
        else {
            MBR_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            MBR+=Math.pow(2,1);
            MBR_1.setBackground(Color.yellow);
        }
        else {
            MBR_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            MBR+=Math.pow(2,2);
            MBR_2.setBackground(Color.yellow);
        }
        else {
            MBR_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            MBR+=Math.pow(2,3);
            MBR_3.setBackground(Color.yellow);
        }
        else {
            MBR_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            MBR+=Math.pow(2,4);
            MBR_4.setBackground(Color.yellow);
        }
        else {
            MBR_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            MBR+=Math.pow(2,5);
            MBR_5.setBackground(Color.yellow);
        }
        else {
            MBR_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            MBR+=Math.pow(2,6);
            MBR_6.setBackground(Color.yellow);
        }
        else {
            MBR_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            MBR+=Math.pow(2,7);
            MBR_7.setBackground(Color.yellow);
        }
        else {
            MBR_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            MBR+=Math.pow(2,8);
            MBR_8.setBackground(Color.yellow);
        }
        else {
            MBR_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            MBR+=Math.pow(2,9);
            MBR_9.setBackground(Color.yellow);
        }
        else {
            MBR_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            MBR+=Math.pow(2,10);
            MBR_10.setBackground(Color.yellow);
        }
        else {
            MBR_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            MBR+=Math.pow(2,11);
            MBR_11.setBackground(Color.yellow);
        }
        else {
            MBR_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            MBR+=Math.pow(2,12);
            MBR_12.setBackground(Color.yellow);
        }
        else {
            MBR_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            MBR+=Math.pow(2,13);
            MBR_13.setBackground(Color.yellow);
        }
        else {
            MBR_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            MBR+=Math.pow(2,14);
            MBR_14.setBackground(Color.yellow);
        }
        else {
            MBR_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            MBR+=Math.pow(2,15);
            MBR_15.setBackground(Color.yellow);
        }
        else {
            MBR_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_MBRActionPerformed

    private void Load_R0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_R0ActionPerformed
        R0 = 0;
        if (ADDRESS_0.isSelected()){
            R0_0.setBackground(Color.yellow);
            R0+=Math.pow(2,0);
        }
        else {
            R0_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            R0+=Math.pow(2,1);
            R0_1.setBackground(Color.yellow);
        }
        else {
            R0_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            R0+=Math.pow(2,2);
            R0_2.setBackground(Color.yellow);
        }
        else {
            R0_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            R0+=Math.pow(2,3);
            R0_3.setBackground(Color.yellow);
        }
        else {
            R0_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            R0+=Math.pow(2,4);
            R0_4.setBackground(Color.yellow);
        }
        else {
            R0_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            R0+=Math.pow(2,5);
            R0_5.setBackground(Color.yellow);
        }
        else {
            R0_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            R0+=Math.pow(2,6);
            R0_6.setBackground(Color.yellow);
        }
        else {
            R0_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            R0+=Math.pow(2,7);
            R0_7.setBackground(Color.yellow);
        }
        else {
            R0_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            R0+=Math.pow(2,8);
            R0_8.setBackground(Color.yellow);
        }
        else {
            R0_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            R0+=Math.pow(2,9);
            R0_9.setBackground(Color.yellow);
        }
        else {
            R0_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            R0+=Math.pow(2,10);
            R0_10.setBackground(Color.yellow);
        }
        else {
            R0_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            R0+=Math.pow(2,11);
            R0_11.setBackground(Color.yellow);
        }
        else {
            R0_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            R0+=Math.pow(2,12);
            R0_12.setBackground(Color.yellow);
        }
        else {
            R0_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            R0+=Math.pow(2,13);
            R0_13.setBackground(Color.yellow);
        }
        else {
            R0_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            R0+=Math.pow(2,14);
            R0_14.setBackground(Color.yellow);
        }
        else {
            R0_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            R0+=Math.pow(2,15);
            R0_15.setBackground(Color.yellow);
        }
        else {
            R0_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_R0ActionPerformed

    private void Load_R1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_R1ActionPerformed
        R1 = 0;
        if (ADDRESS_0.isSelected()){
            R1+=Math.pow(2,0);
            R1_0.setBackground(Color.yellow);
        }
        else {
            R1_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            R1+=Math.pow(2,1);
            R1_1.setBackground(Color.yellow);
        }
        else {
            R1_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            R1+=Math.pow(2,2);
            R1_2.setBackground(Color.yellow);
        }
        else {
            R1_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            R1+=Math.pow(2,3);
            R1_3.setBackground(Color.yellow);
        }
        else {
            R1_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            R1+=Math.pow(2,4);
            R1_4.setBackground(Color.yellow);
        }
        else {
            R1_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            R1+=Math.pow(2,5);
            R1_5.setBackground(Color.yellow);
        }
        else {
            R1_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            R1+=Math.pow(2,6);
            R1_6.setBackground(Color.yellow);
        }
        else {
            R1_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            R1+=Math.pow(2,7);
            R1_7.setBackground(Color.yellow);
        }
        else {
            R1_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            R1+=Math.pow(2,8);
            R1_8.setBackground(Color.yellow);
        }
        else {
            R1_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            R1+=Math.pow(2,9);
            R1_9.setBackground(Color.yellow);
        }
        else {
            R1_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            R1+=Math.pow(2,10);
            R1_10.setBackground(Color.yellow);
        }
        else {
            R1_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            R1+=Math.pow(2,11);
            R1_11.setBackground(Color.yellow);
        }
        else {
            R1_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            R1+=Math.pow(2,12);
            R1_12.setBackground(Color.yellow);
        }
        else {
            R1_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            R1+=Math.pow(2,13);
            R1_13.setBackground(Color.yellow);
        }
        else {
            R1_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            R1+=Math.pow(2,14);
            R1_14.setBackground(Color.yellow);
        }
        else {
            R1_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            R1+=Math.pow(2,15);
            R1_15.setBackground(Color.yellow);
        }
        else {
            R1_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_R1ActionPerformed

    private void Load_R2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_R2ActionPerformed
        R2 = 0;
        if (ADDRESS_0.isSelected()){
            R2+=Math.pow(2,0);
            R2_0.setBackground(Color.yellow);
        }
        else {
            R2_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            R2+=Math.pow(2,1);
            R2_1.setBackground(Color.yellow);
        }
        else {
            R2_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            R2+=Math.pow(2,2);
            R2_2.setBackground(Color.yellow);
        }
        else {
            R2_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            R2+=Math.pow(2,3);
            R2_3.setBackground(Color.yellow);
        }
        else {
            R2_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            R2+=Math.pow(2,4);
            R2_4.setBackground(Color.yellow);
        }
        else {
            R2_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            R2+=Math.pow(2,5);
            R2_5.setBackground(Color.yellow);
        }
        else {
            R2_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            R2+=Math.pow(2,6);
            R2_6.setBackground(Color.yellow);
        }
        else {
            R2_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            R2+=Math.pow(2,7);
            R2_7.setBackground(Color.yellow);
        }
        else {
            R2_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            R2+=Math.pow(2,8);
            R2_8.setBackground(Color.yellow);
        }
        else {
            R2_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            R2+=Math.pow(2,9);
            R2_9.setBackground(Color.yellow);
        }
        else {
            R2_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            R2+=Math.pow(2,10);
            R2_10.setBackground(Color.yellow);
        }
        else {
            R2_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            R2+=Math.pow(2,11);
            R2_11.setBackground(Color.yellow);
        }
        else {
            R2_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            R2+=Math.pow(2,12);
            R2_12.setBackground(Color.yellow);
        }
        else {
            R2_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            R2+=Math.pow(2,13);
            R2_13.setBackground(Color.yellow);
        }
        else {
            R2_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            R2+=Math.pow(2,14);
            R2_14.setBackground(Color.yellow);
        }
        else {
            R2_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            R2+=Math.pow(2,15);
            R2_15.setBackground(Color.yellow);
        }
        else {
            R2_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_R2ActionPerformed

    private void Load_R3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_R3ActionPerformed
        R3 = 0;
        if (ADDRESS_0.isSelected()){
            R3+=Math.pow(2,0);
            R3_0.setBackground(Color.yellow);
        }
        else {
            R3_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            R3+=Math.pow(2,1);
            R3_1.setBackground(Color.yellow);
        }
        else {
            R3_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            R3+=Math.pow(2,2);
            R3_2.setBackground(Color.yellow);
        }
        else {
            R3_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            R3+=Math.pow(2,3);
            R3_3.setBackground(Color.yellow);
        }
        else {
            R3_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            R3+=Math.pow(2,4);
            R3_4.setBackground(Color.yellow);
        }
        else {
            R3_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            R3+=Math.pow(2,5);
            R3_5.setBackground(Color.yellow);
        }
        else {
            R3_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            R3+=Math.pow(2,6);
            R3_6.setBackground(Color.yellow);
        }
        else {
            R3_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            R3+=Math.pow(2,7);
            R3_7.setBackground(Color.yellow);
        }
        else {
            R3_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            R3+=Math.pow(2,8);
            R3_8.setBackground(Color.yellow);
        }
        else {
            R3_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            R3+=Math.pow(2,9);
            R3_9.setBackground(Color.yellow);
        }
        else {
            R3_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            R3+=Math.pow(2,10);
            R3_10.setBackground(Color.yellow);
        }
        else {
            R3_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            R3+=Math.pow(2,11);
            R3_11.setBackground(Color.yellow);
        }
        else {
            R3_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            R3+=Math.pow(2,12);
            R3_12.setBackground(Color.yellow);
        }
        else {
            R3_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            R3+=Math.pow(2,13);
            R3_13.setBackground(Color.yellow);
        }
        else {
            R3_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            R3+=Math.pow(2,14);
            R3_14.setBackground(Color.yellow);
        }
        else {
            R3_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            R3+=Math.pow(2,15);
            R3_15.setBackground(Color.yellow);
        }
        else {
            R3_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_R3ActionPerformed

    private void Load_X1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_X1ActionPerformed
        X1 = 0;
        if (ADDRESS_0.isSelected()){
            X1+=Math.pow(2,0);
            X1_0.setBackground(Color.yellow);
        }
        else {
            X1_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            X1+=Math.pow(2,1);
            X1_1.setBackground(Color.yellow);
        }
        else {
            X1_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            X1+=Math.pow(2,2);
            X1_2.setBackground(Color.yellow);
        }
        else {
            X1_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            X1+=Math.pow(2,3);
            X1_3.setBackground(Color.yellow);
        }
        else {
            X1_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            X1+=Math.pow(2,4);
            X1_4.setBackground(Color.yellow);
        }
        else {
            X1_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            X1+=Math.pow(2,5);
            X1_5.setBackground(Color.yellow);
        }
        else {
            X1_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            X1+=Math.pow(2,6);
            X1_6.setBackground(Color.yellow);
        }
        else {
            X1_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            X1+=Math.pow(2,7);
            X1_7.setBackground(Color.yellow);
        }
        else {
            X1_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            X1+=Math.pow(2,8);
            X1_8.setBackground(Color.yellow);
        }
        else {
            X1_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            X1+=Math.pow(2,9);
            X1_9.setBackground(Color.yellow);
        }
        else {
            X1_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            X1+=Math.pow(2,10);
            X1_10.setBackground(Color.yellow);
        }
        else {
            X1_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            X1+=Math.pow(2,11);
            X1_11.setBackground(Color.yellow);
        }
        else {
            X1_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            X1+=Math.pow(2,12);
            X1_12.setBackground(Color.yellow);
        }
        else {
            X1_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            X1+=Math.pow(2,13);
            X1_13.setBackground(Color.yellow);
        }
        else {
            X1_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            X1+=Math.pow(2,14);
            X1_14.setBackground(Color.yellow);
        }
        else {
            X1_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            X1+=Math.pow(2,15);
            X1_15.setBackground(Color.yellow);
        }
        else {
            X1_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_X1ActionPerformed

    private void Load_X2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_X2ActionPerformed
        X2 = 0;
        if (ADDRESS_0.isSelected()){
            X2+=Math.pow(2,0);
            X2_0.setBackground(Color.yellow);
        }
        else {
            X2_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            X2+=Math.pow(2,1);
            X2_1.setBackground(Color.yellow);
        }
        else {
            X2_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            X2+=Math.pow(2,2);
            X2_2.setBackground(Color.yellow);
        }
        else {
            X2_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            X2+=Math.pow(2,3);
            X2_3.setBackground(Color.yellow);
        }
        else {
            X2_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            X2+=Math.pow(2,4);
            X2_4.setBackground(Color.yellow);
        }
        else {
            X2_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            X2+=Math.pow(2,5);
            X2_5.setBackground(Color.yellow);
        }
        else {
            X2_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            X2+=Math.pow(2,6);
            X2_6.setBackground(Color.yellow);
        }
        else {
            X2_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            X2+=Math.pow(2,7);
            X2_7.setBackground(Color.yellow);
        }
        else {
            X2_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            X2+=Math.pow(2,8);
            X2_8.setBackground(Color.yellow);
        }
        else {
            X2_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            X2+=Math.pow(2,9);
            X2_9.setBackground(Color.yellow);
        }
        else {
            X2_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            X2+=Math.pow(2,10);
            X2_10.setBackground(Color.yellow);
        }
        else {
            X2_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            X2+=Math.pow(2,11);
            X2_11.setBackground(Color.yellow);
        }
        else {
            X2_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            X2+=Math.pow(2,12);
            X2_12.setBackground(Color.yellow);
        }
        else {
            X2_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            X2+=Math.pow(2,13);
            X2_13.setBackground(Color.yellow);
        }
        else {
            X2_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            X2+=Math.pow(2,14);
            X2_14.setBackground(Color.yellow);
        }
        else {
            X2_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            X2+=Math.pow(2,15);
            X2_15.setBackground(Color.yellow);
        }
        else {
            X2_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_X2ActionPerformed

    private void Load_X3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_X3ActionPerformed
        X3 = 0;
        if (ADDRESS_0.isSelected()){
            X2+=Math.pow(2,0);
            X3_0.setBackground(Color.yellow);
        }
        else {
            X3_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            X2+=Math.pow(2,1);
            X3_1.setBackground(Color.yellow);
        }
        else {
            X3_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            X2+=Math.pow(2,2);
            X3_2.setBackground(Color.yellow);
        }
        else {
            X3_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            X2+=Math.pow(2,3);
            X3_3.setBackground(Color.yellow);
        }
        else {
            X3_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            X2+=Math.pow(2,4);
            X3_4.setBackground(Color.yellow);
        }
        else {
            X3_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            X2+=Math.pow(2,5);
            X3_5.setBackground(Color.yellow);
        }
        else {
            X3_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            X2+=Math.pow(2,6);
            X3_6.setBackground(Color.yellow);
        }
        else {
            X3_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            X2+=Math.pow(2,7);
            X3_7.setBackground(Color.yellow);
        }
        else {
            X3_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            X2+=Math.pow(2,8);
            X3_8.setBackground(Color.yellow);
        }
        else {
            X3_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            X2+=Math.pow(2,9);
            X3_9.setBackground(Color.yellow);
        }
        else {
            X3_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            X2+=Math.pow(2,10);
            X3_10.setBackground(Color.yellow);
        }
        else {
            X3_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            X2+=Math.pow(2,11);
            X3_11.setBackground(Color.yellow);
        }
        else {
            X3_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            X2+=Math.pow(2,12);
            X3_12.setBackground(Color.yellow);
        }
        else {
            X3_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            X2+=Math.pow(2,13);
            X3_13.setBackground(Color.yellow);
        }
        else {
            X3_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            X2+=Math.pow(2,14);
            X3_14.setBackground(Color.yellow);
        }
        else {
            X3_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            X2+=Math.pow(2,15);
            X3_15.setBackground(Color.yellow);
        }
        else {
            X3_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_X3ActionPerformed

    private void IPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPLActionPerformed
        File file = new File("./IPL.txt");
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        String st;
        try {
            short flag_PC = 0;
            while ((st = br.readLine()) != null)
            {
                String[] content = st.split(" ");
                int location = Integer.parseInt(content[0], 16); 
                int value = Integer.parseInt(content[1], 16); 
                memory[location] = (short) value;
                if( flag_PC == 0){
                    flag_PC++;
                    PC = (short) location;
                    Populate_PC();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_IPLActionPerformed

    private void Load_IRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_IRActionPerformed
        IR = 0;
        if (ADDRESS_0.isSelected()){
            IR+=Math.pow(2,0);
            IR_0.setBackground(Color.yellow);
        }
        else {
            IR_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            IR+=Math.pow(2,1);
            IR_1.setBackground(Color.yellow);
        }
        else {
            IR_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            IR+=Math.pow(2,2);
            IR_2.setBackground(Color.yellow);
        }
        else {
            IR_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            IR+=Math.pow(2,3);
            IR_3.setBackground(Color.yellow);
        }
        else {
            IR_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            IR+=Math.pow(2,4);
            IR_4.setBackground(Color.yellow);
        }
        else {
            IR_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            IR+=Math.pow(2,5);
            IR_5.setBackground(Color.yellow);
        }
        else {
            IR_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            IR+=Math.pow(2,6);
            IR_6.setBackground(Color.yellow);
        }
        else {
            IR_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            IR+=Math.pow(2,7);
            IR_7.setBackground(Color.yellow);
        }
        else {
            IR_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            IR+=Math.pow(2,8);
            IR_8.setBackground(Color.yellow);
        }
        else {
            IR_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            IR+=Math.pow(2,9);
            IR_9.setBackground(Color.yellow);
        }
        else {
            IR_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            IR+=Math.pow(2,10);
            IR_10.setBackground(Color.yellow);
        }
        else {
            IR_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            IR+=Math.pow(2,11);
            IR_11.setBackground(Color.yellow);
        }
        else {
            IR_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            IR+=Math.pow(2,12);
            IR_12.setBackground(Color.yellow);
        }
        else {
            IR_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            IR+=Math.pow(2,13);
            IR_13.setBackground(Color.yellow);
        }
        else {
            IR_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            IR+=Math.pow(2,14);
            IR_14.setBackground(Color.yellow);
        }
        else {
            IR_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            IR+=Math.pow(2,15);
            IR_15.setBackground(Color.yellow);
        }
        else {
            IR_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_IRActionPerformed

    private void Clear_LEDsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_LEDsActionPerformed
        Clear();
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Clear_LEDsActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        MBR = (short) memory[MAR];
        
        Populate_MBR();
    }//GEN-LAST:event_LoadActionPerformed

    public void Populate_CC(){
        if(CC0==1){
            CC_0.setBackground(Color.yellow);
        }
        else{
            CC_0.setBackground(Color.white);
        }
        
        if(CC1==1){
            CC_1.setBackground(Color.yellow);
        }
        else{
            CC_1.setBackground(Color.white);
        }
        
        if(CC2==1){
            CC_2.setBackground(Color.yellow);
        }
        else{
            CC_2.setBackground(Color.white);
        }
        
        if(CC3==1){
            
            CC_3.setBackground(Color.yellow);
        }
        else{
            CC_3.setBackground(Color.white);
        }
    }
    public void Populate_R0(){
        String R0_binary = Integer.toBinaryString(R0);
        if (R0_binary.length()>=1 && R0_binary.charAt(R0_binary.length()-1)=='1'){
            R0_0.setBackground(Color.yellow);
        }
        else{
            R0_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=2 && R0_binary.charAt(R0_binary.length()-2)=='1'){
            R0_1.setBackground(Color.yellow);
        }
        else{
            R0_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=3 && R0_binary.charAt(R0_binary.length()-3)=='1'){
            R0_2.setBackground(Color.yellow);
        }
        else{
            R0_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=4 && R0_binary.charAt(R0_binary.length()-4)=='1'){
            R0_3.setBackground(Color.yellow);
        }
        else{
            R0_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=5 && R0_binary.charAt(R0_binary.length()-5)=='1'){
            R0_4.setBackground(Color.yellow);
        }
        else{
            R0_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=6 && R0_binary.charAt(R0_binary.length()-6)=='1'){
            R0_5.setBackground(Color.yellow);
        }
        else{
            R0_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=7 && R0_binary.charAt(R0_binary.length()-7)=='1'){
            R0_6.setBackground(Color.yellow);
        }
        else{
            R0_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=8 && R0_binary.charAt(R0_binary.length()-8)=='1'){
            R0_7.setBackground(Color.yellow);
        }
        else{
            R0_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=9 && R0_binary.charAt(R0_binary.length()-9)=='1'){
            R0_8.setBackground(Color.yellow);
        }
        else{
            R0_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=10 && R0_binary.charAt(R0_binary.length()-10)=='1'){
            R0_9.setBackground(Color.yellow);
        }
        else{
            R0_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=11 && R0_binary.charAt(R0_binary.length()-11)=='1'){
            R0_10.setBackground(Color.yellow);
        }
        else{
            R0_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=12 && R0_binary.charAt(R0_binary.length()-12)=='1'){
            R0_11.setBackground(Color.yellow);
        }
        else{
            R0_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=13 && R0_binary.charAt(R0_binary.length()-13)=='1'){
            R0_12.setBackground(Color.yellow);
        }
        else{
            R0_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=14 && R0_binary.charAt(R0_binary.length()-14)=='1'){
            R0_13.setBackground(Color.yellow);
        }
        else{
            R0_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=15 && R0_binary.charAt(R0_binary.length()-15)=='1'){
            R0_14.setBackground(Color.yellow);
        }
        else{
            R0_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (R0_binary.length()>=16 && R0_binary.charAt(R0_binary.length()-16)=='1'){
            R0_15.setBackground(Color.yellow);
        }
        else{
            R0_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_FR0(){
        String FR0_binary = Integer.toBinaryString(FR0);
        if (FR0_binary.length()>=1 && FR0_binary.charAt(FR0_binary.length()-1)=='1'){
            FR0_0.setBackground(Color.yellow);
        }
        else{
            FR0_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=2 && FR0_binary.charAt(FR0_binary.length()-2)=='1'){
            FR0_1.setBackground(Color.yellow);
        }
        else{
            FR0_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=3 && FR0_binary.charAt(FR0_binary.length()-3)=='1'){
            FR0_2.setBackground(Color.yellow);
        }
        else{
            FR0_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=4 && FR0_binary.charAt(FR0_binary.length()-4)=='1'){
            FR0_3.setBackground(Color.yellow);
        }
        else{
            FR0_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=5 && FR0_binary.charAt(FR0_binary.length()-5)=='1'){
            FR0_4.setBackground(Color.yellow);
        }
        else{
            FR0_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=6 && FR0_binary.charAt(FR0_binary.length()-6)=='1'){
            FR0_5.setBackground(Color.yellow);
        }
        else{
            FR0_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=7 && FR0_binary.charAt(FR0_binary.length()-7)=='1'){
            FR0_6.setBackground(Color.yellow);
        }
        else{
            FR0_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=8 && FR0_binary.charAt(FR0_binary.length()-8)=='1'){
            FR0_7.setBackground(Color.yellow);
        }
        else{
            FR0_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=9 && FR0_binary.charAt(FR0_binary.length()-9)=='1'){
            FR0_8.setBackground(Color.yellow);
        }
        else{
            FR0_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=10 && FR0_binary.charAt(FR0_binary.length()-10)=='1'){
            FR0_9.setBackground(Color.yellow);
        }
        else{
            FR0_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=11 && FR0_binary.charAt(FR0_binary.length()-11)=='1'){
            FR0_10.setBackground(Color.yellow);
        }
        else{
            FR0_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=12 && FR0_binary.charAt(FR0_binary.length()-12)=='1'){
            FR0_11.setBackground(Color.yellow);
        }
        else{
            FR0_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=13 && FR0_binary.charAt(FR0_binary.length()-13)=='1'){
            FR0_12.setBackground(Color.yellow);
        }
        else{
            FR0_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=14 && FR0_binary.charAt(FR0_binary.length()-14)=='1'){
            FR0_13.setBackground(Color.yellow);
        }
        else{
            FR0_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=15 && FR0_binary.charAt(FR0_binary.length()-15)=='1'){
            FR0_14.setBackground(Color.yellow);
        }
        else{
            FR0_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR0_binary.length()>=16 && FR0_binary.charAt(FR0_binary.length()-16)=='1'){
            FR0_15.setBackground(Color.yellow);
        }
        else{
            FR0_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
        
    public void Populate_FR1(){
        String FR1_binary = Integer.toBinaryString(FR1);
        if (FR1_binary.length()>=1 && FR1_binary.charAt(FR1_binary.length()-1)=='1'){
            FR1_0.setBackground(Color.yellow);
        }
        else{
            FR1_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=2 && FR1_binary.charAt(FR1_binary.length()-2)=='1'){
            FR1_1.setBackground(Color.yellow);
        }
        else{
            FR1_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=3 && FR1_binary.charAt(FR1_binary.length()-3)=='1'){
            FR1_2.setBackground(Color.yellow);
        }
        else{
            FR1_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=4 && FR1_binary.charAt(FR1_binary.length()-4)=='1'){
            FR1_3.setBackground(Color.yellow);
        }
        else{
            FR1_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=5 && FR1_binary.charAt(FR1_binary.length()-5)=='1'){
            FR1_4.setBackground(Color.yellow);
        }
        else{
            FR1_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=6 && FR1_binary.charAt(FR1_binary.length()-6)=='1'){
            FR1_5.setBackground(Color.yellow);
        }
        else{
            FR1_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=7 && FR1_binary.charAt(FR1_binary.length()-7)=='1'){
            FR1_6.setBackground(Color.yellow);
        }
        else{
            FR1_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=8 && FR1_binary.charAt(FR1_binary.length()-8)=='1'){
            FR1_7.setBackground(Color.yellow);
        }
        else{
            FR1_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=9 && FR1_binary.charAt(FR1_binary.length()-9)=='1'){
            FR1_8.setBackground(Color.yellow);
        }
        else{
            FR1_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=10 && FR1_binary.charAt(FR1_binary.length()-10)=='1'){
            FR1_9.setBackground(Color.yellow);
        }
        else{
            FR1_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=11 && FR1_binary.charAt(FR1_binary.length()-11)=='1'){
            FR1_10.setBackground(Color.yellow);
        }
        else{
            FR1_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=12 && FR1_binary.charAt(FR1_binary.length()-12)=='1'){
            FR1_11.setBackground(Color.yellow);
        }
        else{
            FR1_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=13 && FR1_binary.charAt(FR1_binary.length()-13)=='1'){
            FR1_12.setBackground(Color.yellow);
        }
        else{
            FR1_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=14 && FR1_binary.charAt(FR1_binary.length()-14)=='1'){
            FR1_13.setBackground(Color.yellow);
        }
        else{
            FR1_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=15 && FR1_binary.charAt(FR1_binary.length()-15)=='1'){
            FR1_14.setBackground(Color.yellow);
        }
        else{
            FR1_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (FR1_binary.length()>=16 && FR1_binary.charAt(FR1_binary.length()-16)=='1'){
            FR1_15.setBackground(Color.yellow);
        }
        else{
            FR1_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_MBR(){
        String MBR_binary = Integer.toBinaryString(MBR);
        if (MBR_binary.length()>=1 && MBR_binary.charAt(MBR_binary.length()-1)=='1'){
            MBR_0.setBackground(Color.yellow);
        }
        else{
            MBR_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=2 && MBR_binary.charAt(MBR_binary.length()-2)=='1'){
            MBR_1.setBackground(Color.yellow);
        }
        else{
            MBR_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=3 && MBR_binary.charAt(MBR_binary.length()-3)=='1'){
            MBR_2.setBackground(Color.yellow);
        }
        else{
            MBR_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=4 && MBR_binary.charAt(MBR_binary.length()-4)=='1'){
            MBR_3.setBackground(Color.yellow);
        }
        else{
            MBR_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=5 && MBR_binary.charAt(MBR_binary.length()-5)=='1'){
            MBR_4.setBackground(Color.yellow);
        }
        else{
            MBR_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=6 && MBR_binary.charAt(MBR_binary.length()-6)=='1'){
            MBR_5.setBackground(Color.yellow);
        }
        else{
            MBR_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=7 && MBR_binary.charAt(MBR_binary.length()-7)=='1'){
            MBR_6.setBackground(Color.yellow);
        }
        else{
            MBR_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=8 && MBR_binary.charAt(MBR_binary.length()-8)=='1'){
            MBR_7.setBackground(Color.yellow);
        }
        else{
            MBR_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=9 && MBR_binary.charAt(MBR_binary.length()-9)=='1'){
            MBR_8.setBackground(Color.yellow);
        }
        else{
            MBR_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=10 && MBR_binary.charAt(MBR_binary.length()-10)=='1'){
            MBR_9.setBackground(Color.yellow);
        }
        else{
            MBR_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=11 && MBR_binary.charAt(MBR_binary.length()-11)=='1'){
            MBR_10.setBackground(Color.yellow);
        }
        else{
            MBR_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=12 && MBR_binary.charAt(MBR_binary.length()-12)=='1'){
            MBR_11.setBackground(Color.yellow);
        }
        else{
            MBR_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=13 && MBR_binary.charAt(MBR_binary.length()-13)=='1'){
            MBR_12.setBackground(Color.yellow);
        }
        else{
            MBR_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=14 && MBR_binary.charAt(MBR_binary.length()-14)=='1'){
            MBR_13.setBackground(Color.yellow);
        }
        else{
            MBR_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=15 && MBR_binary.charAt(MBR_binary.length()-15)=='1'){
            MBR_14.setBackground(Color.yellow);
        }
        else{
            MBR_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (MBR_binary.length()>=16 && MBR_binary.charAt(MBR_binary.length()-16)=='1'){
            MBR_15.setBackground(Color.yellow);
        }
        else{
            MBR_15.setBackground(Color.decode("#F2F2F2"));
        }
    }    
    
    public void Populate_IR(){
        String IR_binary = Integer.toBinaryString(IR);
        
        if (IR_binary.length()>=1 && IR_binary.charAt(IR_binary.length()-1)=='1'){
            IR_0.setBackground(Color.yellow);
        }
        else{
            IR_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=2 && IR_binary.charAt(IR_binary.length()-2)=='1'){
            IR_1.setBackground(Color.yellow);
        }
        else{
            IR_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=3 && IR_binary.charAt(IR_binary.length()-3)=='1'){
            IR_2.setBackground(Color.yellow);
        }
        else{
            IR_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=4 && IR_binary.charAt(IR_binary.length()-4)=='1'){
            IR_3.setBackground(Color.yellow);
        }
        else{
            IR_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=5 && IR_binary.charAt(IR_binary.length()-5)=='1'){
            IR_4.setBackground(Color.yellow);
        }
        else{
            IR_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=6 && IR_binary.charAt(IR_binary.length()-6)=='1'){
            IR_5.setBackground(Color.yellow);
        }
        else{
            IR_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=7 && IR_binary.charAt(IR_binary.length()-7)=='1'){
            IR_6.setBackground(Color.yellow);
        }
        else{
            IR_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=8 && IR_binary.charAt(IR_binary.length()-8)=='1'){
            IR_7.setBackground(Color.yellow);
        }
        else{
            IR_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=9 && IR_binary.charAt(IR_binary.length()-9)=='1'){
            IR_8.setBackground(Color.yellow);
        }
        else{
            IR_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=10 && IR_binary.charAt(IR_binary.length()-10)=='1'){
            IR_9.setBackground(Color.yellow);
        }
        else{
            IR_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=11 && IR_binary.charAt(IR_binary.length()-11)=='1'){
            IR_10.setBackground(Color.yellow);
        }
        else{
            IR_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=12 && IR_binary.charAt(IR_binary.length()-12)=='1'){
            IR_11.setBackground(Color.yellow);
        }
        else{
            IR_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=13 && IR_binary.charAt(IR_binary.length()-13)=='1'){
            IR_12.setBackground(Color.yellow);
        }
        else{
            IR_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=14 && IR_binary.charAt(IR_binary.length()-14)=='1'){
            IR_13.setBackground(Color.yellow);
        }
        else{
            IR_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=15 && IR_binary.charAt(IR_binary.length()-15)=='1'){
            IR_14.setBackground(Color.yellow);
        }
        else{
            IR_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (IR_binary.length()>=16 && IR_binary.charAt(IR_binary.length()-16)=='1'){
            IR_15.setBackground(Color.yellow);
        }
        else{
            IR_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_MAR(){
        String MAR_binary = Integer.toBinaryString(MAR);
        if (MAR_binary.length()>=1 && MAR_binary.charAt(MAR_binary.length()-1)=='1'){
            MAR_0.setBackground(Color.yellow);
        }
        else{
            MAR_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=2 && MAR_binary.charAt(MAR_binary.length()-2)=='1'){
            MAR_1.setBackground(Color.yellow);
        }
        else{
            MAR_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=3 && MAR_binary.charAt(MAR_binary.length()-3)=='1'){
            MAR_2.setBackground(Color.yellow);
        }
        else{
            MAR_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=4 && MAR_binary.charAt(MAR_binary.length()-4)=='1'){
            MAR_3.setBackground(Color.yellow);
        }
        else{
            MAR_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=5 && MAR_binary.charAt(MAR_binary.length()-5)=='1'){
            MAR_4.setBackground(Color.yellow);
        }
        else{
            MAR_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=6 && MAR_binary.charAt(MAR_binary.length()-6)=='1'){
            MAR_5.setBackground(Color.yellow);
        }
        else{
            MAR_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=7 && MAR_binary.charAt(MAR_binary.length()-7)=='1'){
            MAR_6.setBackground(Color.yellow);
        }
        else{
            MAR_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=8 && MAR_binary.charAt(MAR_binary.length()-8)=='1'){
            MAR_7.setBackground(Color.yellow);
        }
        else{
            MAR_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=9 && MAR_binary.charAt(MAR_binary.length()-9)=='1'){
            MAR_8.setBackground(Color.yellow);
        }
        else{
            MAR_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=10 && MAR_binary.charAt(MAR_binary.length()-10)=='1'){
            MAR_9.setBackground(Color.yellow);
        }
        else{
            MAR_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=11 && MAR_binary.charAt(MAR_binary.length()-11)=='1'){
            MAR_10.setBackground(Color.yellow);
        }
        else{
            MAR_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (MAR_binary.length()>=12 && MAR_binary.charAt(MAR_binary.length()-12)=='1'){
            MAR_11.setBackground(Color.yellow);
        }
        else{
            MAR_11.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_R1(){
        String R1_binary = Integer.toBinaryString(R1);
        if (R1_binary.length()>=1 && R1_binary.charAt(R1_binary.length()-1)=='1'){
            R1_0.setBackground(Color.yellow);
        }
        else{
            R1_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=2 && R1_binary.charAt(R1_binary.length()-2)=='1'){
            R1_1.setBackground(Color.yellow);
        }
        else{
            R1_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=3 && R1_binary.charAt(R1_binary.length()-3)=='1'){
            R1_2.setBackground(Color.yellow);
        }
        else{
            R1_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=4 && R1_binary.charAt(R1_binary.length()-4)=='1'){
            R1_3.setBackground(Color.yellow);
        }
        else{
            R1_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=5 && R1_binary.charAt(R1_binary.length()-5)=='1'){
            R1_4.setBackground(Color.yellow);
        }
        else{
            R1_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=6 && R1_binary.charAt(R1_binary.length()-6)=='1'){
            R1_5.setBackground(Color.yellow);
        }
        else{
            R1_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=7 && R1_binary.charAt(R1_binary.length()-7)=='1'){
            R1_6.setBackground(Color.yellow);
        }
        else{
            R1_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=8 && R1_binary.charAt(R1_binary.length()-8)=='1'){
            R1_7.setBackground(Color.yellow);
        }
        else{
            R1_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=9 && R1_binary.charAt(R1_binary.length()-9)=='1'){
            R1_8.setBackground(Color.yellow);
        }
        else{
            R1_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=10 && R1_binary.charAt(R1_binary.length()-10)=='1'){
            R1_9.setBackground(Color.yellow);
        }
        else{
            R1_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=11 && R1_binary.charAt(R1_binary.length()-11)=='1'){
            R1_10.setBackground(Color.yellow);
        }
        else{
            R1_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=12 && R1_binary.charAt(R1_binary.length()-12)=='1'){
            R1_11.setBackground(Color.yellow);
        }
        else{
            R1_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=13 && R1_binary.charAt(R1_binary.length()-13)=='1'){
            R1_12.setBackground(Color.yellow);
        }
        else{
            R1_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=14 && R1_binary.charAt(R1_binary.length()-14)=='1'){
            R1_13.setBackground(Color.yellow);
        }
        else{
            R1_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=15 && R1_binary.charAt(R1_binary.length()-15)=='1'){
            R1_14.setBackground(Color.yellow);
        }
        else{
            R1_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (R1_binary.length()>=16 && R1_binary.charAt(R1_binary.length()-16)=='1'){
            R1_15.setBackground(Color.yellow);
        }
        else{
            R1_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_R2(){
        String R2_binary = Integer.toBinaryString(R2);
        if (R2_binary.length()>=1 && R2_binary.charAt(R2_binary.length()-1)=='1'){
            R2_0.setBackground(Color.yellow);
        }
        else{
            R2_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=2 && R2_binary.charAt(R2_binary.length()-2)=='1'){
            R2_1.setBackground(Color.yellow);
        }
        else{
            R2_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=3 && R2_binary.charAt(R2_binary.length()-3)=='1'){
            R2_2.setBackground(Color.yellow);
        }
        else{
            R2_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=4 && R2_binary.charAt(R2_binary.length()-4)=='1'){
            R2_3.setBackground(Color.yellow);
        }
        else{
            R2_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=5 && R2_binary.charAt(R2_binary.length()-5)=='1'){
            R2_4.setBackground(Color.yellow);
        }
        else{
            R2_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=6 && R2_binary.charAt(R2_binary.length()-6)=='1'){
            R2_5.setBackground(Color.yellow);
        }
        else{
            R2_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=7 && R2_binary.charAt(R2_binary.length()-7)=='1'){
            R2_6.setBackground(Color.yellow);
        }
        else{
            R2_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=8 && R2_binary.charAt(R2_binary.length()-8)=='1'){
            R2_7.setBackground(Color.yellow);
        }
        else{
            R2_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=9 && R2_binary.charAt(R2_binary.length()-9)=='1'){
            R2_8.setBackground(Color.yellow);
        }
        else{
            R2_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=10 && R2_binary.charAt(R2_binary.length()-10)=='1'){
            R2_9.setBackground(Color.yellow);
        }
        else{
            R2_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=11 && R2_binary.charAt(R2_binary.length()-11)=='1'){
            R2_10.setBackground(Color.yellow);
        }
        else{
            R2_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=12 && R2_binary.charAt(R2_binary.length()-12)=='1'){
            R2_11.setBackground(Color.yellow);
        }
        else{
            R2_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=13 && R2_binary.charAt(R2_binary.length()-13)=='1'){
            R2_12.setBackground(Color.yellow);
        }
        else{
            R2_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=14 && R2_binary.charAt(R2_binary.length()-14)=='1'){
            R2_13.setBackground(Color.yellow);
        }
        else{
            R2_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=15 && R2_binary.charAt(R2_binary.length()-15)=='1'){
            R2_14.setBackground(Color.yellow);
        }
        else{
            R2_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (R2_binary.length()>=16 && R2_binary.charAt(R2_binary.length()-16)=='1'){
            R2_15.setBackground(Color.yellow);
        }
        else{
            R2_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_R3(){
        String R3_binary = Integer.toBinaryString(R3);
        if (R3_binary.length()>=1 && R3_binary.charAt(R3_binary.length()-1)=='1'){
            R3_0.setBackground(Color.yellow);
        }
        else{
            R3_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=2 && R3_binary.charAt(R3_binary.length()-2)=='1'){
            R3_1.setBackground(Color.yellow);
        }
        else{
            R3_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=3 && R3_binary.charAt(R3_binary.length()-3)=='1'){
            R3_2.setBackground(Color.yellow);
        }
        else{
            R3_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=4 && R3_binary.charAt(R3_binary.length()-4)=='1'){
            R3_3.setBackground(Color.yellow);
        }
        else{
            R3_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=5 && R3_binary.charAt(R3_binary.length()-5)=='1'){
            R3_4.setBackground(Color.yellow);
        }
        else{
            R3_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=6 && R3_binary.charAt(R3_binary.length()-6)=='1'){
            R3_5.setBackground(Color.yellow);
        }
        else{
            R3_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=7 && R3_binary.charAt(R3_binary.length()-7)=='1'){
            R3_6.setBackground(Color.yellow);
        }
        else{
            R3_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=8 && R3_binary.charAt(R3_binary.length()-8)=='1'){
            R3_7.setBackground(Color.yellow);
        }
        else{
            R3_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=9 && R3_binary.charAt(R3_binary.length()-9)=='1'){
            R3_8.setBackground(Color.yellow);
        }
        else{
            R3_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=10 && R3_binary.charAt(R3_binary.length()-10)=='1'){
            R3_9.setBackground(Color.yellow);
        }
        else{
            R3_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=11 && R3_binary.charAt(R3_binary.length()-11)=='1'){
            R3_10.setBackground(Color.yellow);
        }
        else{
            R3_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=12 && R3_binary.charAt(R3_binary.length()-12)=='1'){
            R3_11.setBackground(Color.yellow);
        }
        else{
            R3_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=13 && R3_binary.charAt(R3_binary.length()-13)=='1'){
            R3_12.setBackground(Color.yellow);
        }
        else{
            R3_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=14 && R3_binary.charAt(R3_binary.length()-14)=='1'){
            R3_13.setBackground(Color.yellow);
        }
        else{
            R3_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=15 && R3_binary.charAt(R3_binary.length()-15)=='1'){
            R3_14.setBackground(Color.yellow);
        }
        else{
            R3_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (R3_binary.length()>=16 && R3_binary.charAt(R3_binary.length()-16)=='1'){
            R3_15.setBackground(Color.yellow);
        }
        else{
            R3_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_X1(){
        String X1_binary = Integer.toBinaryString(X1);
        if (X1_binary.length()>=1 && X1_binary.charAt(X1_binary.length()-1)=='1'){
            X1_0.setBackground(Color.yellow);
        }
        else{
            X1_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=2 && X1_binary.charAt(X1_binary.length()-2)=='1'){
            X1_1.setBackground(Color.yellow);
        }
        else{
            X1_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=3 && X1_binary.charAt(X1_binary.length()-3)=='1'){
            X1_2.setBackground(Color.yellow);
        }
        else{
            X1_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=4 && X1_binary.charAt(X1_binary.length()-4)=='1'){
            X1_3.setBackground(Color.yellow);
        }
        else{
            X1_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=5 && X1_binary.charAt(X1_binary.length()-5)=='1'){
            X1_4.setBackground(Color.yellow);
        }
        else{
            X1_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=6 && X1_binary.charAt(X1_binary.length()-6)=='1'){
            X1_5.setBackground(Color.yellow);
        }
        else{
            X1_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=7 && X1_binary.charAt(X1_binary.length()-7)=='1'){
            X1_6.setBackground(Color.yellow);
        }
        else{
            X1_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=8 && X1_binary.charAt(X1_binary.length()-8)=='1'){
            X1_7.setBackground(Color.yellow);
        }
        else{
            X1_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=9 && X1_binary.charAt(X1_binary.length()-9)=='1'){
            X1_8.setBackground(Color.yellow);
        }
        else{
            X1_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=10 && X1_binary.charAt(X1_binary.length()-10)=='1'){
            X1_9.setBackground(Color.yellow);
        }
        else{
            X1_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=11 && X1_binary.charAt(X1_binary.length()-11)=='1'){
            X1_10.setBackground(Color.yellow);
        }
        else{
            X1_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=12 && X1_binary.charAt(X1_binary.length()-12)=='1'){
            X1_11.setBackground(Color.yellow);
        }
        else{
            X1_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=13 && X1_binary.charAt(X1_binary.length()-13)=='1'){
            X1_12.setBackground(Color.yellow);
        }
        else{
            X1_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=14 && X1_binary.charAt(X1_binary.length()-14)=='1'){
            X1_13.setBackground(Color.yellow);
        }
        else{
            X1_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=15 && X1_binary.charAt(X1_binary.length()-15)=='1'){
            X1_14.setBackground(Color.yellow);
        }
        else{
            X1_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (X1_binary.length()>=16 && X1_binary.charAt(X1_binary.length()-16)=='1'){
            X1_15.setBackground(Color.yellow);
        }
        else{
            X1_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_X2(){
        String X2_binary = Integer.toBinaryString(X2);
        if (X2_binary.length()>=1 && X2_binary.charAt(X2_binary.length()-1)=='1'){
            X2_0.setBackground(Color.yellow);
        }
        else{
            X2_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=2 && X2_binary.charAt(X2_binary.length()-2)=='1'){
            X2_1.setBackground(Color.yellow);
        }
        else{
            X2_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=3 && X2_binary.charAt(X2_binary.length()-3)=='1'){
            X2_2.setBackground(Color.yellow);
        }
        else{
            X2_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=4 && X2_binary.charAt(X2_binary.length()-4)=='1'){
            X2_3.setBackground(Color.yellow);
        }
        else{
            X2_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=5 && X2_binary.charAt(X2_binary.length()-5)=='1'){
            X2_4.setBackground(Color.yellow);
        }
        else{
            X2_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=6 && X2_binary.charAt(X2_binary.length()-6)=='1'){
            X2_5.setBackground(Color.yellow);
        }
        else{
            X2_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=7 && X2_binary.charAt(X2_binary.length()-7)=='1'){
            X2_6.setBackground(Color.yellow);
        }
        else{
            X2_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=8 && X2_binary.charAt(X2_binary.length()-8)=='1'){
            X2_7.setBackground(Color.yellow);
        }
        else{
            X2_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=9 && X2_binary.charAt(X2_binary.length()-9)=='1'){
            X2_8.setBackground(Color.yellow);
        }
        else{
            X2_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=10 && X2_binary.charAt(X2_binary.length()-10)=='1'){
            X2_9.setBackground(Color.yellow);
        }
        else{
            X2_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=11 && X2_binary.charAt(X2_binary.length()-11)=='1'){
            X2_10.setBackground(Color.yellow);
        }
        else{
            X2_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=12 && X2_binary.charAt(X2_binary.length()-12)=='1'){
            X2_11.setBackground(Color.yellow);
        }
        else{
            X2_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=13 && X2_binary.charAt(X2_binary.length()-13)=='1'){
            X2_12.setBackground(Color.yellow);
        }
        else{
            X2_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=14 && X2_binary.charAt(X2_binary.length()-14)=='1'){
            X2_13.setBackground(Color.yellow);
        }
        else{
            X2_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=15 && X2_binary.charAt(X2_binary.length()-15)=='1'){
            X2_14.setBackground(Color.yellow);
        }
        else{
            X2_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (X2_binary.length()>=16 && X2_binary.charAt(X2_binary.length()-16)=='1'){
            X2_15.setBackground(Color.yellow);
        }
        else{
            X2_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_X3(){
        String X3_binary = Integer.toBinaryString(X3);
        if (X3_binary.length()>=1 && X3_binary.charAt(X3_binary.length()-1)=='1'){
            X3_0.setBackground(Color.yellow);
        }
        else{
            X3_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=2 && X3_binary.charAt(X3_binary.length()-2)=='1'){
            X3_1.setBackground(Color.yellow);
        }
        else{
            X3_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=3 && X3_binary.charAt(X3_binary.length()-3)=='1'){
            X3_2.setBackground(Color.yellow);
        }
        else{
            X3_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=4 && X3_binary.charAt(X3_binary.length()-4)=='1'){
            X3_3.setBackground(Color.yellow);
        }
        else{
            X3_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=5 && X3_binary.charAt(X3_binary.length()-5)=='1'){
            X3_4.setBackground(Color.yellow);
        }
        else{
            X3_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=6 && X3_binary.charAt(X3_binary.length()-6)=='1'){
            X3_5.setBackground(Color.yellow);
        }
        else{
            X3_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=7 && X3_binary.charAt(X3_binary.length()-7)=='1'){
            X3_6.setBackground(Color.yellow);
        }
        else{
            X3_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=8 && X3_binary.charAt(X3_binary.length()-8)=='1'){
            X3_7.setBackground(Color.yellow);
        }
        else{
            X3_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=9 && X3_binary.charAt(X3_binary.length()-9)=='1'){
            X3_8.setBackground(Color.yellow);
        }
        else{
            X3_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=10 && X3_binary.charAt(X3_binary.length()-10)=='1'){
            X3_9.setBackground(Color.yellow);
        }
        else{
            X3_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=11 && X3_binary.charAt(X3_binary.length()-11)=='1'){
            X3_10.setBackground(Color.yellow);
        }
        else{
            X3_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=12 && X3_binary.charAt(X3_binary.length()-12)=='1'){
            X3_11.setBackground(Color.yellow);
        }
        else{
            X3_11.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=13 && X3_binary.charAt(X3_binary.length()-13)=='1'){
            X3_12.setBackground(Color.yellow);
        }
        else{
            X3_12.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=14 && X3_binary.charAt(X3_binary.length()-14)=='1'){
            X3_13.setBackground(Color.yellow);
        }
        else{
            X3_13.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=15 && X3_binary.charAt(X3_binary.length()-15)=='1'){
            X3_14.setBackground(Color.yellow);
        }
        else{
            X3_14.setBackground(Color.decode("#F2F2F2"));
        }
        if (X3_binary.length()>=16 && X3_binary.charAt(X3_binary.length()-16)=='1'){
            X3_15.setBackground(Color.yellow);
        }
        else{
            X3_15.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public void Populate_PC(){
        String PC_binary = Integer.toBinaryString(PC);
        if (PC_binary.length()>=1 && PC_binary.charAt(PC_binary.length()-1)=='1'){
            PC_0.setBackground(Color.yellow);
        }
        else{
            PC_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=2 && PC_binary.charAt(PC_binary.length()-2)=='1'){
            PC_1.setBackground(Color.yellow);
        }
        else{
            PC_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=3 && PC_binary.charAt(PC_binary.length()-3)=='1'){
            PC_2.setBackground(Color.yellow);
        }
        else{
            PC_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=4 && PC_binary.charAt(PC_binary.length()-4)=='1'){
            PC_3.setBackground(Color.yellow);
        }
        else{
            PC_3.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=5 && PC_binary.charAt(PC_binary.length()-5)=='1'){
            PC_4.setBackground(Color.yellow);
        }
        else{
            PC_4.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=6 && PC_binary.charAt(PC_binary.length()-6)=='1'){
            PC_5.setBackground(Color.yellow);
        }
        else{
            PC_5.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=7 && PC_binary.charAt(PC_binary.length()-7)=='1'){
            PC_6.setBackground(Color.yellow);
        }
        else{
            PC_6.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=8 && PC_binary.charAt(PC_binary.length()-8)=='1'){
            PC_7.setBackground(Color.yellow);
        }
        else{
            PC_7.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=9 && PC_binary.charAt(PC_binary.length()-9)=='1'){
            PC_8.setBackground(Color.yellow);
        }
        else{
            PC_8.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=10 && PC_binary.charAt(PC_binary.length()-10)=='1'){
            PC_9.setBackground(Color.yellow);
        }
        else{
            PC_9.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=11 && PC_binary.charAt(PC_binary.length()-11)=='1'){
            PC_10.setBackground(Color.yellow);
        }
        else{
            PC_10.setBackground(Color.decode("#F2F2F2"));
        }
        if (PC_binary.length()>=12 && PC_binary.charAt(PC_binary.length()-12)=='1'){
            PC_11.setBackground(Color.yellow);
        }
        else{
            PC_11.setBackground(Color.decode("#F2F2F2"));
        }
    }
    
    public short getAddress(short x){
        String x_binary = Integer.toBinaryString(x & 0xFFFF);
        if (x_binary.length()==32){
            x_binary=x_binary.substring(16,32);
        }
        short address = 0;
        
        if(x_binary.length() >= 5 && x_binary.charAt(x_binary.length()-5) == '1')
        {
            address += Math.pow(2,4);
        }
        if(x_binary.length() >= 4 && x_binary.charAt(x_binary.length()-4) == '1')
        {
            address += Math.pow(2,3);
        }
        if(x_binary.length() >= 3 && x_binary.charAt(x_binary.length()-3) == '1')
        {
            address += Math.pow(2,2);
        }
        if(x_binary.length() >= 2 && x_binary.charAt(x_binary.length()-2) == '1')
        {
            address += Math.pow(2,1);
        }
        if(x_binary.length() >= 1 && x_binary.charAt(x_binary.length()-1) == '1')
        {
            address += Math.pow(2,0);
        }
        return address;
    }
    
    public void ClearCacheBg(){
        jLabel_Tag0.setBackground(Color.white);
        Tag_0.setBackground(Color.white);
        Value_0.setBackground(Color.white);
        jLabel_Tag1.setBackground(Color.white);
        Tag_1.setBackground(Color.white);
        Value_1.setBackground(Color.white);
        jLabel_Tag2.setBackground(Color.white);
        Tag_2.setBackground(Color.white);
        Value_2.setBackground(Color.white);
        jLabel_Tag3.setBackground(Color.white);
        Tag_3.setBackground(Color.white);
        Value_3.setBackground(Color.white);
        jLabel_Tag4.setBackground(Color.white);
        Tag_4.setBackground(Color.white);
        Value_4.setBackground(Color.white);
        jLabel_Tag5.setBackground(Color.white);
        Tag_5.setBackground(Color.white);
        Value_5.setBackground(Color.white);
        jLabel_Tag6.setBackground(Color.white);
        Tag_6.setBackground(Color.white);
        Value_6.setBackground(Color.white);
        jLabel_Tag7.setBackground(Color.white);
        Tag_7.setBackground(Color.white);
        Value_7.setBackground(Color.white);
        jLabel_Tag8.setBackground(Color.white);
        Tag_8.setBackground(Color.white);
        Value_8.setBackground(Color.white);
        jLabel_Tag9.setBackground(Color.white);
        Tag_9.setBackground(Color.white);
        Value_9.setBackground(Color.white);
        jLabel_Tag10.setBackground(Color.white);
        Tag_10.setBackground(Color.white);
        Value_10.setBackground(Color.white);
        jLabel_Tag11.setBackground(Color.white);
        Tag_11.setBackground(Color.white);
        Value_11.setBackground(Color.white);
        jLabel_Tag12.setBackground(Color.white);
        Tag_12.setBackground(Color.white);
        Value_12.setBackground(Color.white);
        jLabel_Tag13.setBackground(Color.white);
        Tag_13.setBackground(Color.white);
        Value_13.setBackground(Color.white);
        jLabel_Tag14.setBackground(Color.white);
        Tag_14.setBackground(Color.white);
        Value_14.setBackground(Color.white);
        jLabel_Tag15.setBackground(Color.white);
        Tag_15.setBackground(Color.white);
        Value_15.setBackground(Color.white);
    }
    
    public void UpdateCache(){
        ClearCacheBg();
        if(FIFO.size()<16){
            for(short i =0;i<FIFO.size();i++){
                if(cache[i]!=null && cache[i].Address==PC){
                    ConsoleLog.append("Cache Hit!!\n");
                    System.out.println("hit i: "+i+"\n");
                    switch (i) {
                        case 0 -> {
                            jLabel_Tag0.setBackground(Color.green);
                            Tag_0.setBackground(Color.green);
                            Value_0.setBackground(Color.green);
                        }
                        case 1 -> {
                            jLabel_Tag1.setBackground(Color.green);
                            Tag_1.setBackground(Color.green);
                            Value_1.setBackground(Color.green);
                        }
                        case 2 -> {
                            jLabel_Tag2.setBackground(Color.green);
                            Tag_2.setBackground(Color.green);
                            Value_2.setBackground(Color.green);
                        }
                        case 3 -> {
                            jLabel_Tag3.setBackground(Color.green);
                            Tag_3.setBackground(Color.green);
                            Value_3.setBackground(Color.green);
                        }
                        case 4 -> {
                            jLabel_Tag4.setBackground(Color.green);
                            Tag_4.setBackground(Color.green);
                            Value_4.setBackground(Color.green);
                        }
                        case 5 -> {
                            jLabel_Tag5.setBackground(Color.green);
                            Tag_5.setBackground(Color.green);
                            Value_5.setBackground(Color.green);
                        }
                        case 6 -> {
                            jLabel_Tag6.setBackground(Color.green);
                            Tag_6.setBackground(Color.green);
                            Value_6.setBackground(Color.green);
                        }
                        case 7 -> {
                            jLabel_Tag7.setBackground(Color.green);
                            Tag_7.setBackground(Color.green);
                            Value_7.setBackground(Color.green);
                        }
                        case 8 -> {
                            jLabel_Tag8.setBackground(Color.green);
                            Tag_8.setBackground(Color.green);
                            Value_8.setBackground(Color.green);
                        }
                        case 9 -> {
                            jLabel_Tag9.setBackground(Color.green);
                            Tag_9.setBackground(Color.green);
                            Value_9.setBackground(Color.green);
                        }
                        case 10 -> {
                            jLabel_Tag10.setBackground(Color.green);
                            Tag_10.setBackground(Color.green);
                            Value_10.setBackground(Color.green);
                        }
                        case 11 -> {
                            jLabel_Tag11.setBackground(Color.green);
                            Tag_11.setBackground(Color.green);
                            Value_11.setBackground(Color.green);
                        }
                        case 12 -> {
                            jLabel_Tag12.setBackground(Color.green);
                            Tag_12.setBackground(Color.green);
                            Value_12.setBackground(Color.green);
                        }
                        case 13 -> {
                            jLabel_Tag13.setBackground(Color.green);
                            Tag_13.setBackground(Color.green);
                            Value_13.setBackground(Color.green);
                        }
                        case 14 -> {
                            jLabel_Tag14.setBackground(Color.green);
                            Tag_14.setBackground(Color.green);
                            Value_14.setBackground(Color.green);
                        }
                        case 15 -> {
                            jLabel_Tag15.setBackground(Color.green);
                            Tag_15.setBackground(Color.green);
                            Value_15.setBackground(Color.green);
                        }
                        default -> {
                        }
                    }
                    return;
                }
            }
            if(FIFO.size()==0) { 
                Tag_0.setText(Integer.toString(PC,2));
                Value_0.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag0.setBackground(Color.red);
                Tag_0.setBackground(Color.red);
                Value_0.setBackground(Color.red);
            }
            else if(FIFO.size()==1) { 
                Tag_1.setText(Integer.toString(PC,2));
                Value_1.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag1.setBackground(Color.red);
                Tag_1.setBackground(Color.red);
                Value_1.setBackground(Color.red);
            }
            else if(FIFO.size()==2) { 
                Tag_2.setText(Integer.toString(PC,2));
                Value_2.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag2.setBackground(Color.red);
                Tag_2.setBackground(Color.red);
                Value_2.setBackground(Color.red);
            }
            else if(FIFO.size()==3) { 
                Tag_3.setText(Integer.toString(PC,2));
                Value_3.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag3.setBackground(Color.red);
                Tag_3.setBackground(Color.red);
                Value_3.setBackground(Color.red);
            }
            else if(FIFO.size()==4) { 
                Tag_4.setText(Integer.toString(PC,2));
                Value_4.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag4.setBackground(Color.red);
                Tag_4.setBackground(Color.red);
                Value_4.setBackground(Color.red);
            }
            else if(FIFO.size()==5) { 
                Tag_5.setText(Integer.toString(PC,2));
                Value_5.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag5.setBackground(Color.red);
                Tag_5.setBackground(Color.red);
                Value_5.setBackground(Color.red);
            }
            else if(FIFO.size()==6) { 
                Tag_6.setText(Integer.toString(PC,2));
                Value_6.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag6.setBackground(Color.red);
                Tag_6.setBackground(Color.red);
                Value_6.setBackground(Color.red);
            }
            else if(FIFO.size()==7) { 
                Tag_7.setText(Integer.toString(PC,2));
                Value_7.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag7.setBackground(Color.red);
                Tag_7.setBackground(Color.red);
                Value_7.setBackground(Color.red);
            }
            else if(FIFO.size()==8) { 
                Tag_8.setText(Integer.toString(PC,2));
                Value_8.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag8.setBackground(Color.red);
                Tag_8.setBackground(Color.red);
                Value_8.setBackground(Color.red);
            }
            else if(FIFO.size()==9) { 
                Tag_9.setText(Integer.toString(PC,2));
                Value_9.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag9.setBackground(Color.red);
                Tag_9.setBackground(Color.red);
                Value_9.setBackground(Color.red);
            }
            else if(FIFO.size()==10) { 
                Tag_10.setText(Integer.toString(PC,2));
                Value_10.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag10.setBackground(Color.red);
                Tag_10.setBackground(Color.red);
                Value_10.setBackground(Color.red);
            }
            else if(FIFO.size()==11) { 
                Tag_11.setText(Integer.toString(PC,2));
                Value_11.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag11.setBackground(Color.red);
                Tag_11.setBackground(Color.red);
                Value_11.setBackground(Color.red);
            }
            else if(FIFO.size()==12) { 
                Tag_12.setText(Integer.toString(PC,2));
                Value_12.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag12.setBackground(Color.red);
                Tag_12.setBackground(Color.red);
                Value_12.setBackground(Color.red);
            }
            else if(FIFO.size()==13) { 
                Tag_13.setText(Integer.toString(PC,2));
                Value_13.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag13.setBackground(Color.red);
                Tag_13.setBackground(Color.red);
                Value_13.setBackground(Color.red);
            }
            else if(FIFO.size()==14) { 
                Tag_14.setText(Integer.toString(PC,2));
                Value_14.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag14.setBackground(Color.red);
                Tag_14.setBackground(Color.red);
                Value_14.setBackground(Color.red);
            }
            else if(FIFO.size()==15) { 
                Tag_15.setText(Integer.toString(PC,2));
                Value_15.setText(Integer.toString(Math.abs(IR),2));
                jLabel_Tag15.setBackground(Color.red);
                Tag_15.setBackground(Color.red);
                Value_15.setBackground(Color.red);
            }
            FIFO.add(PC);
            System.out.println("Miss i: "+(FIFO.size()-1)+"\n");
            cache[FIFO.size()-1]=new Cache();
            cache[FIFO.size()-1].Address = PC;
            cache[FIFO.size()-1].Data = IR;
            ConsoleLog.append("Cache Miss!\n");
        }
        else{
            int hit=0;
            for(int i = 0;i<FIFO.size();i++){
                if(cache[i]!=null && cache[i].Address==PC){
                    ConsoleLog.append("Cache Hit!!\n");
                    System.out.println("Hit2: "+i+"\n");
                    hit++;
                    if(i==0){
                        jLabel_Tag0.setBackground(Color.green);
                        Tag_0.setBackground(Color.green);
                        Value_0.setBackground(Color.green);
                        return;
                    }
                    else if(i==1){
                        jLabel_Tag1.setBackground(Color.green);
                        Tag_1.setBackground(Color.green);
                        Value_1.setBackground(Color.green);
                        return;
                    }
                    else if(i==2){
                        jLabel_Tag2.setBackground(Color.green);
                        Tag_2.setBackground(Color.green);
                        Value_2.setBackground(Color.green);
                        return;
                    }
                    else if(i==3){
                        jLabel_Tag3.setBackground(Color.green);
                        Tag_3.setBackground(Color.green);
                        Value_3.setBackground(Color.green);
                        return;
                    }
                    else if(i==4){
                        jLabel_Tag4.setBackground(Color.green);
                        Tag_4.setBackground(Color.green);
                        Value_4.setBackground(Color.green);
                        return;
                    }
                    else if(i==5){
                        jLabel_Tag5.setBackground(Color.green);
                        Tag_5.setBackground(Color.green);
                        Value_5.setBackground(Color.green);
                        return;
                    }
                    else if(i==6){
                        jLabel_Tag6.setBackground(Color.green);
                        Tag_6.setBackground(Color.green);
                        Value_6.setBackground(Color.green);
                        return;
                    }
                    else if(i==7){
                        jLabel_Tag7.setBackground(Color.green);
                        Tag_7.setBackground(Color.green);
                        Value_7.setBackground(Color.green);
                        return;
                    }
                    else if(i==8){
                        jLabel_Tag8.setBackground(Color.green);
                        Tag_8.setBackground(Color.green);
                        Value_8.setBackground(Color.green);
                        return;
                    }
                    else if(i==9){
                        jLabel_Tag9.setBackground(Color.green);
                        Tag_9.setBackground(Color.green);
                        Value_9.setBackground(Color.green);
                        return;
                    }
                    else if(i==10){
                        jLabel_Tag10.setBackground(Color.green);
                        Tag_10.setBackground(Color.green);
                        Value_10.setBackground(Color.green);
                        return;
                    }
                    else if(i==11){
                        jLabel_Tag11.setBackground(Color.green);
                        Tag_11.setBackground(Color.green);
                        Value_11.setBackground(Color.green);
                        return;
                    }
                    else if(i==12){
                        jLabel_Tag12.setBackground(Color.green);
                        Tag_12.setBackground(Color.green);
                        Value_12.setBackground(Color.green);
                        return;
                    }
                    else if(i==13){
                        jLabel_Tag13.setBackground(Color.green);
                        Tag_13.setBackground(Color.green);
                        Value_13.setBackground(Color.green);
                        return;
                    }
                    else if(i==14){
                        jLabel_Tag14.setBackground(Color.green);
                        Tag_14.setBackground(Color.green);
                        Value_14.setBackground(Color.green);
                        return;
                    }
                    else if(i==15){
                        jLabel_Tag15.setBackground(Color.green);
                        Tag_15.setBackground(Color.green);
                        Value_15.setBackground(Color.green);
                        return;
                    }
                }
            }
            if(hit==0)
            {
                short head = FIFO.remove();
                int i;
                System.out.println("miss head2: "+head+"\n");
                for(i = 0;i<16;i++){
                    if(cache[i]!=null && cache[i].Address==head)
                    {
                        System.out.println("head2 i: "+i+"\n");
                        switch (i) 
                        {
                            case 0 -> {
                                jLabel_Tag0.setBackground(Color.red);
                                Tag_0.setBackground(Color.red);
                                Value_0.setBackground(Color.red);
                                Tag_0.setText(Integer.toString(PC,2));
                                Value_0.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 1 -> {
                                jLabel_Tag1.setBackground(Color.red);
                                Tag_1.setBackground(Color.red);
                                Value_1.setBackground(Color.red);
                                Tag_1.setText(Integer.toString(PC,2));
                                Value_1.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 2 -> {
                                jLabel_Tag2.setBackground(Color.red);
                                Tag_2.setBackground(Color.red);
                                Value_2.setBackground(Color.red);
                                Tag_2.setText(Integer.toString(PC,2));
                                Value_2.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 3 -> {
                                jLabel_Tag3.setBackground(Color.red);
                                Tag_3.setBackground(Color.red);
                                Value_3.setBackground(Color.red);
                                Tag_3.setText(Integer.toString(PC,2));
                                Value_3.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 4 -> {
                                jLabel_Tag4.setBackground(Color.red);
                                Tag_4.setBackground(Color.red);
                                Value_4.setBackground(Color.red);
                                Tag_4.setText(Integer.toString(PC,2));
                                Value_4.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 5 -> {
                                jLabel_Tag5.setBackground(Color.red);
                                Tag_5.setBackground(Color.red);
                                Value_5.setBackground(Color.red);
                                Tag_5.setText(Integer.toString(PC,2));
                                Value_5.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 6 -> {
                                jLabel_Tag6.setBackground(Color.red);
                                Tag_6.setBackground(Color.red);
                                Value_6.setBackground(Color.red);
                                Tag_6.setText(Integer.toString(PC,2));
                                Value_6.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 7 -> {
                                jLabel_Tag7.setBackground(Color.red);
                                Tag_7.setBackground(Color.red);
                                Value_7.setBackground(Color.red);
                                Tag_7.setText(Integer.toString(PC,2));
                                Value_7.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 8 -> {
                                jLabel_Tag8.setBackground(Color.red);
                                Tag_8.setBackground(Color.red);
                                Value_8.setBackground(Color.red);
                                Tag_8.setText(Integer.toString(PC,2));
                                Value_8.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 9 -> {
                                jLabel_Tag9.setBackground(Color.red);
                                Tag_9.setBackground(Color.red);
                                Value_9.setBackground(Color.red);
                                Tag_9.setText(Integer.toString(PC,2));
                                Value_9.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 10 -> {
                                jLabel_Tag10.setBackground(Color.red);
                                Tag_10.setBackground(Color.red);
                                Value_10.setBackground(Color.red);
                                Tag_10.setText(Integer.toString(PC,2));
                                Value_10.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 11 -> {
                                jLabel_Tag11.setBackground(Color.red);
                                Tag_11.setBackground(Color.red);
                                Value_11.setBackground(Color.red);
                                Tag_11.setText(Integer.toString(PC,2));
                                Value_11.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 12 -> {
                                jLabel_Tag12.setBackground(Color.red);
                                Tag_12.setBackground(Color.red);
                                Value_12.setBackground(Color.red);
                                Tag_12.setText(Integer.toString(PC,2));
                                Value_12.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 13 -> {
                                jLabel_Tag13.setBackground(Color.red);
                                Tag_13.setBackground(Color.red);
                                Value_13.setBackground(Color.red);
                                Tag_13.setText(Integer.toString(PC,2));
                                Value_13.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 14 -> {
                                jLabel_Tag14.setBackground(Color.red);
                                Tag_14.setBackground(Color.red);
                                Value_14.setBackground(Color.red);
                                Tag_14.setText(Integer.toString(PC,2));
                                Value_14.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            case 15 -> {
                                jLabel_Tag15.setBackground(Color.red);
                                Tag_15.setBackground(Color.red);
                                Value_15.setBackground(Color.red);
                                Tag_15.setText(Integer.toString(PC,2));
                                Value_15.setText(Integer.toString(Math.abs(IR),2));
                                break;
                            }
                            default -> {
                            }
                        }
                        break;
                    }
                }
                if(i==16)
                {
                    i--;
                    System.out.println("New i: "+i+"\n");
                }
                FIFO.add(PC);
                cache[i].Address = PC;
                cache[i].Data = IR;
                ConsoleLog.append("Cache Miss!\n");
            }
        }
    }
    
    private void SSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSActionPerformed
        new Thread(() -> {
            try {
                ExecuteInstruction();
            } catch (InterruptedException ex) {
                Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_SSActionPerformed

    private void OP_15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OP_15ActionPerformed
        if(OP_15.isSelected()){
          OP_15.setBackground(new Color(0, 153, 204));
        } else {
            OP_15.setBackground(Color.white);
        }
    }//GEN-LAST:event_OP_15ActionPerformed

    public void ExecuteInstruction() throws InterruptedException{
        Clear();
        Populate_PC();
        IR = memory[PC];
        Populate_IR();
        UpdateCache();
        ConsoleLog.append("PC: "+Integer.toHexString(PC & 0xffff)+" Instruction: ");
        try {
            Thread.sleep(10);
        } catch (InterruptedException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }   

        short flag_GPR = 0, flag_IXR = 0, flag_I = 0;
        //MAR = PC;

        if(IR == 0)   //Halt
        {
            MAR = PC;
            Populate_MAR();
            for(short i=0;i<20;i++) 

            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
            }

            Halt_Display.setBackground(Color.yellow);

            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
            }
            PC++;
            Populate_PC();
            Run_Display.setBackground(Color.white);
            return;
        }

        String IR_binary = Integer.toBinaryString(IR & 0xFFFF);
        if (IR_binary.length()==32){
            IR_binary=IR_binary.substring(16,32);
        }
        
        if(IR_binary.length() <= 10)
        {
            MBR = IR;

            MAR = PC;
            Populate_MAR();

            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
            }
            Populate_MBR();
        }
        else
        {
            //GPR
            if(IR_binary.charAt(IR_binary.length()-10)=='0' && IR_binary.charAt(IR_binary.length()-9)=='0')
            {
                flag_GPR = 1;
                
            }
            else if(IR_binary.charAt(IR_binary.length()-10)=='0' && IR_binary.charAt(IR_binary.length()-9)=='1')
            {
                flag_GPR = 2;
                
            }
            else if(IR_binary.charAt(IR_binary.length()-10)=='1' && IR_binary.charAt(IR_binary.length()-9)=='0')
            {
                flag_GPR = 3;
                
            }
            else
            {
                flag_GPR = 4;
                
            }

            //IXR
            if(IR_binary.charAt(IR_binary.length()-8)=='0' && IR_binary.charAt(IR_binary.length()-7)=='1')
            {
                flag_IXR = 1;
            }
            else if(IR_binary.charAt(IR_binary.length()-8)=='1' && IR_binary.charAt(IR_binary.length()-7)=='0')
            {
                flag_IXR = 2;
            }
            else if(IR_binary.charAt(IR_binary.length()-8)=='1' && IR_binary.charAt(IR_binary.length()-7)=='1')
            {
                flag_IXR = 3;
            }

            if(IR_binary.charAt(IR_binary.length()-6)=='1')
            {
                flag_I = 1;
            }

            
            //LDR
            if(IR_binary.length() == 11 && IR_binary.charAt(0)=='1')
            {   
                ConsoleLog.append("LDR ");
                //I = 0
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("no Indexing I=0 ");
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                ConsoleLog.append("IX1 I=0 ");
                                MAR = (short) (getAddress(IR) + X1);
                                if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                ConsoleLog.append("IX2 I=0 ");
                                MAR = (short) (getAddress(IR) + X2);
                                if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                ConsoleLog.append("IX3 I=0 ");
                                MAR = (short) (getAddress(IR) + X3);
                                if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    switch(flag_GPR)
                    {
                        case 1 -> {
                            ConsoleLog.append("R0\n");
                            R0 = memory[MAR];
                            Populate_R0();
                        }
                        case 2 -> {
                            ConsoleLog.append("R1\n");
                            R1 = memory[MAR];
                            Populate_R1();
                        }
                        case 3 -> {
                            ConsoleLog.append("R2\n");
                            R2 = memory[MAR];
                            Populate_R2();
                        }
                        case 4 -> {
                            ConsoleLog.append("R3\n");
                            R3 = memory[MAR];
                            Populate_R3();
                        }
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("no Indexing I=1 ");
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : ConsoleLog.append("IX1 I=1 ");MAR = memory[(getAddress(IR) + X1)];if(memoryOutofBoundCheck(MAR)) return;break;
                            case 2 : ConsoleLog.append("IX2 I=1 ");MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;break;
                            case 3 : ConsoleLog.append("IX3 I=1 ");MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;break;
                            default : {
                            }
                        }
                    }

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();
                    

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();
                    

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    switch(flag_GPR)
                    {
                        case 1 -> {
                            ConsoleLog.append("R0\n");
                            R0 = memory[MAR];
                            Populate_R0();
                        }
                        case 2 -> {
                            ConsoleLog.append("R1\n");
                            R1 = memory[MAR];
                            Populate_R1();
                        }
                        case 3 -> {
                            ConsoleLog.append("R2\n");
                            R2 = memory[MAR];
                            Populate_R2();
                        }
                        case 4 -> {
                            ConsoleLog.append("R3\n");
                            R3 = memory[MAR];
                            Populate_R3();
                        }
                    }
                }
            }

            //STR
            else if(IR_binary.length() == 12 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0')
            {
                ConsoleLog.append("STR ");
                //I = 0
                if(flag_I == 0)
                {
                    ConsoleLog.append("I=0 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing ");
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                ConsoleLog.append("IX1 ");
                                MAR = (short) (getAddress(IR) + X1);
                                if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                ConsoleLog.append("IX2 ");
                                MAR = (short) (getAddress(IR) + X2);
                                if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                ConsoleLog.append("IX3 ");
                                MAR = (short) (getAddress(IR) + X3);
                                if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();
                    switch(flag_GPR)
                    {
                        case 1 -> {
                            ConsoleLog.append("R0\n");
                            memory[MAR] = R0;
                            
                        }
                        case 2 -> {
                            ConsoleLog.append("R1\n");
                            memory[MAR] = R1;
                            
                        }
                        case 3 -> {
                            ConsoleLog.append("R2\n");
                            memory[MAR] = R2;
                            
                        }
                        case 4 -> {
                            ConsoleLog.append("R3\n");
                            memory[MAR] = R3;
                            
                        }
                    }
                    MBR = memory[MAR];
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MBR();
                }
                else   //I = 1
                {
                    ConsoleLog.append("I=1 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("no indexing ");
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];ConsoleLog.append("IX1 ");if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];ConsoleLog.append("IX2 ");if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];ConsoleLog.append("IX3 ");if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    switch(flag_GPR)
                    {
                        case 1 -> {
                            ConsoleLog.append("R0\n");
                            memory[MAR] = R0;
                        }
                        case 2 -> {
                            ConsoleLog.append("R1\n");
                            memory[MAR] = R1;
                        }
                        case 3 -> {
                            ConsoleLog.append("R2\n");
                            memory[MAR] = R2;
                        }
                        case 4 -> {
                            ConsoleLog.append("R3\n");
                            memory[MAR] = R3;
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();
                }
            }

            //LDA
            else if(IR_binary.length() == 12 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1')
            {
                //I = 0
                ConsoleLog.append("LDA ");
                if(flag_I == 0)
                {
                    ConsoleLog.append("I=0 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("no indexing ");
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);
                                if(memoryOutofBoundCheck(MAR)) return;
                                ConsoleLog.append("IX1 ");
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);
                                if(memoryOutofBoundCheck(MAR)) return;
                                ConsoleLog.append("IX2 ");
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);
                                if(memoryOutofBoundCheck(MAR)) return;
                                ConsoleLog.append("IX3 ");
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    switch(flag_GPR)
                    {
                        case 1 -> {
                            R0 = MAR;
                            Populate_R0();
                            ConsoleLog.append("R0\n");
                        }
                        case 2 -> {
                            R1 = MAR;
                            Populate_R1();
                            ConsoleLog.append("R1\n");
                        }
                        case 3 -> {
                            R2 = MAR;
                            Populate_R2();
                            ConsoleLog.append("R2\n");
                        }
                        case 4 -> {
                            R3 = MAR;
                            Populate_R3();
                            ConsoleLog.append("R3\n");
                        }
                    }
                }
                else   //I = 1
                {
                    ConsoleLog.append("I=1 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing ");
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];ConsoleLog.append("IX1 ");if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];ConsoleLog.append("IX2 ");if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];ConsoleLog.append("IX3 ");if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    switch(flag_GPR)
                    {
                        case 1 -> {
                            R0 = MAR;
                            Populate_R0();
                            ConsoleLog.append("R0\n");
                        }
                        case 2 -> {
                            R1 = MAR;
                            Populate_R1();
                            ConsoleLog.append("R1\n");
                        }
                        case 3 -> {
                            R2 = MAR;
                            Populate_R2();
                            ConsoleLog.append("R2\n");
                        }
                        case 4 -> {
                            R3 = MAR;
                            Populate_R3();
                            ConsoleLog.append("R3\n");
                        }
                    }
                }
            }

            //LDX
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='0' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("LDX ");
                //I = 0
                if(flag_I == 0)
                {
                    ConsoleLog.append("I=0 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing ");
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                        
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR));
                                if(memoryOutofBoundCheck(MAR)) return;
                                ConsoleLog.append("IX1\n");
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR));
                                if(memoryOutofBoundCheck(MAR)) return;
                                ConsoleLog.append("IX2\n");
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR));
                                if(memoryOutofBoundCheck(MAR)) return;
                                ConsoleLog.append("IX3\n");
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    MBR = memory[MAR];
                    
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    switch(flag_IXR)
                    {
                        case 1 -> {
                            X1 = MBR;
                            Populate_X1();
                        }
                        case 2 -> {
                            X2 = MBR;
                            Populate_X2();
                        }
                        case 3 -> {
                            X3 = MBR;
                            Populate_X3();
                        }
                    }
                }
                else   //I = 1
                {
                    
                    ConsoleLog.append("I=1 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing ");
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR)];ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR)];ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR)];ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    switch(flag_IXR)
                    {
                        case 1 -> {
                            X1 = MAR;
                            Populate_X1();
                        }
                        case 2 -> {
                            X2 = MAR;
                            Populate_X2();
                        }
                        case 3 -> {
                            X3 = MAR;
                            Populate_X3();
                        }
                    }
                }
            }

            //STX
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='0')
            {
                ConsoleLog.append("STX ");
                //I = 0
                if(flag_I == 0)
                {
                    ConsoleLog.append("I=0 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing ");
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();
                    switch(flag_IXR)
                    {
                        case 1 -> {
                            memory[MAR] = X1;
                        }
                        case 2 -> {
                            memory[MAR] = X2;
                        }
                        case 3 -> {
                            memory[MAR] = X3;
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();
                }
                else   //I = 1
                {
                    ConsoleLog.append("I=1 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing ");
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    switch(flag_IXR)
                    {
                        case 1 -> {
                            memory[MAR] = X1;
                        }
                        case 2 -> {
                            memory[MAR] = X2;
                        }
                        case 3 -> {
                            memory[MAR] = X3;
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();
                }
            }
            //JZ
            else if(IR_binary.length() == 14 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='0')
            {
                short Rx=0;
                ConsoleLog.append("JZ ");

                //Check for Rx
                if(IR_binary.charAt(4)=='0' && 
                IR_binary.charAt(5)=='0') //Rx = R0
                {
                    Rx=R0;
                    ConsoleLog.append("R0 ");
                }
                else if(IR_binary.charAt(4)=='0' && 
                IR_binary.charAt(5)=='1') //Rx = R1
                {
                    Rx=R1;
                    ConsoleLog.append("R1 ");
                }
                else if(IR_binary.charAt(4)=='1' && 
                IR_binary.charAt(5)=='0') //Rx = R2
                {
                    Rx=R2;
                    ConsoleLog.append("R2 ");
                }
                else //Rx = R3
                {
                    Rx=R3;
                    ConsoleLog.append("R3 ");
                }
                

                //I = 0
                if(flag_I == 0)
                {
                    ConsoleLog.append("I=0 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing \n");
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    ConsoleLog.append("I=1 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                        ConsoleLog.append("No Indexing \n");
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                    
                if(Rx==0)
                {
                    PC=(short) (MAR-1);
                }
            }

            //JNE
            else if(IR_binary.length() == 14 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1')
            {
                short Rx=0;
                ConsoleLog.append("JNE ");

                //Check for Rx
                if(IR_binary.charAt(4)=='0' && 
                IR_binary.charAt(5)=='0') //Rx = R0
                {
                    Rx=R0;
                    ConsoleLog.append("R0 ");
                }
                else if(IR_binary.charAt(4)=='0' && 
                IR_binary.charAt(5)=='1') //Rx = R1
                {
                    Rx=R1;
                    ConsoleLog.append("R1 ");
                }
                else if(IR_binary.charAt(4)=='1' && 
                IR_binary.charAt(5)=='0') //Rx = R2
                {
                    Rx=R2;
                    ConsoleLog.append("R2 ");
                }
                else //Rx = R3
                {
                    Rx=R3;
                    ConsoleLog.append("R3 ");
                }
                //I = 0
                if(flag_I == 0)
                {
                    ConsoleLog.append("I=0 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing \n");
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    ConsoleLog.append("I=1 ");
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        ConsoleLog.append("No Indexing \n");
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];ConsoleLog.append("IX1\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];ConsoleLog.append("IX2\n");if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];ConsoleLog.append("IX3\n");if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if(Rx!=0){
                    PC=(short) (MAR-1);
                }
            }

            //JCC
            else if(IR_binary.length() == 14 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0')
            {
                short CC=0;
                ConsoleLog.append("JCC ");

                //Check for Rx
                if(IR_binary.charAt(4)=='0' && 
                IR_binary.charAt(5)=='0') //CC = CC0
                {
                    CC=CC0;
                    ConsoleLog.append("CC0 ");
                }
                else if(IR_binary.charAt(4)=='0' && 
                IR_binary.charAt(5)=='1') //CC = CC1
                {
                    CC=CC1;
                    ConsoleLog.append("CC1 ");
                }
                else if(IR_binary.charAt(4)=='1' && 
                IR_binary.charAt(5)=='0') //CC = CC2
                {
                    CC=CC2;
                    ConsoleLog.append("CC2 ");
                }
                else //Rx = R3
                {
                    CC=CC3;
                    ConsoleLog.append("CC3 ");
                }

                if(CC==1){
                    //I = 0
                    if(flag_I == 0)
                    {
                        ConsoleLog.append("I=0");
                        //No Indexing
                        if(flag_IXR == 0)
                        {
                            ConsoleLog.append("No Indexing\n");
                            MAR = getAddress(IR);
                            if(memoryOutofBoundCheck(MAR)) return;
                        }
                        else  //Indexed
                        {
                            switch (flag_IXR) {
                                case 1 -> {
                                    MAR = (short) (getAddress(IR) + X1);ConsoleLog.append("IX1 \n");if(memoryOutofBoundCheck(MAR)) return;
                                }
                                case 2 -> {
                                    MAR = (short) (getAddress(IR) + X2);ConsoleLog.append("IX2 \n");if(memoryOutofBoundCheck(MAR)) return;
                                }
                                case 3 -> {
                                    MAR = (short) (getAddress(IR) + X3);ConsoleLog.append("IX3 \n");if(memoryOutofBoundCheck(MAR)) return;
                                }
                                default -> {
                                }
                            }
                        }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Populate_MAR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        MBR = memory[MAR];
                        Populate_MBR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else   //I = 1
                    {
                        //No Indexing
                        if(flag_IXR == 0)
                        {
                            MAR = memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                        }
                        else  //Indexed
                        {
                            switch (flag_IXR) {
                                case 1 : MAR = memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                                case 2 : MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                                case 3 : MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                                default : {
                                }
                            }
                        }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Populate_MAR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        MBR = memory[MAR];
                        Populate_MBR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    PC=(short) (MAR-1);
                }
            }

            //JMA
            else if(IR_binary.length() == 14 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='1')
            {
                ConsoleLog.append("JMA ");

                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                PC=(short) (MAR-1);
            }

            //JSR
            else if(IR_binary.length() == 14 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='0')
            {
                ConsoleLog.append("JSR ");

                R3=(short) (PC+1);
                Populate_R3();

                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                PC=(short) (MAR-1);
            }

            //RFS
            else if(IR_binary.length() == 14 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1')
            {
                ConsoleLog.append("RFS ");
                R0=getAddress(IR);
                Populate_R0();
                PC = (short) (R3-1);
            }

            //SOB
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='0')
            {
                ConsoleLog.append("SOB ");
                short Rx=0, x=0;
                
                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    
                    R0=(short) (R0-1);
                    Rx=R0;
                    x=0;
                    Populate_R0();
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    
                    R1=(short) (R1-1);
                    Rx=R1;
                    x=1;
                    Populate_R1();
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    
                    R2=(short) (R2-1);
                    Rx=R2;
                    x=2;
                    Populate_R2();
                }
                else //Rx = R3
                {
                    
                    R3=(short) (R3-1);
                    
                    Rx=R3;
                    x=3;
                    Populate_R3();
                }
                if(Rx>0){
                    //I = 0
                    if(flag_I == 0)
                    {
                        //No Indexing
                        if(flag_IXR == 0)
                        {
                            
                            MAR = getAddress(IR);
                            if(memoryOutofBoundCheck(MAR)) return;
                        }
                        else  //Indexed
                        {
                            switch (flag_IXR) {
                                case 1 -> {
                                    MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                                }
                                case 2 -> {
                                    MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                                }
                                case 3 -> {
                                    MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                                }
                                default -> {
                                }
                            }
                        }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Populate_MAR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        MBR = memory[MAR];
                        Populate_MBR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else   //I = 1
                    {
                        //No Indexing
                        if(flag_IXR == 0)
                        {
                            MAR = memory[getAddress(IR)];
                            if(memoryOutofBoundCheck(MAR)) return;
                        }
                        else  //Indexed
                        {
                            switch (flag_IXR) {
                                case 1 : MAR = memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                                case 2 : MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                                case 3 : MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                                default : {
                                }
                            }
                        }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Populate_MAR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        MBR = memory[MAR];
                        Populate_MBR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    PC=(short) (MAR-1);
                }
            }

            //JGE
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1')
            {
                short Rx=0;
                ConsoleLog.append("JGE ");
                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                }
                if(Rx>=0){
                    //I = 0
                    if(flag_I == 0)
                    {
                        //No Indexing
                        if(flag_IXR == 0)
                        {
                            
                            MAR = getAddress(IR);
                            if(memoryOutofBoundCheck(MAR)) return;
                        }
                        else  //Indexed
                        {
                            switch (flag_IXR) {
                                case 1 -> {
                                    MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                                }
                                case 2 -> {
                                    MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                                }
                                case 3 -> {
                                    MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                                }
                                default -> {
                                }
                            }
                        }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Populate_MAR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        MBR = memory[MAR];
                        Populate_MBR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else   //I = 1
                    {
                        //No Indexing
                        if(flag_IXR == 0)
                        {
                            MAR = memory[getAddress(IR)];
                            if(memoryOutofBoundCheck(MAR)) return;
                        }
                        else  //Indexed
                        {
                            switch (flag_IXR) {
                                case 1 : MAR = memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                                case 2 : MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                                case 3 : MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                                default : {
                                }
                            }
                        }
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Populate_MAR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        MBR = memory[MAR];
                        Populate_MBR();

                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                    PC=(short) (MAR-1);
                }
            }

            //AMR
            else if(IR_binary.length() == 13 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0')
            {
                ConsoleLog.append("AMR ");
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = memory[getAddress(IR)];
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                short Rx=0;

                //Check for Rx
                if(IR_binary.charAt(3)=='0' && 
                IR_binary.charAt(4)=='0') //Rx = R0
                {
                    R0=(short) (R0+memory[MAR]);
                    Populate_R0();
                    if(R0>=Math.pow(2,16)){
                        CC0=1;
                        Populate_CC();
                    }
                    else{
                        CC0=0;
                        Populate_CC();
                    }
                }
                else if(IR_binary.charAt(3)=='0' && 
                IR_binary.charAt(4)=='1') //Rx = R1
                {
                    R1=(short) (R1+memory[MAR]);
                    Populate_R1();
                    if(R1>=Math.pow(2,16)){
                        CC0=1;
                        Populate_CC();
                    }
                    else{
                        CC0=0;
                        Populate_CC();
                    }
                }
                else if(IR_binary.charAt(3)=='1' && 
                IR_binary.charAt(4)=='0') //Rx = R2
                {
                    R2=(short) (R2+memory[MAR]);
                    Populate_R2();
                    if(R2>=Math.pow(2,16)){
                        CC0=1;
                        Populate_CC();
                    }
                    else{
                        CC0=0;
                        Populate_CC();
                    }
                }
                else //Rx = R3
                {
                    
                    R3=(short) (R3+memory[MAR]);
                    
                    Populate_R3();
                    if(R3>=Math.pow(2,16)){
                        CC0=1;
                        Populate_CC();
                    }
                    else{
                        CC0=0;
                        Populate_CC();
                    }
                }
            }

            //SMR
            else if(IR_binary.length() == 13 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1')
            {
                ConsoleLog.append("SMR ");
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                short Rx=0;

                //Check for Rx
                if(IR_binary.charAt(3)=='0' && 
                IR_binary.charAt(4)=='0') //Rx = R0
                {
                    R0=(short) (R0-memory[MAR]);
                    Populate_R0();
                }
                else if(IR_binary.charAt(3)=='0' && 
                IR_binary.charAt(4)=='1') //Rx = R1
                {
                    R1=(short) (R1-memory[MAR]);
                    Populate_R1();
                }
                else if(IR_binary.charAt(3)=='1' && 
                IR_binary.charAt(4)=='0') //Rx = R2
                {
                    R2=(short) (R2-memory[MAR]);
                    Populate_R2();
                }
                else //Rx = R3
                {
                    R3=(short) (R3-memory[MAR]);
                    Populate_R3();
                }
            }

            //AIR
            else if(IR_binary.length() == 13 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0')
            {
                ConsoleLog.append("AIR ");
                short Immed=getAddress(IR);
                //Check for Rx
                if(Immed!=0)
                {
                    if(IR_binary.charAt(3)=='0' && 
                    IR_binary.charAt(4)=='0') //Rx = R0
                    {
                        R0=(short) (R0+Immed);
                        Populate_R0();
                    }
                    else if(IR_binary.charAt(3)=='0' && 
                    IR_binary.charAt(4)=='1') //Rx = R1
                    {
                        R1=(short) (R1+Immed);
                        Populate_R1();
                    }
                    else if(IR_binary.charAt(3)=='1' && 
                    IR_binary.charAt(4)=='0') //Rx = R2
                    {
                        R2=(short) (R2+Immed);
                        Populate_R2();
                    }
                    else //Rx = R3
                    {
                        R3=(short) (R3+Immed);
                        Populate_R3();
                    }
                }
            }

            //SIR
            else if(IR_binary.length() == 13 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1')
            {
                ConsoleLog.append("SIR ");
                short Immed=getAddress(IR);
                //Check for Rx
                if(Immed!=0)
                {
                    if(IR_binary.charAt(3)=='0' && 
                    IR_binary.charAt(4)=='0') //Rx = R0
                    {
                        R0=(short) (R0-Immed);
                        Populate_R0();
                    }
                    else if(IR_binary.charAt(3)=='0' && 
                    IR_binary.charAt(4)=='1') //Rx = R1
                    {
                        R1=(short) (R1-Immed);
                        Populate_R1();
                    }
                    else if(IR_binary.charAt(3)=='1' && 
                    IR_binary.charAt(4)=='0') //Rx = R2
                    {
                        R2=(short) (R2-Immed);
                        Populate_R2();
                    }
                    else //Rx = R3
                    {
                        R3=(short) (R3-Immed);
                        Populate_R3();
                    }
                }
            }

            //MLT
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='0')
            {
                ConsoleLog.append("MLT ");
                short Rx=0, Ry=0, x=0, y=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                    ConsoleLog.append("Rx=R0 ");
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                    ConsoleLog.append("Rx=R1 ");
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                    ConsoleLog.append("Rx=R2 ");
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                    ConsoleLog.append("Rx=R3 ");
                }

                //Check for Ry
                if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='0') //Ry = R0
                {
                    Ry=R0;
                    y=0;
                    ConsoleLog.append("Ry=R0 ");
                }
                else if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='1') //Ry = R1
                {
                    Ry=R1;
                    y=1;
                    ConsoleLog.append("Ry=R1 ");
                }
                else if(IR_binary.charAt(7)=='1' && 
                IR_binary.charAt(8)=='0') //Ry = R2
                {
                    Ry=R2;
                    y=2;
                    ConsoleLog.append("Ry=R2 ");
                }
                else //Rx = R3
                {
                    Ry=R3;
                    y=3;
                    ConsoleLog.append("Ry=R3 ");
                }
                
                
                int Mlt = Rx * Ry;
                String Mlt_binary = String.format("%"+16+"s",Integer.toBinaryString(Mlt)).replaceAll(" ","0");
                
                if(Mlt>=Math.pow(2, 16)) {
                    CC0=1;
                    Populate_CC();
                }
                else{
                    CC0=0;
                    Populate_CC();
                }
                if(x==0){
                    /*R0=Short.parseShort(Mlt_binary.substring(16,24),2);
                    
                    R1=Short.parseShort(Mlt_binary.substring(24,32),2);
                    */
                    R0=Short.parseShort(Mlt_binary.substring(0,8),2);
                    
                    R1=Short.parseShort(Mlt_binary.substring(8,16),2);
                    
                    Populate_R0();
                    Populate_R1();
                }
                else if(x==2){
                    /*R2=Short.parseShort(Mlt_binary.substring(16,24),2);
                    
                    R3=Short.parseShort(Mlt_binary.substring(24,32),2);
                    */
                    R2=Short.parseShort(Mlt_binary.substring(0,8),2);
                    
                    R3=Short.parseShort(Mlt_binary.substring(8,16),2);
                    
                    Populate_R2();
                    Populate_R3();
                }
            }

            //DVD
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1')
            {
                ConsoleLog.append("DVD ");
                short Rx=0, Ry=0, x=0, y=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                }

                //Check for Ry
                if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='0') //Ry = R0
                {
                    Ry=R0;
                    y=0;
                }
                else if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='1') //Ry = R1
                {
                    Ry=R1;
                    y=1;
                }
                else if(IR_binary.charAt(7)=='1' && 
                IR_binary.charAt(8)=='0') //Ry = R2
                {
                    Ry=R2;
                    y=2;
                }
                else //Rx = R3
                {
                    Ry=R3;
                    y=3;
                }

                if(Ry == 0){
                    CC2=1;
                    Populate_CC();
                }
                else
                {
                    CC2=0;
                    Populate_CC();
                    short Quotient = (short) (Rx / Ry);
                    short Remainder = (short) (Rx % Ry);
                    if(x==0){
                        R0 = Quotient;
                        R1 = Remainder;
                        Populate_R0();
                        Populate_R1();
                    }
                    else if(x==2){
                        R2 = Quotient;
                        R3 = Remainder;
                        Populate_R2();
                        Populate_R3();
                    }
                }
            }

            //TRR
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='0')
            {
                ConsoleLog.append("TRR ");
                short Rx=0, Ry=0, x=0, y=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                }

                //Check for Ry
                if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='0') //Ry = R0
                {
                    Ry=R0;
                    y=0;
                }
                else if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='1') //Ry = R1
                {
                    Ry=R1;
                    y=1;
                }
                else if(IR_binary.charAt(7)=='1' && 
                IR_binary.charAt(8)=='0') //Ry = R2
                {
                    Ry=R2;
                    y=2;
                }
                else //Rx = R3
                {
                    Ry=R3;
                    y=3;
                }

                if(Rx == Ry){
                    CC3=1;
                    Populate_CC();
                }
                else{
                    CC3=0;
                    Populate_CC();
                }
            }

            //AND
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='1')
            {
                ConsoleLog.append("AND ");
                short Rx=0, Ry=0, x=0, y=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                }

                //Check for Ry
                if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='0') //Ry = R0
                {
                    Ry=R0;
                    y=0;
                }
                else if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='1') //Ry = R1
                {
                    Ry=R1;
                    y=1;
                }
                else if(IR_binary.charAt(7)=='1' && 
                IR_binary.charAt(8)=='0') //Ry = R2
                {
                    Ry=R2;
                    y=2;
                }
                else //Rx = R3
                {
                    Ry=R3;
                    y=3;
                }

                Rx = (short) (Rx & Ry);
                if(x == 0){
                    R0=Rx;
                    Populate_R0();
                }
                else if(x == 1){
                    R1=Rx;
                    Populate_R1();
                }
                else if(x == 2){
                    R2=Rx;
                    Populate_R2();
                }
                else{
                    R3=Rx;
                    Populate_R3();
                }
            }

            //ORR
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='0')
            {
                ConsoleLog.append("ORR ");
                short Rx=0, Ry=0, x=0, y=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                }

                //Check for Ry
                if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='0') //Ry = R0
                {
                    Ry=R0;
                    y=0;
                }
                else if(IR_binary.charAt(7)=='0' && 
                IR_binary.charAt(8)=='1') //Ry = R1
                {
                    Ry=R1;
                    y=1;
                }
                else if(IR_binary.charAt(7)=='1' && 
                IR_binary.charAt(8)=='0') //Ry = R2
                {
                    Ry=R2;
                    y=2;
                }
                else //Rx = R3
                {
                    Ry=R3;
                    y=3;
                }

                Rx = (short) (Rx | Ry);
                if(x == 0){
                    R0=Rx;
                    Populate_R0();
                }
                else if(x == 1){
                    R1=Rx;
                    Populate_R1();
                }
                else if(x == 2){
                    R2=Rx;
                    Populate_R2();
                }
                else{
                    R3=Rx;
                    Populate_R3();
                }
            }

            //NOT
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1')
            {
                ConsoleLog.append("NOT ");
                short Rx=0, x=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                }

                Rx=(short) ~(Rx);
                if(x == 0){
                    R0=Rx;
                    Populate_R0();
                }
                else if(x == 1){
                    R1=Rx;
                    Populate_R1();
                }
                else if(x == 2){
                    R2=Rx;
                    Populate_R2();
                }
                else{
                    R3=Rx;
                    Populate_R3();
                }
            }

            //SRC
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='1')
            {
                ConsoleLog.append("SRC ");
                short x=0, Count=getAddress(IR), LR=0, AL=0;
                short Rx=0;

                //Check for Rx
                if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='0') //Rx = R0
                {
                    Rx=(short) R0;
                    x=0;
                }
                else if(IR_binary.charAt(5)=='0' && 
                IR_binary.charAt(6)=='1') //Rx = R1
                {
                    Rx=(short) R1;
                    x=1;
                }
                else if(IR_binary.charAt(5)=='1' && 
                IR_binary.charAt(6)=='0') //Rx = R2
                {
                    Rx=(short) R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=(short) R3;
                    x=3;
                }

                if((IR_binary.charAt(7)=='1' && IR_binary.charAt(8)=='1')||(IR_binary.charAt(7)=='0' && IR_binary.charAt(8)=='1')){ //Shift left, logically or Sift left, arithmetically
                    Rx=(short) (Rx<<(short) Count);
                    
                }
                else if(IR_binary.charAt(7)=='1' && IR_binary.charAt(8)=='0'){ //Shift right, arithmeticallyString Rx_bin = Integer.toBinaryString(Rx&0xFFFF);
                    String Rx_bin = String.format("%"+16+"s",Integer.toBinaryString(Rx&0xFFFF)).replaceAll(" ","0");
                    if(Rx_bin.charAt(16-Count)=='1'){
                        CC1=1;
                        Populate_CC();
                    }
                    else
                    {
                        CC1=0;
                        Populate_CC();    
                    }
                    Rx=(short) (Rx>>(short) Count);
                    
                }
                else{ //shift right, logically
                    //Rx= (Rx>>> Count);
                    /*short Rtemp=Rx;
                    
                    Rtemp= (short) (Rtemp >>> Count);
                    Rx=(short) Rtemp;*/
                    String Rx_bin = String.format("%"+16+"s",Integer.toBinaryString(Rx&0xFFFF)).replaceAll(" ","0");
                    if(Rx_bin.charAt(16-Count)=='1'){
                        CC1=1;
                        Populate_CC();
                    }
                    else
                    {
                        CC1=0;
                        Populate_CC();    
                    }
                    Rx=(short) (Rx>>>(short) Count);
                    
                }

                switch (x) {
                    case 0 -> {
                        R0=Rx;
                        Populate_R0();
                    }
                    case 1 -> {
                        R1=Rx;
                        Populate_R1();
                    }
                    case 2 -> {
                        R2=Rx;
                        Populate_R2();
                    }
                    default -> {
                        R3=Rx;
                        Populate_R3();
                    }
                }
            }

            //RRC
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='0' &&
                    IR_binary.charAt(5)=='0')
            {
                ConsoleLog.append("RRC ");
                short Rx=0, x=0, Count=getAddress(IR);

                //Check for Rx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Rx = R0
                {
                    Rx=R0;
                    x=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Rx = R1
                {
                    Rx=R1;
                    x=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //Rx = R2
                {
                    Rx=R2;
                    x=2;
                }
                else //Rx = R3
                {
                    Rx=R3;
                    x=3;
                }

                if((IR_binary.charAt(7)=='1' && IR_binary.charAt(8)=='1')||(IR_binary.charAt(7)=='0' && IR_binary.charAt(8)=='1')){ //rotate left, logically or rotate left, arithmetically
                    Rx=(short) ((Rx << Count) | (Rx >> (16 - Count)));
                }
                else{
                    Rx=(short) ((Rx >> Count) | (Rx << (16 - Count)));
                }
                if(Rx>=Math.pow(2,16)){
                    CC0=1;
                    Populate_CC();
                }
                else{
                    CC0=0;
                    Populate_CC();
                }

                switch (x) {
                    case 0 -> {
                        R0=Rx;
                        Populate_R0();
                    }
                    case 1 -> {
                        R1=Rx;
                        Populate_R1();
                    }
                    case 2 -> {
                        R2=Rx;
                        Populate_R2();
                    }
                    default -> {
                        R3=Rx;
                        Populate_R3();
                    }
                }
            }
            
            //IN
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='0' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("IN ");
                short DevID=getAddress(IR);
                Input.setBackground(Color.yellow);
                if(DevID==0){
                    while(InputSignal==0){
                    }
                }
                else{
                    ConsoleLog.append("Incorrect DEVID\n");
                }
                //Check for Rx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Rx = R0
                {
                    R0=InputVal;
                    Populate_R0();
                    ConsoleLog.append("R0\n");
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Rx = R1
                {
                    R1=InputVal;
                    Populate_R1();
                    ConsoleLog.append("R1\n");
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //Rx = R2
                {
                    R2=InputVal;
                    Populate_R2();
                    ConsoleLog.append("R2\n");
                }
                else //Rx = R3
                {
                    R3=InputVal;
                    Populate_R3();
                    ConsoleLog.append("R3\n");
                }
                InputSignal = 0;
                
                Thread.sleep(10);
                Input.setBackground(Color.white);
            }
            
            //OUT
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='0')
            {
                ConsoleLog.append("OUT\n");
                
                short DevID=getAddress(IR);
                if(DevID!=1){
                    ConsoleLog.append("Incorrect DEVID\n");
                }
                //Check for Rx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Rx = R0
                {
                    
                    Printer.append(String.valueOf(Character.toString ((char) R0)));
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Rx = R1
                {
                    
                    Printer.append(String.valueOf(Character.toString ((char) R1)));
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //Rx = R2
                {
                    
                    Printer.append(String.valueOf(Character.toString ((char) R2)));
                }
                else //Rx = R3
                {
                    
                    Printer.append(String.valueOf(Character.toString ((char) R3)));
                }
            }
            
            //CHK
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("CHK ");
                short DevID=getAddress(IR);
                if(DevID!=0 || DevID!=1){
                    ConsoleLog.append("Check DEVID\n");
                }
                //Check for Rx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Rx = R0
                {
                    R0=1;
                    Populate_R0();
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Rx = R1
                {
                    R1=1;
                    Populate_R1();
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //Rx = R2
                {
                    R2=1;
                    Populate_R2();
                }
                else //Rx = R3
                {
                    R3=1;
                    Populate_R3();
                }
            }
            
            // FADD
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='0' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("FADD ");
                short Fx=0;
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    Fx=FR0;
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    Fx=FR1;
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                double FRVal = convertToFloat(Fx);
                System.out.println("FRVal: "+FRVal);
                double memFloatVal = convertToFloat(MBR);
                System.out.println("memFloatVal: "+memFloatVal);
                FRVal+=memFloatVal;
                System.out.println("Added FRVal: "+FRVal);
                double memFloat = getIntValofFloat(FRVal);
                memory[MAR]=(short)memFloat;
                if(FRVal>=Math.pow(2,16)){
                    CC0=1;
                    Populate_CC();
                }
                else{
                    CC0=0;
                    Populate_CC();
                }
                if(flag_F==0){
                    Populate_FR0();
                }
                else{
                    Populate_FR1();
                }
            }
            
            // FSUB
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='0')
            {
                ConsoleLog.append("FADD ");
                short Fx=0;
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    Fx=FR0;
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    Fx=FR1;
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                double FRVal = convertToFloat(Fx);
                double memFloatVal = convertToFloat(MBR);
                FRVal-=memFloatVal;
                short memFloat = (short)getIntValofFloat(FRVal);
                memory[MAR]=memFloat;
                if(FRVal<=-1*Math.pow(2,16)){
                    CC1=1;
                    Populate_CC();
                }
                else{
                    CC1=0;
                    Populate_CC();
                }
                if(flag_F==0){
                    Populate_FR0();
                }
                else{
                    Populate_FR1();
                }
            }
            
            // VADD
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("VADD ");
                short Fx=0;
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    Fx=FR0;
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    Fx=FR1;
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                double FRVal = convertToFloat(Fx);
                for(int i=1;i<=FRVal;i++){
                    double memFloatVal1 = convertToFloat((short) (memory[MAR+i-1]));
                    double memFloatVal2 = convertToFloat((short) (memory[MAR+i]));
                    memFloatVal1+=memFloatVal2;
                    short memFloatVal = (short)getIntValofFloat(memFloatVal1);
                    memory[MAR+i-1]=(short) memFloatVal;
                }
            }
            
            // VSUB
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='0' &&
                    IR_binary.charAt(5)=='0')
            {
                ConsoleLog.append("VSUB ");
                short Fx=0;
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    Fx=FR0;
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    Fx=FR1;
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                double FRVal = convertToFloat(Fx);
                for(int i=1;i<=FRVal;i++){
                    double memFloatVal1 = convertToFloat((short) (memory[MAR+i-1]));
                    double memFloatVal2 = convertToFloat((short) (memory[MAR+i]));
                    memFloatVal1-=memFloatVal2;
                    short memFloatVal = (short)getIntValofFloat(memFloatVal1);
                    memory[MAR+i-1]=(short) memFloatVal;
                }
            }
            
            // CNVRT
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='0' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='0' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("CNVRT ");
                short Fx=0;
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    Fx=FR0;
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    Fx=FR1;
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                if(Fx==0){ //convert to floating point
                    short FRVal = MBR;
                    short memFloatVal = (short)getIntValofFloat(FRVal);
                    memory[MAR]=memFloatVal;
                }
                else{ //convert to integer
                    short FRVal = (short) convertToFloat(MBR);
                    memory[MAR]=FRVal;
                }
                if(flag_F==0){
                    Populate_FR0();
                }
                else{
                    Populate_FR1();
                }
            }
                        
            // LDFR
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='0')
            {
                ConsoleLog.append("LDFR ");
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                if(flag_F==0){ //Load Floating Register FR0 from Memory
                    FR0 = MBR;
                }
                else{ //Load Floating Register FR1 from Memory
                    FR1 = MBR;
                }
                if(flag_F==0){
                    Populate_FR0();
                }
                else{
                    Populate_FR1();
                }
            }

            // STFR
            else if(IR_binary.length() == 16 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='0' &&
                    IR_binary.charAt(3)=='0' &&
                    IR_binary.charAt(4)=='1' &&
                    IR_binary.charAt(5)=='1')
            {
                ConsoleLog.append("STFR ");
                int flag_F=-1;
                //Check for Fx
                if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='0') //Fx = FR0
                {
                    flag_F=0;
                }
                else if(IR_binary.charAt(6)=='0' && 
                IR_binary.charAt(7)=='1') //Fx = FR1
                {
                    flag_F=1;
                }
                else if(IR_binary.charAt(6)=='1' && 
                IR_binary.charAt(7)=='0') //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                else //throw error
                {
                    ConsoleLog.append("Incorrect FR value given\n");
                }
                if(flag_I == 0)
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        
                        MAR = getAddress(IR);
                        if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 -> {
                                MAR = (short) (getAddress(IR) + X1);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 2 -> {
                                MAR = (short) (getAddress(IR) + X2);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            case 3 -> {
                                MAR = (short) (getAddress(IR) + X3);if(memoryOutofBoundCheck(MAR)) return;
                            }
                            default -> {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else   //I = 1
                {
                    //No Indexing
                    if(flag_IXR == 0)
                    {
                        MAR = (short) memory[getAddress(IR)];if(memoryOutofBoundCheck(MAR)) return;
                    }
                    else  //Indexed
                    {
                        switch (flag_IXR) {
                            case 1 : MAR = (short) memory[getAddress(IR) + X1];if(memoryOutofBoundCheck(MAR)) return;
                            case 2 : MAR = (short) memory[getAddress(IR) + X2];if(memoryOutofBoundCheck(MAR)) return;
                            case 3 : MAR = (short) memory[getAddress(IR) + X3];if(memoryOutofBoundCheck(MAR)) return;
                            default : {
                            }
                        }
                    }
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Populate_MAR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    MBR = (short) memory[MAR];
                    Populate_MBR();

                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                if(flag_F==0){ //Store Floating Register FR0 to Memory
                    memory[MAR] = FR0;
                }
                else{ //Store Floating Register FR1 to Memory
                    memory[MAR] = FR1;
                }
                if(flag_F==0){
                    Populate_FR0();
                }
                else{
                    Populate_FR1();
                }
            }
            
            //TRAP
            else if(IR_binary.length() == 15 &&
                    IR_binary.charAt(0)=='1' &&
                    IR_binary.charAt(1)=='1' &&
                    IR_binary.charAt(2)=='1' &&
                    IR_binary.charAt(3)=='1' &&
                    IR_binary.charAt(4)=='0')
            {
                 ConsoleLog.append("TRAP instruction start.\n");
		short Count=getAddress(IR);
                ConsoleLog.append("EA : " + Count);
		int trapCode = Count;
                ConsoleLog.append(" Count : " + trapCode+"\n");
		 if(trapCode>15 || trapCode<0) {
	        	MFR= 2; // Illegal Code
                        Populate_MFR();
	        }
		// Storing the value of  PC+1 in the memory location 2
                memory[2]=  (short) (PC+1);
                ConsoleLog.append("Memory 2." + memory[2]+"\n");
		PC =(short) (trapCode + memory[0]);
		ConsoleLog.append("TRAP instruction end.\n");
            }
            else {
                MFR= 4; // Illegal Op code
                PC =(short) (memory[1]);
                ConsoleLog.append("Illegal OPCODE!\n");
                Populate_MFR();
            }
        }   
        
        try {
            Thread.sleep(10);
        } catch (InterruptedException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        PC++;
        Populate_PC();
    }
    
    public void Populate_MFR(){
        String MFR_binary = Integer.toBinaryString(MFR);
        if (MFR_binary.length()>=1 && MFR_binary.charAt(MFR_binary.length()-1)=='1'){
            MFR_0.setBackground(Color.yellow);
        }
        else{
            MFR_0.setBackground(Color.decode("#F2F2F2"));
        }
        if (MFR_binary.length()>=2 && MFR_binary.charAt(MFR_binary.length()-2)=='1'){
            MFR_1.setBackground(Color.yellow);
        }
        else{
            MFR_1.setBackground(Color.decode("#F2F2F2"));
        }
        if (MFR_binary.length()>=3 && MFR_binary.charAt(MFR_binary.length()-3)=='1'){
            MFR_2.setBackground(Color.yellow);
        }
        else{
            MFR_2.setBackground(Color.decode("#F2F2F2"));
        }
        if (MFR_binary.length()>=4 && MFR_binary.charAt(MFR_binary.length()-4)=='1'){
            MFR_3.setBackground(Color.yellow);
        }
        else{
            MFR_3.setBackground(Color.decode("#F2F2F2"));
        }
        
      
    }
    
    private void RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                Run_Display.setBackground(Color.yellow);
                short flag_Halt = 0;
                while(flag_Halt == 0){
                    try {
                        ExecuteInstruction();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(IR==0){
                        ConsoleLog.append("Machine HALTed !\n");
                        break;
                    }
                }
            }
        }).start();
    }//GEN-LAST:event_RunActionPerformed

    private void OP_14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OP_14ActionPerformed
        if(OP_14.isSelected()){
          OP_14.setBackground(new Color(0, 153, 204));
        } else {
            OP_14.setBackground(Color.white);
        }
    }//GEN-LAST:event_OP_14ActionPerformed

    private void OP_13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OP_13ActionPerformed
        if(OP_13.isSelected()){
          OP_13.setBackground(new Color(0, 153, 204));
        } else {
            OP_13.setBackground(Color.white);
        }
    }//GEN-LAST:event_OP_13ActionPerformed

    private void OP_12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OP_12ActionPerformed
        if(OP_12.isSelected()){
          OP_12.setBackground(new Color(0, 153, 204));
        } else {
            OP_12.setBackground(Color.white);
        }
    }//GEN-LAST:event_OP_12ActionPerformed

    private void OP_11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OP_11ActionPerformed
        if(OP_11.isSelected()){
          OP_11.setBackground(new Color(0, 153, 204));
        } else {
            OP_11.setBackground(Color.white);
        }
    }//GEN-LAST:event_OP_11ActionPerformed

    private void OP_10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OP_10ActionPerformed
        if(OP_10.isSelected()){
          OP_10.setBackground(new Color(0, 153, 204));
        } else {
            OP_10.setBackground(Color.white);
        }
    }//GEN-LAST:event_OP_10ActionPerformed

    private void GPR_9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GPR_9ActionPerformed
        if(GPR_9.isSelected()){
          GPR_9.setBackground(new Color(0, 153, 204));
        } else {
            GPR_9.setBackground(Color.white);
        }
    }//GEN-LAST:event_GPR_9ActionPerformed

    private void GPR_8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GPR_8ActionPerformed
        if(GPR_8.isSelected()){
          GPR_8.setBackground(new Color(0, 153, 204));
        } else {
            GPR_8.setBackground(Color.white);
        }
    }//GEN-LAST:event_GPR_8ActionPerformed

    private void IXR_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IXR_7ActionPerformed
        if(IXR_7.isSelected()){
          IXR_7.setBackground(new Color(0, 153, 204));
        } else {
            IXR_7.setBackground(Color.white);
        }
    }//GEN-LAST:event_IXR_7ActionPerformed

    private void IXR_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IXR_6ActionPerformed
        if(IXR_6.isSelected()){
          IXR_6.setBackground(new Color(0, 153, 204));
        } else {
            IXR_6.setBackground(Color.white);
        }
    }//GEN-LAST:event_IXR_6ActionPerformed

    private void I_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_I_5ActionPerformed
        if(I_5.isSelected()){
          I_5.setBackground(new Color(0, 153, 204));
        } else {
            I_5.setBackground(Color.white);
        }
    }//GEN-LAST:event_I_5ActionPerformed

    private void ADDRESS_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESS_4ActionPerformed
        if(ADDRESS_4.isSelected()){
          ADDRESS_4.setBackground(new Color(0, 153, 204));
        } else {
            ADDRESS_4.setBackground(Color.white);
        }
    }//GEN-LAST:event_ADDRESS_4ActionPerformed

    private void ADDRESS_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESS_3ActionPerformed
        if(ADDRESS_3.isSelected()){
          ADDRESS_3.setBackground(new Color(0, 153, 204));
        } else {
            ADDRESS_3.setBackground(Color.white);
        }
    }//GEN-LAST:event_ADDRESS_3ActionPerformed

    private void ADDRESS_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESS_2ActionPerformed
        if(ADDRESS_2.isSelected()){
          ADDRESS_2.setBackground(new Color(0, 153, 204));
        } else {
            ADDRESS_2.setBackground(Color.white);
        }
    }//GEN-LAST:event_ADDRESS_2ActionPerformed

    private void ADDRESS_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESS_1ActionPerformed
        if(ADDRESS_1.isSelected()){
          ADDRESS_1.setBackground(new Color(0, 153, 204));
        } else {
            ADDRESS_1.setBackground(Color.white);
        }
    }//GEN-LAST:event_ADDRESS_1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*// Using this process to invoke the constructor,
        // JFileChooser points to user's default directory
        JFileChooser j = new JFileChooser();

        // Open the save dialog
        j.showOpenDialog(null);*/
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // short returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                
                BufferedReader br = null;
                try {
                    br = new BufferedReader(new FileReader(selectedFile));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                }
                String st;
                try {
                    short flag_PC = 0;
                    while ((st = br.readLine()) != null)
                    {
                        
                        String[] content = st.split(" ");
                        short location = Short.parseShort(content[0], 16); 
                        short value = Short.parseShort(content[1], 16); 
                        memory[location] = value;
                        if( flag_PC == 0){
                            flag_PC++;
                            PC = location;
                            Populate_PC();
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
                }
                Reset_Toggle_Instruction();
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ADDRESS_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDRESS_0ActionPerformed
        if(ADDRESS_0.isSelected()){
          ADDRESS_0.setBackground(new Color(0, 153, 204));
        } else {
            ADDRESS_0.setBackground(Color.white);
        }
    }//GEN-LAST:event_ADDRESS_0ActionPerformed

    private void Run_Program_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Run_Program_1ActionPerformed
       /*String str = KeyBoard.getText();       
       String[] arrOfStr = str.split("\n");

       int Lines = KeyBoard.getLineCount();
       short Address,i;
       for(Address=100,i=0; Address<100+Lines; Address++,i++){
           memory[Address]=Short.parseShort(arrOfStr[i], 16);
           ConsoleLog.append(arrOfStr[i]+" stored at : 0X"+Integer.toHexString(Address)+"\n");
       }
       ConsoleLog.append("Storing instructions from Program1.txt to memory...\n");
       File file = new File("./Program1.txt");
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        String st;
        try {
            short flag_PC = 0;
            while ((st = br.readLine()) != null)
            {
                String[] content = st.split(" ");
                short location = Short.parseShort(content[0], 16); 
                short value = Short.parseShort(content[1], 16); 
                memory[location] = value;
                ConsoleLog.append(content[1]+" stored at : 0X"+content[0]+"\n");
                if( flag_PC == 0){
                    flag_PC++;
                    PC = location;
                    Populate_PC();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reset_Toggle_Instruction();
        Printer.append("\n");*/
        File file = new File("./Program1.txt");
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        String st;
        try {
            short flag_PC = 0;
            while ((st = br.readLine()) != null)
            {
                String[] content = st.split(" ");
                int location = Integer.parseInt(content[0], 16); 
                int value = Integer.parseInt(content[1], 16); 
                memory[location] = (short) value;
                if( flag_PC == 0){
                    flag_PC++;
                    PC = (short) location;
                    Populate_PC();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConsoleLog.append("Program 1 code loaded to memory!\n");
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Run_Program_1ActionPerformed

    private void KeyBoardKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KeyBoardKeyPressed
        
    }//GEN-LAST:event_KeyBoardKeyPressed

    private void KeyBoardKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KeyBoardKeyReleased
        String str = KeyBoard.getText();
        if(evt.getKeyCode()==evt.VK_CAPS_LOCK){
            return;
        }
        if(InputSignal==0){
            if(str.charAt(str.length()-1)!='\n')
            {
                InputVal=(short) str.charAt(str.length()-1);
            }
            else{
                InputVal=(short) ((char)10);
            }
            InputSignal = 1;
        }
    }//GEN-LAST:event_KeyBoardKeyReleased

    private void Run_Program_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Run_Program_2ActionPerformed
        File file = new File("./Program2_text.txt");
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        String st;
        int location = 600;
        try {
            while ((st = br.readLine()) != null)
            {
                for(int i=0;i<st.length();i++){
                    int value = (int)st.charAt(i); 
                    memory[location] = (short) value;
                    location++;
                    
                }
                
            }
        } catch (IOException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        File file2 = new File("./Program2.txt");
        BufferedReader br2 = null;
        try {
            br2 = new BufferedReader(new FileReader(file2));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        String st2;
        try {
            short flag_PC = 0;
            while ((st2 = br2.readLine()) != null)
            {
                String[] content = st2.split(" ");
                location = Integer.parseInt(content[0], 16); 
                int value = Integer.parseInt(content[1], 16); 
                memory[location] = (short) value;
                if( flag_PC == 0){
                    flag_PC++;
                    PC = (short) location;
                    Populate_PC();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        ConsoleLog.append("Program 2 code loaded to memory!\n");
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Run_Program_2ActionPerformed

    private void Load_FR0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_FR0ActionPerformed
        FR0 = 0;
        if (ADDRESS_0.isSelected()){
            FR0+=Math.pow(2,0);
            FR0_0.setBackground(Color.yellow);
        }
        else {
            FR0_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            FR0+=Math.pow(2,1);
            FR0_1.setBackground(Color.yellow);
        }
        else {
            FR0_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            FR0+=Math.pow(2,2);
            FR0_2.setBackground(Color.yellow);
        }
        else {
            FR0_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            FR0+=Math.pow(2,3);
            FR0_3.setBackground(Color.yellow);
        }
        else {
            FR0_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            FR0+=Math.pow(2,4);
            FR0_4.setBackground(Color.yellow);
        }
        else {
            FR0_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            FR0+=Math.pow(2,5);
            FR0_5.setBackground(Color.yellow);
        }
        else {
            FR0_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            FR0+=Math.pow(2,6);
            FR0_6.setBackground(Color.yellow);
        }
        else {
            FR0_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            FR0+=Math.pow(2,7);
            FR0_7.setBackground(Color.yellow);
        }
        else {
            FR0_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            FR0+=Math.pow(2,8);
            FR0_8.setBackground(Color.yellow);
        }
        else {
            FR0_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            FR0+=Math.pow(2,9);
            FR0_9.setBackground(Color.yellow);
        }
        else {
            FR0_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            FR0+=Math.pow(2,10);
            FR0_10.setBackground(Color.yellow);
        }
        else {
            FR0_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            FR0+=Math.pow(2,11);
            FR0_11.setBackground(Color.yellow);
        }
        else {
            FR0_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            FR0+=Math.pow(2,12);
            FR0_12.setBackground(Color.yellow);
        }
        else {
            FR0_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            FR0+=Math.pow(2,13);
            FR0_13.setBackground(Color.yellow);
        }
        else {
            FR0_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            FR0+=Math.pow(2,14);
            FR0_14.setBackground(Color.yellow);
        }
        else {
            FR0_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            FR0+=Math.pow(2,15);
            FR0_15.setBackground(Color.yellow);
        }
        else {
            FR0_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_FR0ActionPerformed

    private void Load_FR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_FR1ActionPerformed
        FR1 = 0;
        if (ADDRESS_0.isSelected()){
            FR1+=Math.pow(2,0);
            FR1_0.setBackground(Color.yellow);
        }
        else {
            FR1_0.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_1.isSelected()){
            FR1+=Math.pow(2,1);
            FR1_1.setBackground(Color.yellow);
        }
        else {
            FR1_1.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_2.isSelected()){
            FR1+=Math.pow(2,2);
            FR1_2.setBackground(Color.yellow);
        }
        else {
            FR1_2.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_3.isSelected()){
            FR1+=Math.pow(2,3);
            FR1_3.setBackground(Color.yellow);
        }
        else {
            FR1_3.setBackground(Color.decode("#F2F2F2"));
        }

        if (ADDRESS_4.isSelected()){
            FR1+=Math.pow(2,4);
            FR1_4.setBackground(Color.yellow);
        }
        else {
            FR1_4.setBackground(Color.decode("#F2F2F2"));
        }

        if (I_5.isSelected()){
            FR1+=Math.pow(2,5);
            FR1_5.setBackground(Color.yellow);
        }
        else {
            FR1_5.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_6.isSelected()){
            FR1+=Math.pow(2,6);
            FR1_6.setBackground(Color.yellow);
        }
        else {
            FR1_6.setBackground(Color.decode("#F2F2F2"));
        }

        if (IXR_7.isSelected()){
            FR1+=Math.pow(2,7);
            FR1_7.setBackground(Color.yellow);
        }
        else {
            FR1_7.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_8.isSelected()){
            FR1+=Math.pow(2,8);
            FR1_8.setBackground(Color.yellow);
        }
        else {
            FR1_8.setBackground(Color.decode("#F2F2F2"));
        }

        if (GPR_9.isSelected()){
            FR1+=Math.pow(2,9);
            FR1_9.setBackground(Color.yellow);
        }
        else {
            FR1_9.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_10.isSelected()){
            FR1+=Math.pow(2,10);
            FR1_10.setBackground(Color.yellow);
        }
        else {
            FR1_10.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_11.isSelected()){
            FR1+=Math.pow(2,11);
            FR1_11.setBackground(Color.yellow);
        }
        else {
            FR1_11.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_12.isSelected()){
            FR1+=Math.pow(2,12);
            FR1_12.setBackground(Color.yellow);
        }
        else {
            FR1_12.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_13.isSelected()){
            FR1+=Math.pow(2,13);
            FR1_13.setBackground(Color.yellow);
        }
        else {
            FR1_13.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_14.isSelected()){
            FR1+=Math.pow(2,14);
            FR1_14.setBackground(Color.yellow);
        }
        else {
            FR1_14.setBackground(Color.decode("#F2F2F2"));
        }

        if (OP_15.isSelected()){
            FR1+=Math.pow(2,15);
            FR1_15.setBackground(Color.yellow);
        }
        else {
            FR1_15.setBackground(Color.decode("#F2F2F2"));
        }
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Load_FR1ActionPerformed

    private void Run_Vector_ProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Run_Vector_ProgramActionPerformed
        File file = new File("./VectorProgram.txt");
        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        String st;
        try {
            short flag_PC = 0;
            while ((st = br.readLine()) != null)
            {
                String[] content = st.split(" ");
                int location = Integer.parseInt(content[0], 16); 
                int value = Integer.parseInt(content[1], 16); 
                memory[location] = (short) value;
                if( flag_PC == 0){
                    flag_PC++;
                    PC = (short) location;
                    Populate_PC();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Simulator.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConsoleLog.append("Vector Program code loaded to memory!\n");
        Reset_Toggle_Instruction();
    }//GEN-LAST:event_Run_Vector_ProgramActionPerformed

    public boolean memoryOutofBoundCheck(short memoryAdr){ //MFR
        if(memoryAdr > 2056){
            MFR = 8;
            PC =(short) ( memory[1]);
            Populate_PC();
            ConsoleLog.append("Memory being tried to access beyond 2048\n");
            
        } else if(memoryAdr>0 && memoryAdr<=5){
            MFR = 1; 
            PC =(short) ( memory[1]);
            Populate_PC();
            ConsoleLog.append("Restricted memory being tried to access\n");
            
        } else {
            return false;
        }
        Populate_MFR();
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton ADDRESS_0;
    private javax.swing.JToggleButton ADDRESS_1;
    private javax.swing.JToggleButton ADDRESS_2;
    private javax.swing.JToggleButton ADDRESS_3;
    private javax.swing.JToggleButton ADDRESS_4;
    private javax.swing.JPanel CC_0;
    private javax.swing.JPanel CC_1;
    private javax.swing.JPanel CC_2;
    private javax.swing.JPanel CC_3;
    private javax.swing.JPanel CacheArea;
    private javax.swing.JButton Clear_LEDs;
    private javax.swing.JTextArea ConsoleLog;
    private javax.swing.JPanel FR0_0;
    private javax.swing.JPanel FR0_1;
    private javax.swing.JPanel FR0_10;
    private javax.swing.JPanel FR0_11;
    private javax.swing.JPanel FR0_12;
    private javax.swing.JPanel FR0_13;
    private javax.swing.JPanel FR0_14;
    private javax.swing.JPanel FR0_15;
    private javax.swing.JPanel FR0_2;
    private javax.swing.JPanel FR0_3;
    private javax.swing.JPanel FR0_4;
    private javax.swing.JPanel FR0_5;
    private javax.swing.JPanel FR0_6;
    private javax.swing.JPanel FR0_7;
    private javax.swing.JPanel FR0_8;
    private javax.swing.JPanel FR0_9;
    private javax.swing.JPanel FR1_0;
    private javax.swing.JPanel FR1_1;
    private javax.swing.JPanel FR1_10;
    private javax.swing.JPanel FR1_11;
    private javax.swing.JPanel FR1_12;
    private javax.swing.JPanel FR1_13;
    private javax.swing.JPanel FR1_14;
    private javax.swing.JPanel FR1_15;
    private javax.swing.JPanel FR1_2;
    private javax.swing.JPanel FR1_3;
    private javax.swing.JPanel FR1_4;
    private javax.swing.JPanel FR1_5;
    private javax.swing.JPanel FR1_6;
    private javax.swing.JPanel FR1_7;
    private javax.swing.JPanel FR1_8;
    private javax.swing.JPanel FR1_9;
    private javax.swing.JToggleButton GPR_8;
    private javax.swing.JToggleButton GPR_9;
    private javax.swing.JPanel Halt_Display;
    private javax.swing.JButton IPL;
    private javax.swing.JPanel IR_0;
    private javax.swing.JPanel IR_1;
    private javax.swing.JPanel IR_10;
    private javax.swing.JPanel IR_11;
    private javax.swing.JPanel IR_12;
    private javax.swing.JPanel IR_13;
    private javax.swing.JPanel IR_14;
    private javax.swing.JPanel IR_15;
    private javax.swing.JPanel IR_2;
    private javax.swing.JPanel IR_3;
    private javax.swing.JPanel IR_4;
    private javax.swing.JPanel IR_5;
    private javax.swing.JPanel IR_6;
    private javax.swing.JPanel IR_7;
    private javax.swing.JPanel IR_8;
    private javax.swing.JPanel IR_9;
    private javax.swing.JToggleButton IXR_6;
    private javax.swing.JToggleButton IXR_7;
    private javax.swing.JToggleButton I_5;
    private javax.swing.JPanel Input;
    private javax.swing.JLabel JLabel_Keyboard;
    private javax.swing.JLabel JLabel_Printer;
    private javax.swing.JTextArea KeyBoard;
    private javax.swing.JButton Load;
    private javax.swing.JButton Load_FR0;
    private javax.swing.JButton Load_FR1;
    private javax.swing.JButton Load_IR;
    private javax.swing.JButton Load_MAR;
    private javax.swing.JButton Load_MBR;
    private javax.swing.JButton Load_PC;
    private javax.swing.JButton Load_R0;
    private javax.swing.JButton Load_R1;
    private javax.swing.JButton Load_R2;
    private javax.swing.JButton Load_R3;
    private javax.swing.JButton Load_X1;
    private javax.swing.JButton Load_X2;
    private javax.swing.JButton Load_X3;
    private javax.swing.JPanel MAR_0;
    private javax.swing.JPanel MAR_1;
    private javax.swing.JPanel MAR_10;
    private javax.swing.JPanel MAR_11;
    private javax.swing.JPanel MAR_2;
    private javax.swing.JPanel MAR_3;
    private javax.swing.JPanel MAR_4;
    private javax.swing.JPanel MAR_5;
    private javax.swing.JPanel MAR_6;
    private javax.swing.JPanel MAR_7;
    private javax.swing.JPanel MAR_8;
    private javax.swing.JPanel MAR_9;
    private javax.swing.JPanel MBR_0;
    private javax.swing.JPanel MBR_1;
    private javax.swing.JPanel MBR_10;
    private javax.swing.JPanel MBR_11;
    private javax.swing.JPanel MBR_12;
    private javax.swing.JPanel MBR_13;
    private javax.swing.JPanel MBR_14;
    private javax.swing.JPanel MBR_15;
    private javax.swing.JPanel MBR_2;
    private javax.swing.JPanel MBR_3;
    private javax.swing.JPanel MBR_4;
    private javax.swing.JPanel MBR_5;
    private javax.swing.JPanel MBR_6;
    private javax.swing.JPanel MBR_7;
    private javax.swing.JPanel MBR_8;
    private javax.swing.JPanel MBR_9;
    private javax.swing.JPanel MFR_0;
    private javax.swing.JPanel MFR_1;
    private javax.swing.JPanel MFR_2;
    private javax.swing.JPanel MFR_3;
    private javax.swing.JToggleButton OP_10;
    private javax.swing.JToggleButton OP_11;
    private javax.swing.JToggleButton OP_12;
    private javax.swing.JToggleButton OP_13;
    private javax.swing.JToggleButton OP_14;
    private javax.swing.JToggleButton OP_15;
    private javax.swing.JPanel PC_0;
    private javax.swing.JPanel PC_1;
    private javax.swing.JPanel PC_10;
    private javax.swing.JPanel PC_11;
    private javax.swing.JPanel PC_2;
    private javax.swing.JPanel PC_3;
    private javax.swing.JPanel PC_4;
    private javax.swing.JPanel PC_5;
    private javax.swing.JPanel PC_6;
    private javax.swing.JPanel PC_7;
    private javax.swing.JPanel PC_8;
    private javax.swing.JPanel PC_9;
    private javax.swing.JPanel Phase2;
    private javax.swing.JTextArea Printer;
    private javax.swing.JPanel R0_0;
    private javax.swing.JPanel R0_1;
    private javax.swing.JPanel R0_10;
    private javax.swing.JPanel R0_11;
    private javax.swing.JPanel R0_12;
    private javax.swing.JPanel R0_13;
    private javax.swing.JPanel R0_14;
    private javax.swing.JPanel R0_15;
    private javax.swing.JPanel R0_2;
    private javax.swing.JPanel R0_3;
    private javax.swing.JPanel R0_4;
    private javax.swing.JPanel R0_5;
    private javax.swing.JPanel R0_6;
    private javax.swing.JPanel R0_7;
    private javax.swing.JPanel R0_8;
    private javax.swing.JPanel R0_9;
    private javax.swing.JPanel R1_0;
    private javax.swing.JPanel R1_1;
    private javax.swing.JPanel R1_10;
    private javax.swing.JPanel R1_11;
    private javax.swing.JPanel R1_12;
    private javax.swing.JPanel R1_13;
    private javax.swing.JPanel R1_14;
    private javax.swing.JPanel R1_15;
    private javax.swing.JPanel R1_2;
    private javax.swing.JPanel R1_3;
    private javax.swing.JPanel R1_4;
    private javax.swing.JPanel R1_5;
    private javax.swing.JPanel R1_6;
    private javax.swing.JPanel R1_7;
    private javax.swing.JPanel R1_8;
    private javax.swing.JPanel R1_9;
    private javax.swing.JPanel R2_0;
    private javax.swing.JPanel R2_1;
    private javax.swing.JPanel R2_10;
    private javax.swing.JPanel R2_11;
    private javax.swing.JPanel R2_12;
    private javax.swing.JPanel R2_13;
    private javax.swing.JPanel R2_14;
    private javax.swing.JPanel R2_15;
    private javax.swing.JPanel R2_2;
    private javax.swing.JPanel R2_3;
    private javax.swing.JPanel R2_4;
    private javax.swing.JPanel R2_5;
    private javax.swing.JPanel R2_6;
    private javax.swing.JPanel R2_7;
    private javax.swing.JPanel R2_8;
    private javax.swing.JPanel R2_9;
    private javax.swing.JPanel R3_0;
    private javax.swing.JPanel R3_1;
    private javax.swing.JPanel R3_10;
    private javax.swing.JPanel R3_11;
    private javax.swing.JPanel R3_12;
    private javax.swing.JPanel R3_13;
    private javax.swing.JPanel R3_14;
    private javax.swing.JPanel R3_15;
    private javax.swing.JPanel R3_2;
    private javax.swing.JPanel R3_3;
    private javax.swing.JPanel R3_4;
    private javax.swing.JPanel R3_5;
    private javax.swing.JPanel R3_6;
    private javax.swing.JPanel R3_7;
    private javax.swing.JPanel R3_8;
    private javax.swing.JPanel R3_9;
    private javax.swing.JButton Run;
    private javax.swing.JPanel Run_Display;
    private javax.swing.JButton Run_Program_1;
    private javax.swing.JButton Run_Program_2;
    private javax.swing.JButton Run_Vector_Program;
    private javax.swing.JButton SS;
    private javax.swing.JButton Store;
    private javax.swing.JButton Store_plus;
    private javax.swing.JTextField Tag_0;
    private javax.swing.JTextField Tag_1;
    private javax.swing.JTextField Tag_10;
    private javax.swing.JTextField Tag_11;
    private javax.swing.JTextField Tag_12;
    private javax.swing.JTextField Tag_13;
    private javax.swing.JTextField Tag_14;
    private javax.swing.JTextField Tag_15;
    private javax.swing.JTextField Tag_2;
    private javax.swing.JTextField Tag_3;
    private javax.swing.JTextField Tag_4;
    private javax.swing.JTextField Tag_5;
    private javax.swing.JTextField Tag_6;
    private javax.swing.JTextField Tag_7;
    private javax.swing.JTextField Tag_8;
    private javax.swing.JTextField Tag_9;
    private javax.swing.JTextField Value_0;
    private javax.swing.JTextField Value_1;
    private javax.swing.JTextField Value_10;
    private javax.swing.JTextField Value_11;
    private javax.swing.JTextField Value_12;
    private javax.swing.JTextField Value_13;
    private javax.swing.JTextField Value_14;
    private javax.swing.JTextField Value_15;
    private javax.swing.JTextField Value_2;
    private javax.swing.JTextField Value_3;
    private javax.swing.JTextField Value_4;
    private javax.swing.JTextField Value_5;
    private javax.swing.JTextField Value_6;
    private javax.swing.JTextField Value_7;
    private javax.swing.JTextField Value_8;
    private javax.swing.JTextField Value_9;
    private javax.swing.JPanel X1_0;
    private javax.swing.JPanel X1_1;
    private javax.swing.JPanel X1_10;
    private javax.swing.JPanel X1_11;
    private javax.swing.JPanel X1_12;
    private javax.swing.JPanel X1_13;
    private javax.swing.JPanel X1_14;
    private javax.swing.JPanel X1_15;
    private javax.swing.JPanel X1_2;
    private javax.swing.JPanel X1_3;
    private javax.swing.JPanel X1_4;
    private javax.swing.JPanel X1_5;
    private javax.swing.JPanel X1_6;
    private javax.swing.JPanel X1_7;
    private javax.swing.JPanel X1_8;
    private javax.swing.JPanel X1_9;
    private javax.swing.JPanel X2_0;
    private javax.swing.JPanel X2_1;
    private javax.swing.JPanel X2_10;
    private javax.swing.JPanel X2_11;
    private javax.swing.JPanel X2_12;
    private javax.swing.JPanel X2_13;
    private javax.swing.JPanel X2_14;
    private javax.swing.JPanel X2_15;
    private javax.swing.JPanel X2_2;
    private javax.swing.JPanel X2_3;
    private javax.swing.JPanel X2_4;
    private javax.swing.JPanel X2_5;
    private javax.swing.JPanel X2_6;
    private javax.swing.JPanel X2_7;
    private javax.swing.JPanel X2_8;
    private javax.swing.JPanel X2_9;
    private javax.swing.JPanel X3_0;
    private javax.swing.JPanel X3_1;
    private javax.swing.JPanel X3_10;
    private javax.swing.JPanel X3_11;
    private javax.swing.JPanel X3_12;
    private javax.swing.JPanel X3_13;
    private javax.swing.JPanel X3_14;
    private javax.swing.JPanel X3_15;
    private javax.swing.JPanel X3_2;
    private javax.swing.JPanel X3_3;
    private javax.swing.JPanel X3_4;
    private javax.swing.JPanel X3_5;
    private javax.swing.JPanel X3_6;
    private javax.swing.JPanel X3_7;
    private javax.swing.JPanel X3_8;
    private javax.swing.JPanel X3_9;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_Address;
    private javax.swing.JLabel jLabel_CC;
    private javax.swing.JLabel jLabel_Cache;
    private javax.swing.JLabel jLabel_GPR;
    private javax.swing.JLabel jLabel_Halt;
    private javax.swing.JLabel jLabel_I;
    private javax.swing.JLabel jLabel_IR;
    private javax.swing.JLabel jLabel_IXR;
    private javax.swing.JLabel jLabel_MAR;
    private javax.swing.JLabel jLabel_MBR;
    private javax.swing.JLabel jLabel_MFR;
    private javax.swing.JLabel jLabel_Operation;
    private javax.swing.JLabel jLabel_PC;
    private javax.swing.JLabel jLabel_R0;
    private javax.swing.JLabel jLabel_R1;
    private javax.swing.JLabel jLabel_R2;
    private javax.swing.JLabel jLabel_R3;
    private javax.swing.JLabel jLabel_R4;
    private javax.swing.JLabel jLabel_R5;
    private javax.swing.JLabel jLabel_Run;
    private javax.swing.JLabel jLabel_Tag0;
    private javax.swing.JLabel jLabel_Tag1;
    private javax.swing.JLabel jLabel_Tag10;
    private javax.swing.JLabel jLabel_Tag11;
    private javax.swing.JLabel jLabel_Tag12;
    private javax.swing.JLabel jLabel_Tag13;
    private javax.swing.JLabel jLabel_Tag14;
    private javax.swing.JLabel jLabel_Tag15;
    private javax.swing.JLabel jLabel_Tag2;
    private javax.swing.JLabel jLabel_Tag3;
    private javax.swing.JLabel jLabel_Tag4;
    private javax.swing.JLabel jLabel_Tag5;
    private javax.swing.JLabel jLabel_Tag6;
    private javax.swing.JLabel jLabel_Tag7;
    private javax.swing.JLabel jLabel_Tag8;
    private javax.swing.JLabel jLabel_Tag9;
    private javax.swing.JLabel jLabel_X1;
    private javax.swing.JLabel jLabel_X2;
    private javax.swing.JLabel jLabel_X3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
